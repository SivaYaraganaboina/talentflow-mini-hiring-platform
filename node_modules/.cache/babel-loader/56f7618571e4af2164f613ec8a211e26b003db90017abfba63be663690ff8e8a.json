{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Desktop\\\\talentflow-mini-hiring-platform\\\\TalentFlow\\\\src\\\\pages\\\\Assessments.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AssessmentListProfessional from '../components/AssessmentListProfessional';\nimport AssessmentBuilder from '../components/AssessmentBuilder';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Assessments = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [showBuilder, setShowBuilder] = useState(false);\n  const [selectedJobId, setSelectedJobId] = useState('');\n  const [pendingCandidateId, setPendingCandidateId] = useState('');\n  useEffect(() => {\n    const jobId = searchParams.get('jobId');\n    const candidateId = searchParams.get('candidateId');\n    if (jobId) {\n      setSelectedJobId(jobId);\n      setShowBuilder(true);\n      if (candidateId) {\n        setPendingCandidateId(candidateId);\n        toast.success('Creating assessment for candidate invitation');\n      }\n    }\n  }, [searchParams]);\n  const handleCreateAssessment = jobId => {\n    console.log('handleCreateAssessment called with jobId:', jobId);\n    setSelectedJobId(jobId);\n    setShowBuilder(true);\n    console.log('showBuilder set to true, selectedJobId set to:', jobId);\n  };\n  const handleSaveAssessment = async assessment => {\n    setShowBuilder(false);\n    setSelectedJobId('');\n\n    // If there's a pending candidate invitation, send it now\n    if (pendingCandidateId) {\n      try {\n        const response = await fetch(`/api/candidates/${pendingCandidateId}/invite-assessment`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            jobId: assessment.jobId,\n            invitedBy: 'HR',\n            stage: 'assessment'\n          })\n        });\n        if (response.ok) {\n          toast.success('Assessment created and invitation sent to candidate!');\n        }\n      } catch (error) {\n        console.error('Error sending invitation:', error);\n        toast.error('Assessment created but failed to send invitation');\n      }\n      setPendingCandidateId('');\n    }\n\n    // Refresh the list\n    window.location.reload();\n  };\n  const handleCloseBuilder = () => {\n    setShowBuilder(false);\n    setSelectedJobId('');\n    setPendingCandidateId('');\n  };\n  console.log('Assessments render - showBuilder:', showBuilder, 'selectedJobId:', selectedJobId);\n  if (showBuilder) {\n    console.log('Rendering AssessmentBuilder with jobId:', selectedJobId);\n    return /*#__PURE__*/_jsxDEV(AssessmentBuilder, {\n      jobId: selectedJobId,\n      onSave: handleSaveAssessment,\n      onClose: handleCloseBuilder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AssessmentListProfessional, {\n    onCreateAssessment: handleCreateAssessment\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n_s(Assessments, \"Usq2BGFG1eO3YDmtvxd4nHNVXLc=\", false, function () {\n  return [useSearchParams];\n});\n_c = Assessments;\nexport default Assessments;\nvar _c;\n$RefreshReg$(_c, \"Assessments\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","AssessmentListProfessional","AssessmentBuilder","toast","jsxDEV","_jsxDEV","Assessments","_s","searchParams","showBuilder","setShowBuilder","selectedJobId","setSelectedJobId","pendingCandidateId","setPendingCandidateId","jobId","get","candidateId","success","handleCreateAssessment","console","log","handleSaveAssessment","assessment","response","fetch","method","headers","body","JSON","stringify","invitedBy","stage","ok","error","window","location","reload","handleCloseBuilder","onSave","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onCreateAssessment","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/pages/Assessments.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AssessmentListProfessional from '../components/AssessmentListProfessional';\nimport AssessmentBuilder from '../components/AssessmentBuilder';\nimport { Assessment } from '../types';\nimport toast from 'react-hot-toast';\n\nconst Assessments: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const [showBuilder, setShowBuilder] = useState(false);\n  const [selectedJobId, setSelectedJobId] = useState<string>('');\n  const [pendingCandidateId, setPendingCandidateId] = useState<string>('');\n\n  useEffect(() => {\n    const jobId = searchParams.get('jobId');\n    const candidateId = searchParams.get('candidateId');\n    \n    if (jobId) {\n      setSelectedJobId(jobId);\n      setShowBuilder(true);\n      if (candidateId) {\n        setPendingCandidateId(candidateId);\n        toast.success('Creating assessment for candidate invitation');\n      }\n    }\n  }, [searchParams]);\n\n  const handleCreateAssessment = (jobId: string) => {\n    console.log('handleCreateAssessment called with jobId:', jobId);\n    setSelectedJobId(jobId);\n    setShowBuilder(true);\n    console.log('showBuilder set to true, selectedJobId set to:', jobId);\n  };\n\n  const handleSaveAssessment = async (assessment: Assessment) => {\n    setShowBuilder(false);\n    setSelectedJobId('');\n    \n    // If there's a pending candidate invitation, send it now\n    if (pendingCandidateId) {\n      try {\n        const response = await fetch(`/api/candidates/${pendingCandidateId}/invite-assessment`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            jobId: assessment.jobId,\n            invitedBy: 'HR',\n            stage: 'assessment'\n          })\n        });\n        \n        if (response.ok) {\n          toast.success('Assessment created and invitation sent to candidate!');\n        }\n      } catch (error) {\n        console.error('Error sending invitation:', error);\n        toast.error('Assessment created but failed to send invitation');\n      }\n      setPendingCandidateId('');\n    }\n    \n    // Refresh the list\n    window.location.reload();\n  };\n\n  const handleCloseBuilder = () => {\n    setShowBuilder(false);\n    setSelectedJobId('');\n    setPendingCandidateId('');\n  };\n\n  console.log('Assessments render - showBuilder:', showBuilder, 'selectedJobId:', selectedJobId);\n  \n  if (showBuilder) {\n    console.log('Rendering AssessmentBuilder with jobId:', selectedJobId);\n    return (\n      <AssessmentBuilder\n        jobId={selectedJobId}\n        onSave={handleSaveAssessment}\n        onClose={handleCloseBuilder}\n      />\n    );\n  }\n\n  return <AssessmentListProfessional onCreateAssessment={handleCreateAssessment} />;\n};\n\nexport default Assessments;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}