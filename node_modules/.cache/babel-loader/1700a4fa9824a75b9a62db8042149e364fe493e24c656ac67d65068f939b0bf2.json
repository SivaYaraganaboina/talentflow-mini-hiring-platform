{"ast":null,"code":"// API utility with retry logic\nexport const apiCall = async (url, options, retries = 3) => {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(url, options);\n\n      // Check if response is HTML (indicates MSW not working)\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('text/html')) {\n        throw new Error('Received HTML instead of JSON - MSW may not be ready');\n      }\n      return response;\n    } catch (error) {\n      console.warn(`API call attempt ${i + 1} failed:`, error);\n      if (i === retries - 1) {\n        throw error;\n      }\n\n      // Wait before retry\n      await new Promise(resolve => setTimeout(resolve, 200 * (i + 1)));\n    }\n  }\n  throw new Error('All retry attempts failed');\n};","map":{"version":3,"names":["apiCall","url","options","retries","i","response","fetch","contentType","headers","get","includes","Error","error","console","warn","Promise","resolve","setTimeout"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/utils/apiUtils.ts"],"sourcesContent":["// API utility with retry logic\nexport const apiCall = async (url: string, options?: RequestInit, retries = 3): Promise<Response> => {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(url, options);\n      \n      // Check if response is HTML (indicates MSW not working)\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('text/html')) {\n        throw new Error('Received HTML instead of JSON - MSW may not be ready');\n      }\n      \n      return response;\n    } catch (error) {\n      console.warn(`API call attempt ${i + 1} failed:`, error);\n      \n      if (i === retries - 1) {\n        throw error;\n      }\n      \n      // Wait before retry\n      await new Promise(resolve => setTimeout(resolve, 200 * (i + 1)));\n    }\n  }\n  \n  throw new Error('All retry attempts failed');\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAO,GAAG,MAAAA,CAAOC,GAAW,EAAEC,OAAqB,EAAEC,OAAO,GAAG,CAAC,KAAwB;EACnG,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,EAAEC,CAAC,EAAE,EAAE;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,MAAMK,WAAW,GAAGF,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE;QACpD,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,OAAON,QAAQ;IACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,oBAAoBV,CAAC,GAAG,CAAC,UAAU,EAAEQ,KAAK,CAAC;MAExD,IAAIR,CAAC,KAAKD,OAAO,GAAG,CAAC,EAAE;QACrB,MAAMS,KAAK;MACb;;MAEA;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,IAAIZ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE;EACF;EAEA,MAAM,IAAIO,KAAK,CAAC,2BAA2B,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}