{"ast":null,"code":"import Dexie from'dexie';import{mockJobs}from'./mockData';export class TalentFlowDatabase extends Dexie{constructor(){super('TalentFlowDatabase');this.jobs=void 0;this.candidates=void 0;this.assessments=void 0;this.submissions=void 0;this.timeline=void 0;this.version(1).stores({jobs:'id, title, status, order, createdAt',candidates:'id, name, email, stage, jobId, appliedAt',assessments:'id, jobId, title, createdAt',submissions:'id, jobId, candidateId, submittedAt',timeline:'id, candidateId, stage, timestamp'});}}export const db=new TalentFlowDatabase();// Initialize database with seed data\nexport const initializeDatabase=async()=>{try{const jobCount=await db.jobs.count();console.log('Current job count:',jobCount);if(jobCount===0){console.log('Seeding database with initial data...');await seedDatabase();console.log('Database seeded successfully');}else if(jobCount<30){console.log('Adding additional test jobs...');await addTestJobs();console.log('Additional jobs added');}else{console.log('Database already has sufficient test data');}const finalCount=await db.jobs.count();console.log('Final job count:',finalCount);}catch(error){console.error('Error initializing database:',error);}};const seedDatabase=async()=>{// Seed Jobs using detailed mockJobs from mockData.ts\nawait db.jobs.bulkAdd(mockJobs);// Seed Candidates\nconst stages=['applied','screen','tech','offer','hired','rejected'];const candidates=Array.from({length:1000},(_,i)=>{const jobId=mockJobs[Math.floor(Math.random()*mockJobs.length)].id;const stage=stages[Math.floor(Math.random()*stages.length)];const appliedAt=new Date(Date.now()-Math.random()*60*24*60*60*1000).toISOString();return{id:\"candidate-\".concat(i+1),name:\"Candidate \".concat(i+1),email:\"candidate\".concat(i+1,\"@example.com\"),phone:\"+1-555-\".concat(String(Math.floor(Math.random()*10000)).padStart(4,'0')),resume:\"Resume for Candidate \".concat(i+1),status:'active',stage,jobId,appliedAt,timeline:[{id:\"timeline-\".concat(i+1,\"-1\"),stage:'applied',timestamp:appliedAt,notes:'Application submitted'}]};});await db.candidates.bulkAdd(candidates);// Seed Assessments\nconst assessments=mockJobs.slice(0,3).map((job,i)=>({id:\"assessment-\".concat(job.id),jobId:job.id,title:\"\".concat(job.title,\" Assessment\"),description:\"Technical assessment for \".concat(job.title,\" position\"),sections:[{id:\"section-\".concat(i+1,\"-1\"),title:'Technical Skills',questions:[{id:\"q-\".concat(i+1,\"-1\"),type:'single-choice',title:'What is your experience with React?',description:'Select your level of experience',required:true,options:['Beginner','Intermediate','Advanced','Expert']},{id:\"q-\".concat(i+1,\"-2\"),type:'multi-choice',title:'Which technologies have you worked with?',description:'Select all that apply',required:true,options:['JavaScript','TypeScript','React','Node.js','Python','Java']},{id:\"q-\".concat(i+1,\"-3\"),type:'short-text',title:'Years of experience',description:'How many years of professional experience do you have?',required:true,validation:{min:0,max:50}},{id:\"q-\".concat(i+1,\"-4\"),type:'long-text',title:'Describe your most challenging project',description:'Tell us about a challenging project you worked on',required:true,validation:{maxLength:1000}},{id:\"q-\".concat(i+1,\"-5\"),type:'numeric',title:'Expected salary range (in thousands)',description:'What is your expected salary range?',required:false,validation:{min:30,max:300}}]},{id:\"section-\".concat(i+1,\"-2\"),title:'Behavioral Questions',questions:[{id:\"q-\".concat(i+1,\"-6\"),type:'single-choice',title:'Do you prefer working in teams?',description:'Select your preference',required:true,options:['Yes','No','Sometimes']},{id:\"q-\".concat(i+1,\"-7\"),type:'long-text',title:'Team collaboration experience',description:'Describe your experience working in teams',required:true,conditional:{dependsOn:\"q-\".concat(i+1,\"-6\"),condition:'equals',value:'Yes'},validation:{maxLength:500}},{id:\"q-\".concat(i+1,\"-8\"),type:'file-upload',title:'Portfolio or work samples',description:'Upload your portfolio or work samples',required:false}]}],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}));await db.assessments.bulkAdd(assessments);};const addTestJobs=async()=>{// Add any missing test jobs from the mock data\nconst existingJobs=await db.jobs.toArray();const existingIds=new Set(existingJobs.map(job=>job.id));const jobsToAdd=mockJobs.filter(job=>!existingIds.has(job.id));if(jobsToAdd.length>0){await db.jobs.bulkAdd(jobsToAdd);}};","map":{"version":3,"names":["Dexie","mockJobs","TalentFlowDatabase","constructor","jobs","candidates","assessments","submissions","timeline","version","stores","db","initializeDatabase","jobCount","count","console","log","seedDatabase","addTestJobs","finalCount","error","bulkAdd","stages","Array","from","length","_","i","jobId","Math","floor","random","id","stage","appliedAt","Date","now","toISOString","concat","name","email","phone","String","padStart","resume","status","timestamp","notes","slice","map","job","title","description","sections","questions","type","required","options","validation","min","max","maxLength","conditional","dependsOn","condition","value","createdAt","updatedAt","existingJobs","toArray","existingIds","Set","jobsToAdd","filter","has"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/database.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission, TimelineEntry } from '../types';\r\nimport { mockJobs } from './mockData';\r\n\r\nexport class TalentFlowDatabase extends Dexie {\r\n  jobs!: Table<Job>;\r\n  candidates!: Table<Candidate>;\r\n  assessments!: Table<Assessment>;\r\n  submissions!: Table<AssessmentSubmission>;\r\n  timeline!: Table<TimelineEntry>;\r\n\r\n  constructor() {\r\n    super('TalentFlowDatabase');\r\n    this.version(1).stores({\r\n      jobs: 'id, title, status, order, createdAt',\r\n      candidates: 'id, name, email, stage, jobId, appliedAt',\r\n      assessments: 'id, jobId, title, createdAt',\r\n      submissions: 'id, jobId, candidateId, submittedAt',\r\n      timeline: 'id, candidateId, stage, timestamp'\r\n    });\r\n  }\r\n}\r\n\r\nexport const db = new TalentFlowDatabase();\r\n\r\n// Initialize database with seed data\r\nexport const initializeDatabase = async () => {\r\n  try {\r\n    const jobCount = await db.jobs.count();\r\n    console.log('Current job count:', jobCount);\r\n\r\n    if (jobCount === 0) {\r\n      console.log('Seeding database with initial data...');\r\n      await seedDatabase();\r\n      console.log('Database seeded successfully');\r\n    } else if (jobCount < 30) {\r\n      console.log('Adding additional test jobs...');\r\n      await addTestJobs();\r\n      console.log('Additional jobs added');\r\n    } else {\r\n      console.log('Database already has sufficient test data');\r\n    }\r\n\r\n    const finalCount = await db.jobs.count();\r\n    console.log('Final job count:', finalCount);\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n  }\r\n};\r\n\r\nconst seedDatabase = async () => {\r\n  // Seed Jobs using detailed mockJobs from mockData.ts\r\n  await db.jobs.bulkAdd(mockJobs as Job[]);\r\n\r\n  // Seed Candidates\r\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  const candidates: Candidate[] = Array.from({ length: 1000 }, (_, i) => {\r\n    const jobId = mockJobs[Math.floor(Math.random() * mockJobs.length)].id;\r\n    const stage = stages[Math.floor(Math.random() * stages.length)];\r\n    const appliedAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString();\r\n\r\n    return {\r\n      id: `candidate-${i + 1}`,\r\n      name: `Candidate ${i + 1}`,\r\n      email: `candidate${i + 1}@example.com`,\r\n      phone: `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,\r\n      resume: `Resume for Candidate ${i + 1}`,\r\n      status: 'active',\r\n      stage,\r\n      jobId,\r\n      appliedAt,\r\n      timeline: [\r\n        {\r\n          id: `timeline-${i + 1}-1`,\r\n          stage: 'applied',\r\n          timestamp: appliedAt,\r\n          notes: 'Application submitted'\r\n        }\r\n      ]\r\n    };\r\n  });\r\n\r\n  await db.candidates.bulkAdd(candidates);\r\n\r\n  // Seed Assessments\r\n  const assessments: Assessment[] = mockJobs.slice(0, 3).map((job, i) => ({\r\n    id: `assessment-${job.id}`,\r\n    jobId: job.id,\r\n    title: `${job.title} Assessment`,\r\n    description: `Technical assessment for ${job.title} position`,\r\n    sections: [\r\n      {\r\n        id: `section-${i + 1}-1`,\r\n        title: 'Technical Skills',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-1`,\r\n            type: 'single-choice',\r\n            title: 'What is your experience with React?',\r\n            description: 'Select your level of experience',\r\n            required: true,\r\n            options: ['Beginner', 'Intermediate', 'Advanced', 'Expert']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-2`,\r\n            type: 'multi-choice',\r\n            title: 'Which technologies have you worked with?',\r\n            description: 'Select all that apply',\r\n            required: true,\r\n            options: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-3`,\r\n            type: 'short-text',\r\n            title: 'Years of experience',\r\n            description: 'How many years of professional experience do you have?',\r\n            required: true,\r\n            validation: { min: 0, max: 50 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-4`,\r\n            type: 'long-text',\r\n            title: 'Describe your most challenging project',\r\n            description: 'Tell us about a challenging project you worked on',\r\n            required: true,\r\n            validation: { maxLength: 1000 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-5`,\r\n            type: 'numeric',\r\n            title: 'Expected salary range (in thousands)',\r\n            description: 'What is your expected salary range?',\r\n            required: false,\r\n            validation: { min: 30, max: 300 }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: `section-${i + 1}-2`,\r\n        title: 'Behavioral Questions',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-6`,\r\n            type: 'single-choice',\r\n            title: 'Do you prefer working in teams?',\r\n            description: 'Select your preference',\r\n            required: true,\r\n            options: ['Yes', 'No', 'Sometimes']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-7`,\r\n            type: 'long-text',\r\n            title: 'Team collaboration experience',\r\n            description: 'Describe your experience working in teams',\r\n            required: true,\r\n            conditional: {\r\n              dependsOn: `q-${i + 1}-6`,\r\n              condition: 'equals',\r\n              value: 'Yes'\r\n            },\r\n            validation: { maxLength: 500 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-8`,\r\n            type: 'file-upload',\r\n            title: 'Portfolio or work samples',\r\n            description: 'Upload your portfolio or work samples',\r\n            required: false\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }));\r\n\r\n  await db.assessments.bulkAdd(assessments);\r\n};\r\n\r\nconst addTestJobs = async () => {\r\n  // Add any missing test jobs from the mock data\r\n  const existingJobs = await db.jobs.toArray();\r\n  const existingIds = new Set(existingJobs.map(job => job.id));\r\n\r\n  const jobsToAdd = mockJobs.filter(job => !existingIds.has(job.id));\r\n\r\n  if (jobsToAdd.length > 0) {\r\n    await db.jobs.bulkAdd(jobsToAdd as Job[]);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}