{"ast":null,"code":"import { getEmptyResult, parseImpl, resetResult } from 'tldts-core';\nimport suffixLookup from './src/suffix-trie';\n// For all methods but 'parse', it does not make sense to allocate an object\n// every single time to only return the value of a specific attribute. To avoid\n// this un-necessary allocation, we use a global object which is re-used.\nconst RESULT = getEmptyResult();\nexport function parse(url, options = {}) {\n  return parseImpl(url, 5 /* FLAG.ALL */, suffixLookup, options, getEmptyResult());\n}\nexport function getHostname(url, options = {}) {\n  /*@__INLINE__*/resetResult(RESULT);\n  return parseImpl(url, 0 /* FLAG.HOSTNAME */, suffixLookup, options, RESULT).hostname;\n}\nexport function getPublicSuffix(url, options = {}) {\n  /*@__INLINE__*/resetResult(RESULT);\n  return parseImpl(url, 2 /* FLAG.PUBLIC_SUFFIX */, suffixLookup, options, RESULT).publicSuffix;\n}\nexport function getDomain(url, options = {}) {\n  /*@__INLINE__*/resetResult(RESULT);\n  return parseImpl(url, 3 /* FLAG.DOMAIN */, suffixLookup, options, RESULT).domain;\n}\nexport function getSubdomain(url, options = {}) {\n  /*@__INLINE__*/resetResult(RESULT);\n  return parseImpl(url, 4 /* FLAG.SUB_DOMAIN */, suffixLookup, options, RESULT).subdomain;\n}\nexport function getDomainWithoutSuffix(url, options = {}) {\n  /*@__INLINE__*/resetResult(RESULT);\n  return parseImpl(url, 5 /* FLAG.ALL */, suffixLookup, options, RESULT).domainWithoutSuffix;\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}