{"ast":null,"code":"import _defineProperty from \"C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { FetchResponse } from \"@mswjs/interceptors\";\nimport { decorateResponse, normalizeResponseInit } from './utils/HttpResponse/decorators.mjs';\nconst bodyType = Symbol(\"bodyType\");\nclass HttpResponse extends FetchResponse {\n  constructor(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    super(body, responseInit);\n    _defineProperty(this, bodyType, null);\n    decorateResponse(this, responseInit);\n  }\n  static error() {\n    return super.error();\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/plain\");\n    }\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", body ? new Blob([body]).size.toString() : \"0\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/json\");\n    }\n    const responseText = JSON.stringify(body);\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", responseText ? new Blob([responseText]).size.toString() : \"0\");\n    }\n    return new HttpResponse(responseText, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/xml\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/html\"` body.\n   * @example\n   * HttpResponse.html(`<p class=\"author\">Jane Doe</p>`)\n   * HttpResponse.html(`<main id=\"abc-123\">Main text</main>`, { status: 201 })\n   */\n  static html(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/html\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/octet-stream\");\n    }\n    if (body && !responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", body.byteLength.toString());\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body, init) {\n    return new HttpResponse(body, normalizeResponseInit(init));\n  }\n}\nexport { HttpResponse, bodyType };","map":{"version":3,"names":["FetchResponse","decorateResponse","normalizeResponseInit","bodyType","Symbol","HttpResponse","constructor","body","init","responseInit","_defineProperty","error","text","headers","has","set","Blob","size","toString","json","responseText","JSON","stringify","xml","html","arrayBuffer","byteLength","formData"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\msw\\src\\core\\HttpResponse.ts"],"sourcesContent":["import { FetchResponse } from '@mswjs/interceptors'\nimport type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'\nimport type { NoInfer } from './typeUtils'\nimport {\n  decorateResponse,\n  normalizeResponseInit,\n} from './utils/HttpResponse/decorators'\n\nexport interface HttpResponseInit extends ResponseInit {\n  type?: ResponseType\n}\n\nexport const bodyType: unique symbol = Symbol('bodyType')\nexport type DefaultUnsafeFetchResponse = Response & {\n  [bodyType]?: never\n}\n\nexport interface StrictRequest<BodyType extends JsonBodyType> extends Request {\n  json(): Promise<BodyType>\n}\n\n/**\n * Opaque `Response` type that supports strict body type.\n *\n * @deprecated Please use {@link HttpResponse} instead.\n */\nexport type StrictResponse<BodyType extends DefaultBodyType> =\n  HttpResponse<BodyType>\n\n/**\n * A drop-in replacement for the standard `Response` class\n * to allow additional features, like mocking the response `Set-Cookie` header.\n *\n * @example\n * new HttpResponse('Hello world', { status: 201 })\n * HttpResponse.json({ name: 'John' })\n * HttpResponse.formData(form)\n *\n * @see {@link https://mswjs.io/docs/api/http-response `HttpResponse` API reference}\n */\nexport class HttpResponse<\n  BodyType extends DefaultBodyType,\n> extends FetchResponse {\n  readonly [bodyType]: BodyType = null as any\n\n  constructor(body?: NoInfer<BodyType> | null, init?: HttpResponseInit) {\n    const responseInit = normalizeResponseInit(init)\n    super(body as BodyInit, responseInit)\n    decorateResponse(this, responseInit)\n  }\n\n  static error(): HttpResponse<any> {\n    return super.error() as HttpResponse<any>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text<BodyType extends string>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/plain')\n    }\n\n    // Automatically set the \"Content-Length\" response header\n    // for non-empty text responses. This enforces consistency and\n    // brings mocked responses closer to production.\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        body ? new Blob([body]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json<BodyType extends JsonBodyType>(\n    body?: NoInfer<BodyType> | null | undefined,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/json')\n    }\n\n    /**\n     * @note TypeScript is incorrect here.\n     * Stringifying undefined will return undefined.\n     */\n    const responseText = JSON.stringify(body) as string | undefined\n\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        responseText ? new Blob([responseText]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(responseText as BodyType, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/xml')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/html\"` body.\n   * @example\n   * HttpResponse.html(`<p class=\"author\">Jane Doe</p>`)\n   * HttpResponse.html(`<main id=\"abc-123\">Main text</main>`, { status: 201 })\n   */\n  static html<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/html')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer<BodyType extends ArrayBuffer | SharedArrayBuffer>(\n    body?: BodyType,\n    init?: HttpResponseInit,\n  ): HttpResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/octet-stream')\n    }\n\n    if (body && !responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set('Content-Length', body.byteLength.toString())\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(\n    body?: FormData,\n    init?: HttpResponseInit,\n  ): HttpResponse<FormData> {\n    return new HttpResponse(body, normalizeResponseInit(init))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}