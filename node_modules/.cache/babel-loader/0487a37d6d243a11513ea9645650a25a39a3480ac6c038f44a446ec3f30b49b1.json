{"ast":null,"code":"/**\n * @param url - URL we want to extract a hostname from.\n * @param urlIsValidHostname - hint from caller; true if `url` is already a valid hostname.\n */\nexport default function extractHostname(url, urlIsValidHostname) {\n  let start = 0;\n  let end = url.length;\n  let hasUpper = false;\n  // If url is not already a valid hostname, then try to extract hostname.\n  if (!urlIsValidHostname) {\n    // Special handling of data URLs\n    if (url.startsWith('data:')) {\n      return null;\n    }\n    // Trim leading spaces\n    while (start < url.length && url.charCodeAt(start) <= 32) {\n      start += 1;\n    }\n    // Trim trailing spaces\n    while (end > start + 1 && url.charCodeAt(end - 1) <= 32) {\n      end -= 1;\n    }\n    // Skip scheme.\n    if (url.charCodeAt(start) === 47 /* '/' */ && url.charCodeAt(start + 1) === 47 /* '/' */) {\n      start += 2;\n    } else {\n      const indexOfProtocol = url.indexOf(':/', start);\n      if (indexOfProtocol !== -1) {\n        // Implement fast-path for common protocols. We expect most protocols\n        // should be one of these 4 and thus we will not need to perform the\n        // more expansive validity check most of the time.\n        const protocolSize = indexOfProtocol - start;\n        const c0 = url.charCodeAt(start);\n        const c1 = url.charCodeAt(start + 1);\n        const c2 = url.charCodeAt(start + 2);\n        const c3 = url.charCodeAt(start + 3);\n        const c4 = url.charCodeAt(start + 4);\n        if (protocolSize === 5 && c0 === 104 /* 'h' */ && c1 === 116 /* 't' */ && c2 === 116 /* 't' */ && c3 === 112 /* 'p' */ && c4 === 115 /* 's' */) {\n          // https\n        } else if (protocolSize === 4 && c0 === 104 /* 'h' */ && c1 === 116 /* 't' */ && c2 === 116 /* 't' */ && c3 === 112 /* 'p' */) {\n          // http\n        } else if (protocolSize === 3 && c0 === 119 /* 'w' */ && c1 === 115 /* 's' */ && c2 === 115 /* 's' */) {\n          // wss\n        } else if (protocolSize === 2 && c0 === 119 /* 'w' */ && c1 === 115 /* 's' */) {\n          // ws\n        } else {\n          // Check that scheme is valid\n          for (let i = start; i < indexOfProtocol; i += 1) {\n            const lowerCaseCode = url.charCodeAt(i) | 32;\n            if (!(lowerCaseCode >= 97 && lowerCaseCode <= 122 ||\n            // [a, z]\n            lowerCaseCode >= 48 && lowerCaseCode <= 57 ||\n            // [0, 9]\n            lowerCaseCode === 46 ||\n            // '.'\n            lowerCaseCode === 45 ||\n            // '-'\n            lowerCaseCode === 43 // '+'\n            )) {\n              return null;\n            }\n          }\n        }\n        // Skip 0, 1 or more '/' after ':/'\n        start = indexOfProtocol + 2;\n        while (url.charCodeAt(start) === 47 /* '/' */) {\n          start += 1;\n        }\n      }\n    }\n    // Detect first occurrence of '/', '?' or '#'. We also keep track of the\n    // last occurrence of '@', ']' or ':' to speed-up subsequent parsing of\n    // (respectively), identifier, ipv6 or port.\n    let indexOfIdentifier = -1;\n    let indexOfClosingBracket = -1;\n    let indexOfPort = -1;\n    for (let i = start; i < end; i += 1) {\n      const code = url.charCodeAt(i);\n      if (code === 35 ||\n      // '#'\n      code === 47 ||\n      // '/'\n      code === 63 // '?'\n      ) {\n        end = i;\n        break;\n      } else if (code === 64) {\n        // '@'\n        indexOfIdentifier = i;\n      } else if (code === 93) {\n        // ']'\n        indexOfClosingBracket = i;\n      } else if (code === 58) {\n        // ':'\n        indexOfPort = i;\n      } else if (code >= 65 && code <= 90) {\n        hasUpper = true;\n      }\n    }\n    // Detect identifier: '@'\n    if (indexOfIdentifier !== -1 && indexOfIdentifier > start && indexOfIdentifier < end) {\n      start = indexOfIdentifier + 1;\n    }\n    // Handle ipv6 addresses\n    if (url.charCodeAt(start) === 91 /* '[' */) {\n      if (indexOfClosingBracket !== -1) {\n        return url.slice(start + 1, indexOfClosingBracket).toLowerCase();\n      }\n      return null;\n    } else if (indexOfPort !== -1 && indexOfPort > start && indexOfPort < end) {\n      // Detect port: ':'\n      end = indexOfPort;\n    }\n  }\n  // Trim trailing dots\n  while (end > start + 1 && url.charCodeAt(end - 1) === 46 /* '.' */) {\n    end -= 1;\n  }\n  const hostname = start !== 0 || end !== url.length ? url.slice(start, end) : url;\n  if (hasUpper) {\n    return hostname.toLowerCase();\n  }\n  return hostname;\n}\n//# sourceMappingURL=extract-hostname.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}