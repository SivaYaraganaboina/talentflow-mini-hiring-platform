{"ast":null,"code":"import { webSocketInterceptor } from './webSocketInterceptor.mjs';\nimport { onUnhandledRequest } from '../utils/request/onUnhandledRequest.mjs';\nimport { isHandlerKind } from '../utils/internal/isHandlerKind.mjs';\nfunction handleWebSocketEvent(options) {\n  webSocketInterceptor.on(\"connection\", async connection => {\n    const handlers = options.getHandlers().filter(isHandlerKind(\"EventHandler\"));\n    if (handlers.length > 0) {\n      options?.onMockedConnection(connection);\n      await Promise.all(handlers.map(handler => {\n        return handler.run(connection);\n      }));\n      return;\n    }\n    const request = new Request(connection.client.url, {\n      headers: {\n        upgrade: \"websocket\",\n        connection: \"upgrade\"\n      }\n    });\n    await onUnhandledRequest(request, options.getUnhandledRequestStrategy()).catch(error => {\n      const errorEvent = new Event(\"error\");\n      Object.defineProperty(errorEvent, \"cause\", {\n        enumerable: true,\n        configurable: false,\n        value: error\n      });\n      connection.client.socket.dispatchEvent(errorEvent);\n    });\n    options?.onPassthroughConnection(connection);\n    connection.server.connect();\n  });\n}\nexport { handleWebSocketEvent };\n//# sourceMappingURL=handleWebSocketEvent.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}