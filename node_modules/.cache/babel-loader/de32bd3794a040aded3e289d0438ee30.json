{"ast":null,"code":"import Dexie from 'dexie';\nexport class TalentFlowDB extends Dexie {\n  constructor() {\n    super('TalentFlowDB');\n    this.jobs = void 0;\n    this.candidates = void 0;\n    this.assessments = void 0;\n    this.assessmentSubmissions = void 0;\n    this.version(1).stores({\n      jobs: 'id, title, status, order, createdAt',\n      candidates: 'id, name, email, stage, jobId, appliedAt',\n      assessments: 'id, jobId, title, createdAt',\n      assessmentSubmissions: 'id, jobId, candidateId, submittedAt'\n    });\n  }\n}\nexport const db = new TalentFlowDB();\n\n// Initialize database with seed data\nexport const initializeDB = async () => {\n  try {\n    // Check if data already exists\n    const jobCount = await db.jobs.count();\n    if (jobCount === 0) {\n      // Import seed data dynamically to avoid circular imports\n      const {\n        seedData\n      } = await import('../mocks/seedData');\n      await db.jobs.bulkAdd(seedData.jobs);\n      await db.candidates.bulkAdd(seedData.candidates);\n      await db.assessments.bulkAdd(seedData.assessments);\n      await db.assessmentSubmissions.bulkAdd(seedData.assessmentSubmissions);\n      console.log('Database initialized with seed data');\n    }\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n};","map":{"version":3,"names":["Dexie","TalentFlowDB","constructor","jobs","candidates","assessments","assessmentSubmissions","version","stores","db","initializeDB","jobCount","count","seedData","bulkAdd","console","log","error"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/db/index.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission } from '../types';\r\n\r\nexport class TalentFlowDB extends Dexie {\r\n  jobs: Table<Job>;\r\n  candidates: Table<Candidate>;\r\n  assessments: Table<Assessment>;\r\n  assessmentSubmissions: Table<AssessmentSubmission>;\r\n\r\n  constructor() {\r\n    super('TalentFlowDB');\r\n    this.version(1).stores({\r\n      jobs: 'id, title, status, order, createdAt',\r\n      candidates: 'id, name, email, stage, jobId, appliedAt',\r\n      assessments: 'id, jobId, title, createdAt',\r\n      assessmentSubmissions: 'id, jobId, candidateId, submittedAt'\r\n    });\r\n  }\r\n}\r\n\r\nexport const db = new TalentFlowDB();\r\n\r\n// Initialize database with seed data\r\nexport const initializeDB = async () => {\r\n  try {\r\n    // Check if data already exists\r\n    const jobCount = await db.jobs.count();\r\n    if (jobCount === 0) {\r\n      // Import seed data dynamically to avoid circular imports\r\n      const { seedData } = await import('../mocks/seedData');\r\n      \r\n      await db.jobs.bulkAdd(seedData.jobs);\r\n      await db.candidates.bulkAdd(seedData.candidates);\r\n      await db.assessments.bulkAdd(seedData.assessments);\r\n      await db.assessmentSubmissions.bulkAdd(seedData.assessmentSubmissions);\r\n      \r\n      console.log('Database initialized with seed data');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAiB,OAAO;AAGpC,OAAO,MAAMC,YAAY,SAASD,KAAK,CAAC;EAMtCE,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,cAAc,CAAC;IAAC,KANxBC,IAAI;IAAA,KACJC,UAAU;IAAA,KACVC,WAAW;IAAA,KACXC,qBAAqB;IAInB,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;MACrBL,IAAI,EAAE,qCAAqC;MAC3CC,UAAU,EAAE,0CAA0C;MACtDC,WAAW,EAAE,6BAA6B;MAC1CC,qBAAqB,EAAE;IACzB,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMG,EAAE,GAAG,IAAIR,YAAY,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMF,EAAE,CAACN,IAAI,CAACS,KAAK,CAAC,CAAC;IACtC,IAAID,QAAQ,KAAK,CAAC,EAAE;MAClB;MACA,MAAM;QAAEE;MAAS,CAAC,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC;MAEtD,MAAMJ,EAAE,CAACN,IAAI,CAACW,OAAO,CAACD,QAAQ,CAACV,IAAI,CAAC;MACpC,MAAMM,EAAE,CAACL,UAAU,CAACU,OAAO,CAACD,QAAQ,CAACT,UAAU,CAAC;MAChD,MAAMK,EAAE,CAACJ,WAAW,CAACS,OAAO,CAACD,QAAQ,CAACR,WAAW,CAAC;MAClD,MAAMI,EAAE,CAACH,qBAAqB,CAACQ,OAAO,CAACD,QAAQ,CAACP,qBAAqB,CAAC;MAEtES,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}