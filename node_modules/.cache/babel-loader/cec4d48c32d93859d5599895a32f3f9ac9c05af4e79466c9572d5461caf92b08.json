{"ast":null,"code":"import Dexie from 'dexie';\nimport { mockJobs } from './mockData';\nexport class TalentFlowDatabase extends Dexie {\n  constructor() {\n    super('TalentFlowDatabase');\n    this.jobs = void 0;\n    this.candidates = void 0;\n    this.assessments = void 0;\n    this.submissions = void 0;\n    this.timeline = void 0;\n    this.version(1).stores({\n      jobs: 'id, title, status, order, createdAt',\n      candidates: 'id, name, email, stage, jobId, appliedAt',\n      assessments: 'id, jobId, title, createdAt',\n      submissions: 'id, jobId, candidateId, submittedAt',\n      timeline: 'id, candidateId, stage, timestamp'\n    });\n  }\n}\nexport const db = new TalentFlowDatabase();\n\n// Initialize database with seed data\nexport const initializeDatabase = async () => {\n  const jobCount = await db.jobs.count();\n  if (jobCount === 0) {\n    await seedDatabase();\n  }\n};\nconst seedDatabase = async () => {\n  // Seed Jobs using detailed mockJobs from mockData.ts\n  await db.jobs.bulkAdd(mockJobs);\n\n  // Seed Candidates\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const candidates = Array.from({\n    length: 1000\n  }, (_, i) => {\n    const jobId = jobs[Math.floor(Math.random() * jobs.length)].id;\n    const stage = stages[Math.floor(Math.random() * stages.length)];\n    const appliedAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString();\n    return {\n      id: `candidate-${i + 1}`,\n      name: `Candidate ${i + 1}`,\n      email: `candidate${i + 1}@example.com`,\n      phone: `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,\n      resume: `Resume for Candidate ${i + 1}`,\n      status: 'active',\n      stage,\n      jobId,\n      appliedAt,\n      timeline: [{\n        id: `timeline-${i + 1}-1`,\n        stage: 'applied',\n        timestamp: appliedAt,\n        notes: 'Application submitted'\n      }]\n    };\n  });\n  await db.candidates.bulkAdd(candidates);\n\n  // Seed Assessments\n  const assessments = jobs.slice(0, 3).map((job, i) => ({\n    id: `assessment-${job.id}`,\n    jobId: job.id,\n    title: `${job.title} Assessment`,\n    description: `Technical assessment for ${job.title} position`,\n    sections: [{\n      id: `section-${i + 1}-1`,\n      title: 'Technical Skills',\n      questions: [{\n        id: `q-${i + 1}-1`,\n        type: 'single-choice',\n        title: 'What is your experience with React?',\n        description: 'Select your level of experience',\n        required: true,\n        options: ['Beginner', 'Intermediate', 'Advanced', 'Expert']\n      }, {\n        id: `q-${i + 1}-2`,\n        type: 'multi-choice',\n        title: 'Which technologies have you worked with?',\n        description: 'Select all that apply',\n        required: true,\n        options: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java']\n      }, {\n        id: `q-${i + 1}-3`,\n        type: 'short-text',\n        title: 'Years of experience',\n        description: 'How many years of professional experience do you have?',\n        required: true,\n        validation: {\n          min: 0,\n          max: 50\n        }\n      }, {\n        id: `q-${i + 1}-4`,\n        type: 'long-text',\n        title: 'Describe your most challenging project',\n        description: 'Tell us about a challenging project you worked on',\n        required: true,\n        validation: {\n          maxLength: 1000\n        }\n      }, {\n        id: `q-${i + 1}-5`,\n        type: 'numeric',\n        title: 'Expected salary range (in thousands)',\n        description: 'What is your expected salary range?',\n        required: false,\n        validation: {\n          min: 30,\n          max: 300\n        }\n      }]\n    }, {\n      id: `section-${i + 1}-2`,\n      title: 'Behavioral Questions',\n      questions: [{\n        id: `q-${i + 1}-6`,\n        type: 'single-choice',\n        title: 'Do you prefer working in teams?',\n        description: 'Select your preference',\n        required: true,\n        options: ['Yes', 'No', 'Sometimes']\n      }, {\n        id: `q-${i + 1}-7`,\n        type: 'long-text',\n        title: 'Team collaboration experience',\n        description: 'Describe your experience working in teams',\n        required: true,\n        conditional: {\n          dependsOn: `q-${i + 1}-6`,\n          condition: 'equals',\n          value: 'Yes'\n        },\n        validation: {\n          maxLength: 500\n        }\n      }, {\n        id: `q-${i + 1}-8`,\n        type: 'file-upload',\n        title: 'Portfolio or work samples',\n        description: 'Upload your portfolio or work samples',\n        required: false\n      }]\n    }],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }));\n  await db.assessments.bulkAdd(assessments);\n};","map":{"version":3,"names":["Dexie","mockJobs","TalentFlowDatabase","constructor","jobs","candidates","assessments","submissions","timeline","version","stores","db","initializeDatabase","jobCount","count","seedDatabase","bulkAdd","stages","Array","from","length","_","i","jobId","Math","floor","random","id","stage","appliedAt","Date","now","toISOString","name","email","phone","String","padStart","resume","status","timestamp","notes","slice","map","job","title","description","sections","questions","type","required","options","validation","min","max","maxLength","conditional","dependsOn","condition","value","createdAt","updatedAt"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/database.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission, TimelineEntry } from '../types';\r\nimport { mockJobs } from './mockData';\r\n\r\nexport class TalentFlowDatabase extends Dexie {\r\n  jobs!: Table<Job>;\r\n  candidates!: Table<Candidate>;\r\n  assessments!: Table<Assessment>;\r\n  submissions!: Table<AssessmentSubmission>;\r\n  timeline!: Table<TimelineEntry>;\r\n\r\n  constructor() {\r\n    super('TalentFlowDatabase');\r\n    this.version(1).stores({\r\n      jobs: 'id, title, status, order, createdAt',\r\n      candidates: 'id, name, email, stage, jobId, appliedAt',\r\n      assessments: 'id, jobId, title, createdAt',\r\n      submissions: 'id, jobId, candidateId, submittedAt',\r\n      timeline: 'id, candidateId, stage, timestamp'\r\n    });\r\n  }\r\n}\r\n\r\nexport const db = new TalentFlowDatabase();\r\n\r\n// Initialize database with seed data\r\nexport const initializeDatabase = async () => {\r\n  const jobCount = await db.jobs.count();\r\n  if (jobCount === 0) {\r\n    await seedDatabase();\r\n  }\r\n};\r\n\r\nconst seedDatabase = async () => {\r\n  // Seed Jobs using detailed mockJobs from mockData.ts\r\n  await db.jobs.bulkAdd(mockJobs);\r\n\r\n  // Seed Candidates\r\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  const candidates: Candidate[] = Array.from({ length: 1000 }, (_, i) => {\r\n    const jobId = jobs[Math.floor(Math.random() * jobs.length)].id;\r\n    const stage = stages[Math.floor(Math.random() * stages.length)];\r\n    const appliedAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString();\r\n    \r\n    return {\r\n      id: `candidate-${i + 1}`,\r\n      name: `Candidate ${i + 1}`,\r\n      email: `candidate${i + 1}@example.com`,\r\n      phone: `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,\r\n      resume: `Resume for Candidate ${i + 1}`,\r\n      status: 'active',\r\n      stage,\r\n      jobId,\r\n      appliedAt,\r\n      timeline: [\r\n        {\r\n          id: `timeline-${i + 1}-1`,\r\n          stage: 'applied',\r\n          timestamp: appliedAt,\r\n          notes: 'Application submitted'\r\n        }\r\n      ]\r\n    };\r\n  });\r\n\r\n  await db.candidates.bulkAdd(candidates);\r\n\r\n  // Seed Assessments\r\n  const assessments: Assessment[] = jobs.slice(0, 3).map((job, i) => ({\r\n    id: `assessment-${job.id}`,\r\n    jobId: job.id,\r\n    title: `${job.title} Assessment`,\r\n    description: `Technical assessment for ${job.title} position`,\r\n    sections: [\r\n      {\r\n        id: `section-${i + 1}-1`,\r\n        title: 'Technical Skills',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-1`,\r\n            type: 'single-choice',\r\n            title: 'What is your experience with React?',\r\n            description: 'Select your level of experience',\r\n            required: true,\r\n            options: ['Beginner', 'Intermediate', 'Advanced', 'Expert']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-2`,\r\n            type: 'multi-choice',\r\n            title: 'Which technologies have you worked with?',\r\n            description: 'Select all that apply',\r\n            required: true,\r\n            options: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-3`,\r\n            type: 'short-text',\r\n            title: 'Years of experience',\r\n            description: 'How many years of professional experience do you have?',\r\n            required: true,\r\n            validation: { min: 0, max: 50 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-4`,\r\n            type: 'long-text',\r\n            title: 'Describe your most challenging project',\r\n            description: 'Tell us about a challenging project you worked on',\r\n            required: true,\r\n            validation: { maxLength: 1000 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-5`,\r\n            type: 'numeric',\r\n            title: 'Expected salary range (in thousands)',\r\n            description: 'What is your expected salary range?',\r\n            required: false,\r\n            validation: { min: 30, max: 300 }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: `section-${i + 1}-2`,\r\n        title: 'Behavioral Questions',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-6`,\r\n            type: 'single-choice',\r\n            title: 'Do you prefer working in teams?',\r\n            description: 'Select your preference',\r\n            required: true,\r\n            options: ['Yes', 'No', 'Sometimes']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-7`,\r\n            type: 'long-text',\r\n            title: 'Team collaboration experience',\r\n            description: 'Describe your experience working in teams',\r\n            required: true,\r\n            conditional: {\r\n              dependsOn: `q-${i + 1}-6`,\r\n              condition: 'equals',\r\n              value: 'Yes'\r\n            },\r\n            validation: { maxLength: 500 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-8`,\r\n            type: 'file-upload',\r\n            title: 'Portfolio or work samples',\r\n            description: 'Upload your portfolio or work samples',\r\n            required: false\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }));\r\n\r\n  await db.assessments.bulkAdd(assessments);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}