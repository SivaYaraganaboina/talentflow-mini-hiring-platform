{"ast":null,"code":"import { fastPathLookup } from 'tldts-core';\nimport { exceptions, rules } from './data/trie';\n/**\n * Lookup parts of domain in Trie\n */\nfunction lookupInTrie(parts, trie, index, allowedMask) {\n  let result = null;\n  let node = trie;\n  while (node !== undefined) {\n    // We have a match!\n    if ((node[0] & allowedMask) !== 0) {\n      result = {\n        index: index + 1,\n        isIcann: node[0] === 1 /* RULE_TYPE.ICANN */,\n        isPrivate: node[0] === 2 /* RULE_TYPE.PRIVATE */\n      };\n    }\n    // No more `parts` to look for\n    if (index === -1) {\n      break;\n    }\n    const succ = node[1];\n    node = Object.prototype.hasOwnProperty.call(succ, parts[index]) ? succ[parts[index]] : succ['*'];\n    index -= 1;\n  }\n  return result;\n}\n/**\n * Check if `hostname` has a valid public suffix in `trie`.\n */\nexport default function suffixLookup(hostname, options, out) {\n  var _a;\n  if (fastPathLookup(hostname, options, out)) {\n    return;\n  }\n  const hostnameParts = hostname.split('.');\n  const allowedMask = (options.allowPrivateDomains ? 2 /* RULE_TYPE.PRIVATE */ : 0) | (options.allowIcannDomains ? 1 /* RULE_TYPE.ICANN */ : 0);\n  // Look for exceptions\n  const exceptionMatch = lookupInTrie(hostnameParts, exceptions, hostnameParts.length - 1, allowedMask);\n  if (exceptionMatch !== null) {\n    out.isIcann = exceptionMatch.isIcann;\n    out.isPrivate = exceptionMatch.isPrivate;\n    out.publicSuffix = hostnameParts.slice(exceptionMatch.index + 1).join('.');\n    return;\n  }\n  // Look for a match in rules\n  const rulesMatch = lookupInTrie(hostnameParts, rules, hostnameParts.length - 1, allowedMask);\n  if (rulesMatch !== null) {\n    out.isIcann = rulesMatch.isIcann;\n    out.isPrivate = rulesMatch.isPrivate;\n    out.publicSuffix = hostnameParts.slice(rulesMatch.index).join('.');\n    return;\n  }\n  // No match found...\n  // Prevailing rule is '*' so we consider the top-level domain to be the\n  // public suffix of `hostname` (e.g.: 'example.org' => 'org').\n  out.isIcann = false;\n  out.isPrivate = false;\n  out.publicSuffix = (_a = hostnameParts[hostnameParts.length - 1]) !== null && _a !== void 0 ? _a : null;\n}\n//# sourceMappingURL=suffix-trie.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}