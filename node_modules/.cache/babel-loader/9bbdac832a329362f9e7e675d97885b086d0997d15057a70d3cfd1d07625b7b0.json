{"ast":null,"code":"/**\n * Check if a hostname is an IP. You should be aware that this only works\n * because `hostname` is already garanteed to be a valid hostname!\n */\nfunction isProbablyIpv4(hostname) {\n  // Cannot be shorted than 1.1.1.1\n  if (hostname.length < 7) {\n    return false;\n  }\n  // Cannot be longer than: 255.255.255.255\n  if (hostname.length > 15) {\n    return false;\n  }\n  let numberOfDots = 0;\n  for (let i = 0; i < hostname.length; i += 1) {\n    const code = hostname.charCodeAt(i);\n    if (code === 46 /* '.' */) {\n      numberOfDots += 1;\n    } else if (code < 48 /* '0' */ || code > 57 /* '9' */) {\n      return false;\n    }\n  }\n  return numberOfDots === 3 && hostname.charCodeAt(0) !== 46 /* '.' */ && hostname.charCodeAt(hostname.length - 1) !== 46 /* '.' */;\n}\n/**\n * Similar to isProbablyIpv4.\n */\nfunction isProbablyIpv6(hostname) {\n  if (hostname.length < 3) {\n    return false;\n  }\n  let start = hostname.startsWith('[') ? 1 : 0;\n  let end = hostname.length;\n  if (hostname[end - 1] === ']') {\n    end -= 1;\n  }\n  // We only consider the maximum size of a normal IPV6. Note that this will\n  // fail on so-called \"IPv4 mapped IPv6 addresses\" but this is a corner-case\n  // and a proper validation library should be used for these.\n  if (end - start > 39) {\n    return false;\n  }\n  let hasColon = false;\n  for (; start < end; start += 1) {\n    const code = hostname.charCodeAt(start);\n    if (code === 58 /* ':' */) {\n      hasColon = true;\n    } else if (!(code >= 48 && code <= 57 ||\n    // 0-9\n    code >= 97 && code <= 102 ||\n    // a-f\n    code >= 65 && code <= 90 // A-F\n    )) {\n      return false;\n    }\n  }\n  return hasColon;\n}\n/**\n * Check if `hostname` is *probably* a valid ip addr (either ipv6 or ipv4).\n * This *will not* work on any string. We need `hostname` to be a valid\n * hostname.\n */\nexport default function isIp(hostname) {\n  return isProbablyIpv6(hostname) || isProbablyIpv4(hostname);\n}","map":{"version":3,"names":["isProbablyIpv4","hostname","length","numberOfDots","i","code","charCodeAt","isProbablyIpv6","start","startsWith","end","hasColon","isIp"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\tldts-core\\src\\is-ip.ts"],"sourcesContent":["/**\n * Check if a hostname is an IP. You should be aware that this only works\n * because `hostname` is already garanteed to be a valid hostname!\n */\nfunction isProbablyIpv4(hostname: string): boolean {\n  // Cannot be shorted than 1.1.1.1\n  if (hostname.length < 7) {\n    return false;\n  }\n\n  // Cannot be longer than: 255.255.255.255\n  if (hostname.length > 15) {\n    return false;\n  }\n\n  let numberOfDots = 0;\n\n  for (let i = 0; i < hostname.length; i += 1) {\n    const code = hostname.charCodeAt(i);\n\n    if (code === 46 /* '.' */) {\n      numberOfDots += 1;\n    } else if (code < 48 /* '0' */ || code > 57 /* '9' */) {\n      return false;\n    }\n  }\n\n  return (\n    numberOfDots === 3 &&\n    hostname.charCodeAt(0) !== 46 /* '.' */ &&\n    hostname.charCodeAt(hostname.length - 1) !== 46 /* '.' */\n  );\n}\n\n/**\n * Similar to isProbablyIpv4.\n */\nfunction isProbablyIpv6(hostname: string): boolean {\n  if (hostname.length < 3) {\n    return false;\n  }\n\n  let start = hostname.startsWith('[') ? 1 : 0;\n  let end = hostname.length;\n\n  if (hostname[end - 1] === ']') {\n    end -= 1;\n  }\n\n  // We only consider the maximum size of a normal IPV6. Note that this will\n  // fail on so-called \"IPv4 mapped IPv6 addresses\" but this is a corner-case\n  // and a proper validation library should be used for these.\n  if (end - start > 39) {\n    return false;\n  }\n\n  let hasColon = false;\n\n  for (; start < end; start += 1) {\n    const code = hostname.charCodeAt(start);\n\n    if (code === 58 /* ':' */) {\n      hasColon = true;\n    } else if (\n      !(\n        (\n          (code >= 48 && code <= 57) || // 0-9\n          (code >= 97 && code <= 102) || // a-f\n          (code >= 65 && code <= 90)\n        ) // A-F\n      )\n    ) {\n      return false;\n    }\n  }\n\n  return hasColon;\n}\n\n/**\n * Check if `hostname` is *probably* a valid ip addr (either ipv6 or ipv4).\n * This *will not* work on any string. We need `hostname` to be a valid\n * hostname.\n */\nexport default function isIp(hostname: string): boolean {\n  return isProbablyIpv6(hostname) || isProbablyIpv4(hostname);\n}\n"],"mappings":"AAAA;;;;AAIA,SAASA,cAAcA,CAACC,QAAgB;EACtC;EACA,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,KAAK;EACd;EAEA;EACA,IAAID,QAAQ,CAACC,MAAM,GAAG,EAAE,EAAE;IACxB,OAAO,KAAK;EACd;EAEA,IAAIC,YAAY,GAAG,CAAC;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACC,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;IAC3C,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAU,CAACF,CAAC,CAAC;IAEnC,IAAIC,IAAI,KAAK,EAAE,CAAC,WAAW;MACzBF,YAAY,IAAI,CAAC;IACnB,CAAC,MAAM,IAAIE,IAAI,GAAG,EAAE,CAAC,aAAaA,IAAI,GAAG,EAAE,CAAC,WAAW;MACrD,OAAO,KAAK;IACd;EACF;EAEA,OACEF,YAAY,KAAK,CAAC,IAClBF,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,aAC9BL,QAAQ,CAACK,UAAU,CAACL,QAAQ,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;AAEpD;AAEA;;;AAGA,SAASK,cAAcA,CAACN,QAAgB;EACtC,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,KAAK;EACd;EAEA,IAAIM,KAAK,GAAGP,QAAQ,CAACQ,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;EAC5C,IAAIC,GAAG,GAAGT,QAAQ,CAACC,MAAM;EAEzB,IAAID,QAAQ,CAACS,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IAC7BA,GAAG,IAAI,CAAC;EACV;EAEA;EACA;EACA;EACA,IAAIA,GAAG,GAAGF,KAAK,GAAG,EAAE,EAAE;IACpB,OAAO,KAAK;EACd;EAEA,IAAIG,QAAQ,GAAG,KAAK;EAEpB,OAAOH,KAAK,GAAGE,GAAG,EAAEF,KAAK,IAAI,CAAC,EAAE;IAC9B,MAAMH,IAAI,GAAGJ,QAAQ,CAACK,UAAU,CAACE,KAAK,CAAC;IAEvC,IAAIH,IAAI,KAAK,EAAE,CAAC,WAAW;MACzBM,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IACL,EAEKN,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,EAAE;IAAK;IAC7BA,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,GAAI;IAAI;IAC9BA,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,EAAG,CAC1B;IAAA,CACH,EACD;MACA,OAAO,KAAK;IACd;EACF;EAEA,OAAOM,QAAQ;AACjB;AAEA;;;;;AAKA,eAAc,SAAUC,IAAIA,CAACX,QAAgB;EAC3C,OAAOM,cAAc,CAACN,QAAQ,CAAC,IAAID,cAAc,CAACC,QAAQ,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}