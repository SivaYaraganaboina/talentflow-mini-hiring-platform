{"ast":null,"code":"import { rest } from 'msw';\nimport { seedData } from './seedData';\n\n// Simulate network latency\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Simulate random errors (5-10% error rate)\nconst shouldError = () => Math.random() < 0.08;\nexport const handlers = [\n// Jobs API\nrest.get('/api/jobs', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 1000);\n  const url = new URL(req.url);\n  const search = url.searchParams.get('search') || '';\n  const status = url.searchParams.get('status') || '';\n  const page = parseInt(url.searchParams.get('page') || '1');\n  const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\n  const sort = url.searchParams.get('sort') || 'order';\n  let filteredJobs = seedData.jobs;\n\n  // Apply filters\n  if (search) {\n    filteredJobs = filteredJobs.filter(job => job.title.toLowerCase().includes(search.toLowerCase()) || job.description.toLowerCase().includes(search.toLowerCase()));\n  }\n  if (status) {\n    filteredJobs = filteredJobs.filter(job => job.status === status);\n  }\n\n  // Apply sorting\n  if (sort === 'order') {\n    filteredJobs.sort((a, b) => a.order - b.order);\n  } else if (sort === 'title') {\n    filteredJobs.sort((a, b) => a.title.localeCompare(b.title));\n  } else if (sort === 'createdAt') {\n    filteredJobs.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  // Apply pagination\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedJobs = filteredJobs.slice(startIndex, endIndex);\n  return res(ctx.json({\n    data: paginatedJobs,\n    pagination: {\n      page,\n      pageSize,\n      total: filteredJobs.length,\n      totalPages: Math.ceil(filteredJobs.length / pageSize)\n    }\n  }));\n}), rest.post('/api/jobs', async (req, res, ctx) => {\n  await delay(300 + Math.random() * 900);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const newJob = await req.json();\n  const job = {\n    ...newJob,\n    id: Date.now().toString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    order: seedData.jobs.length + 1\n  };\n  seedData.jobs.push(job);\n  return res(ctx.status(201), ctx.json(job));\n}), rest.patch('/api/jobs/:id', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 800);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const {\n    id\n  } = req.params;\n  const updates = await req.json();\n  const jobIndex = seedData.jobs.findIndex(job => job.id === id);\n  if (jobIndex === -1) {\n    return res(ctx.status(404), ctx.json({\n      error: 'Job not found'\n    }));\n  }\n  seedData.jobs[jobIndex] = {\n    ...seedData.jobs[jobIndex],\n    ...updates,\n    updatedAt: new Date().toISOString()\n  };\n  return res(ctx.json(seedData.jobs[jobIndex]));\n}), rest.patch('/api/jobs/:id/reorder', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 600);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Failed to reorder jobs'\n    }));\n  }\n  const {\n    id\n  } = req.params;\n  const {\n    fromOrder,\n    toOrder\n  } = await req.json();\n  const jobIndex = seedData.jobs.findIndex(job => job.id === id);\n  if (jobIndex === -1) {\n    return res(ctx.status(404), ctx.json({\n      error: 'Job not found'\n    }));\n  }\n\n  // Update order\n  seedData.jobs[jobIndex].order = toOrder;\n  seedData.jobs[jobIndex].updatedAt = new Date().toISOString();\n  return res(ctx.json({\n    success: true\n  }));\n}),\n// Candidates API\nrest.get('/api/candidates', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 1000);\n  const url = new URL(req.url);\n  const search = url.searchParams.get('search') || '';\n  const stage = url.searchParams.get('stage') || '';\n  const page = parseInt(url.searchParams.get('page') || '1');\n  const pageSize = parseInt(url.searchParams.get('pageSize') || '20');\n  let filteredCandidates = seedData.candidates;\n\n  // Apply filters\n  if (search) {\n    filteredCandidates = filteredCandidates.filter(candidate => candidate.name.toLowerCase().includes(search.toLowerCase()) || candidate.email.toLowerCase().includes(search.toLowerCase()));\n  }\n  if (stage) {\n    filteredCandidates = filteredCandidates.filter(candidate => candidate.stage === stage);\n  }\n\n  // Apply pagination\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedCandidates = filteredCandidates.slice(startIndex, endIndex);\n  return res(ctx.json({\n    data: paginatedCandidates,\n    pagination: {\n      page,\n      pageSize,\n      total: filteredCandidates.length,\n      totalPages: Math.ceil(filteredCandidates.length / pageSize)\n    }\n  }));\n}), rest.post('/api/candidates', async (req, res, ctx) => {\n  await delay(300 + Math.random() * 900);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const newCandidate = await req.json();\n  const candidate = {\n    ...newCandidate,\n    id: Date.now().toString(),\n    appliedAt: new Date().toISOString(),\n    timeline: [{\n      id: Date.now().toString(),\n      stage: newCandidate.stage,\n      timestamp: new Date().toISOString(),\n      notes: 'Initial application'\n    }]\n  };\n  seedData.candidates.push(candidate);\n  return res(ctx.status(201), ctx.json(candidate));\n}), rest.patch('/api/candidates/:id', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 800);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const {\n    id\n  } = req.params;\n  const updates = await req.json();\n  const candidateIndex = seedData.candidates.findIndex(candidate => candidate.id === id);\n  if (candidateIndex === -1) {\n    return res(ctx.status(404), ctx.json({\n      error: 'Candidate not found'\n    }));\n  }\n  const oldStage = seedData.candidates[candidateIndex].stage;\n  const newStage = updates.stage;\n  if (oldStage !== newStage) {\n    // Add timeline entry\n    seedData.candidates[candidateIndex].timeline.push({\n      id: Date.now().toString(),\n      stage: newStage,\n      timestamp: new Date().toISOString(),\n      notes: updates.notes || `Moved from ${oldStage} to ${newStage}`\n    });\n  }\n  seedData.candidates[candidateIndex] = {\n    ...seedData.candidates[candidateIndex],\n    ...updates\n  };\n  return res(ctx.json(seedData.candidates[candidateIndex]));\n}), rest.get('/api/candidates/:id/timeline', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 600);\n  const {\n    id\n  } = req.params;\n  const candidate = seedData.candidates.find(c => c.id === id);\n  if (!candidate) {\n    return res(ctx.status(404), ctx.json({\n      error: 'Candidate not found'\n    }));\n  }\n  return res(ctx.json(candidate.timeline || []));\n}),\n// Assessments API\nrest.get('/api/assessments/:jobId', async (req, res, ctx) => {\n  await delay(200 + Math.random() * 800);\n  const {\n    jobId\n  } = req.params;\n  const assessment = seedData.assessments.find(a => a.jobId === jobId);\n  if (!assessment) {\n    return res(ctx.status(404), ctx.json({\n      error: 'Assessment not found'\n    }));\n  }\n  return res(ctx.json(assessment));\n}), rest.put('/api/assessments/:jobId', async (req, res, ctx) => {\n  await delay(300 + Math.random() * 900);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const {\n    jobId\n  } = req.params;\n  const assessment = await req.json();\n  const existingIndex = seedData.assessments.findIndex(a => a.jobId === jobId);\n  if (existingIndex >= 0) {\n    seedData.assessments[existingIndex] = assessment;\n  } else {\n    seedData.assessments.push(assessment);\n  }\n  return res(ctx.json(assessment));\n}), rest.post('/api/assessments/:jobId/submit', async (req, res, ctx) => {\n  await delay(300 + Math.random() * 900);\n  if (shouldError()) {\n    return res(ctx.status(500), ctx.json({\n      error: 'Internal server error'\n    }));\n  }\n  const {\n    jobId\n  } = req.params;\n  const response = await req.json();\n  const submission = {\n    id: Date.now().toString(),\n    jobId,\n    candidateId: response.candidateId,\n    responses: response.responses,\n    submittedAt: new Date().toISOString()\n  };\n  seedData.assessmentSubmissions.push(submission);\n  return res(ctx.status(201), ctx.json(submission));\n})];","map":{"version":3,"names":["rest","seedData","delay","ms","Promise","resolve","setTimeout","shouldError","Math","random","handlers","get","req","res","ctx","url","URL","search","searchParams","status","page","parseInt","pageSize","sort","filteredJobs","jobs","filter","job","title","toLowerCase","includes","description","a","b","order","localeCompare","Date","createdAt","getTime","startIndex","endIndex","paginatedJobs","slice","json","data","pagination","total","length","totalPages","ceil","post","error","newJob","id","now","toString","toISOString","updatedAt","push","patch","params","updates","jobIndex","findIndex","fromOrder","toOrder","success","stage","filteredCandidates","candidates","candidate","name","email","paginatedCandidates","newCandidate","appliedAt","timeline","timestamp","notes","candidateIndex","oldStage","newStage","find","c","jobId","assessment","assessments","put","existingIndex","response","submission","candidateId","responses","submittedAt","assessmentSubmissions"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/mocks/handlers.ts"],"sourcesContent":["import { rest } from 'msw';\r\nimport { seedData } from './seedData';\r\n\r\n// Simulate network latency\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Simulate random errors (5-10% error rate)\r\nconst shouldError = () => Math.random() < 0.08;\r\n\r\nexport const handlers = [\r\n  // Jobs API\r\n  rest.get('/api/jobs', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 1000);\r\n    \r\n    const url = new URL(req.url);\r\n    const search = url.searchParams.get('search') || '';\r\n    const status = url.searchParams.get('status') || '';\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\r\n    const sort = url.searchParams.get('sort') || 'order';\r\n\r\n    let filteredJobs = seedData.jobs;\r\n\r\n    // Apply filters\r\n    if (search) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.title.toLowerCase().includes(search.toLowerCase()) ||\r\n        job.description.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (status) {\r\n      filteredJobs = filteredJobs.filter(job => job.status === status);\r\n    }\r\n\r\n    // Apply sorting\r\n    if (sort === 'order') {\r\n      filteredJobs.sort((a, b) => a.order - b.order);\r\n    } else if (sort === 'title') {\r\n      filteredJobs.sort((a, b) => a.title.localeCompare(b.title));\r\n    } else if (sort === 'createdAt') {\r\n      filteredJobs.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\r\n    }\r\n\r\n    // Apply pagination\r\n    const startIndex = (page - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    const paginatedJobs = filteredJobs.slice(startIndex, endIndex);\r\n\r\n    return res(\r\n      ctx.json({\r\n        data: paginatedJobs,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total: filteredJobs.length,\r\n          totalPages: Math.ceil(filteredJobs.length / pageSize)\r\n        }\r\n      })\r\n    );\r\n  }),\r\n\r\n  rest.post('/api/jobs', async (req, res, ctx) => {\r\n    await delay(300 + Math.random() * 900);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const newJob = await req.json();\r\n    const job = {\r\n      ...newJob,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      order: seedData.jobs.length + 1\r\n    };\r\n\r\n    seedData.jobs.push(job);\r\n    return res(ctx.status(201), ctx.json(job));\r\n  }),\r\n\r\n  rest.patch('/api/jobs/:id', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 800);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const { id } = req.params;\r\n    const updates = await req.json();\r\n    const jobIndex = seedData.jobs.findIndex(job => job.id === id);\r\n\r\n    if (jobIndex === -1) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Job not found' }));\r\n    }\r\n\r\n    seedData.jobs[jobIndex] = {\r\n      ...seedData.jobs[jobIndex],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    return res(ctx.json(seedData.jobs[jobIndex]));\r\n  }),\r\n\r\n  rest.patch('/api/jobs/:id/reorder', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 600);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Failed to reorder jobs' }));\r\n    }\r\n\r\n    const { id } = req.params;\r\n    const { fromOrder, toOrder } = await req.json();\r\n\r\n    const jobIndex = seedData.jobs.findIndex(job => job.id === id);\r\n    if (jobIndex === -1) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Job not found' }));\r\n    }\r\n\r\n    // Update order\r\n    seedData.jobs[jobIndex].order = toOrder;\r\n    seedData.jobs[jobIndex].updatedAt = new Date().toISOString();\r\n\r\n    return res(ctx.json({ success: true }));\r\n  }),\r\n\r\n  // Candidates API\r\n  rest.get('/api/candidates', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 1000);\r\n    \r\n    const url = new URL(req.url);\r\n    const search = url.searchParams.get('search') || '';\r\n    const stage = url.searchParams.get('stage') || '';\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '20');\r\n\r\n    let filteredCandidates = seedData.candidates;\r\n\r\n    // Apply filters\r\n    if (search) {\r\n      filteredCandidates = filteredCandidates.filter(candidate => \r\n        candidate.name.toLowerCase().includes(search.toLowerCase()) ||\r\n        candidate.email.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (stage) {\r\n      filteredCandidates = filteredCandidates.filter(candidate => candidate.stage === stage);\r\n    }\r\n\r\n    // Apply pagination\r\n    const startIndex = (page - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    const paginatedCandidates = filteredCandidates.slice(startIndex, endIndex);\r\n\r\n    return res(\r\n      ctx.json({\r\n        data: paginatedCandidates,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total: filteredCandidates.length,\r\n          totalPages: Math.ceil(filteredCandidates.length / pageSize)\r\n        }\r\n      })\r\n    );\r\n  }),\r\n\r\n  rest.post('/api/candidates', async (req, res, ctx) => {\r\n    await delay(300 + Math.random() * 900);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const newCandidate = await req.json();\r\n    const candidate = {\r\n      ...newCandidate,\r\n      id: Date.now().toString(),\r\n      appliedAt: new Date().toISOString(),\r\n      timeline: [{\r\n        id: Date.now().toString(),\r\n        stage: newCandidate.stage,\r\n        timestamp: new Date().toISOString(),\r\n        notes: 'Initial application'\r\n      }]\r\n    };\r\n\r\n    seedData.candidates.push(candidate);\r\n    return res(ctx.status(201), ctx.json(candidate));\r\n  }),\r\n\r\n  rest.patch('/api/candidates/:id', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 800);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const { id } = req.params;\r\n    const updates = await req.json();\r\n    const candidateIndex = seedData.candidates.findIndex(candidate => candidate.id === id);\r\n\r\n    if (candidateIndex === -1) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Candidate not found' }));\r\n    }\r\n\r\n    const oldStage = seedData.candidates[candidateIndex].stage;\r\n    const newStage = updates.stage;\r\n\r\n    if (oldStage !== newStage) {\r\n      // Add timeline entry\r\n      seedData.candidates[candidateIndex].timeline.push({\r\n        id: Date.now().toString(),\r\n        stage: newStage,\r\n        timestamp: new Date().toISOString(),\r\n        notes: updates.notes || `Moved from ${oldStage} to ${newStage}`\r\n      });\r\n    }\r\n\r\n    seedData.candidates[candidateIndex] = {\r\n      ...seedData.candidates[candidateIndex],\r\n      ...updates\r\n    };\r\n\r\n    return res(ctx.json(seedData.candidates[candidateIndex]));\r\n  }),\r\n\r\n  rest.get('/api/candidates/:id/timeline', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 600);\r\n    \r\n    const { id } = req.params;\r\n    const candidate = seedData.candidates.find(c => c.id === id);\r\n\r\n    if (!candidate) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Candidate not found' }));\r\n    }\r\n\r\n    return res(ctx.json(candidate.timeline || []));\r\n  }),\r\n\r\n  // Assessments API\r\n  rest.get('/api/assessments/:jobId', async (req, res, ctx) => {\r\n    await delay(200 + Math.random() * 800);\r\n    \r\n    const { jobId } = req.params;\r\n    const assessment = seedData.assessments.find(a => a.jobId === jobId);\r\n\r\n    if (!assessment) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Assessment not found' }));\r\n    }\r\n\r\n    return res(ctx.json(assessment));\r\n  }),\r\n\r\n  rest.put('/api/assessments/:jobId', async (req, res, ctx) => {\r\n    await delay(300 + Math.random() * 900);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const { jobId } = req.params;\r\n    const assessment = await req.json();\r\n\r\n    const existingIndex = seedData.assessments.findIndex(a => a.jobId === jobId);\r\n    \r\n    if (existingIndex >= 0) {\r\n      seedData.assessments[existingIndex] = assessment;\r\n    } else {\r\n      seedData.assessments.push(assessment);\r\n    }\r\n\r\n    return res(ctx.json(assessment));\r\n  }),\r\n\r\n  rest.post('/api/assessments/:jobId/submit', async (req, res, ctx) => {\r\n    await delay(300 + Math.random() * 900);\r\n    \r\n    if (shouldError()) {\r\n      return res(ctx.status(500), ctx.json({ error: 'Internal server error' }));\r\n    }\r\n\r\n    const { jobId } = req.params;\r\n    const response = await req.json();\r\n\r\n    const submission = {\r\n      id: Date.now().toString(),\r\n      jobId,\r\n      candidateId: response.candidateId,\r\n      responses: response.responses,\r\n      submittedAt: new Date().toISOString()\r\n    };\r\n\r\n    seedData.assessmentSubmissions.push(submission);\r\n    return res(ctx.status(201), ctx.json(submission));\r\n  }),\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}