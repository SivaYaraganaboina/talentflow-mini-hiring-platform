{"ast":null,"code":"import { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { toPublicUrl } from '../utils/request/toPublicUrl.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport { RequestHandler } from './RequestHandler.mjs';\nvar HttpMethods = /* @__PURE__ */(HttpMethods2 => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\nclass HttpHandler extends RequestHandler {\n  constructor(method, predicate, resolver, options) {\n    const displayPath = typeof predicate === \"function\" ? \"[custom predicate]\" : predicate;\n    super({\n      info: {\n        header: \"\".concat(method).concat(displayPath ? \" \".concat(displayPath) : \"\"),\n        path: predicate,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n    if (!path || path instanceof RegExp || typeof path === \"function\") {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(\"Found a redundant usage of query parameters in the request handler URL for \\\"\".concat(method, \" \").concat(path, \"\\\". Please match against a path instead and access query parameters using \\\"new URL(request.url).searchParams\\\" instead. Learn more: https://mswjs.io/docs/http/intercepting-requests#querysearch-parameters\"));\n  }\n  async parse(args) {\n    var _args$resolutionConte;\n    const url = new URL(args.request.url);\n    const cookies = getAllRequestCookies(args.request);\n    if (typeof this.info.path === \"function\") {\n      const customPredicateResult = await this.info.path({\n        request: args.request,\n        cookies\n      });\n      const match2 = typeof customPredicateResult === \"boolean\" ? {\n        matches: customPredicateResult,\n        params: {}\n      } : customPredicateResult;\n      return {\n        match: match2,\n        cookies\n      };\n    }\n    const match = this.info.path ? matchRequestUrl(url, this.info.path, (_args$resolutionConte = args.resolutionContext) === null || _args$resolutionConte === void 0 ? void 0 : _args$resolutionConte.baseUrl) : {\n      matches: false,\n      params: {}\n    };\n    return {\n      match,\n      cookies\n    };\n  }\n  async predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n  extendResolverArgs(args) {\n    var _args$parsedResult$ma;\n    return {\n      params: ((_args$parsedResult$ma = args.parsedResult.match) === null || _args$parsedResult$ma === void 0 ? void 0 : _args$parsedResult$ma.params) || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n  async log(args) {\n    const publicUrl = toPublicUrl(args.request.url);\n    const loggedRequest = await serializeRequest(args.request);\n    const loggedResponse = await serializeResponse(args.response);\n    const statusColor = getStatusCodeColor(loggedResponse.status);\n    console.groupCollapsed(devUtils.formatMessage(\"\".concat(getTimestamp(), \" \").concat(args.request.method, \" \").concat(publicUrl, \" (%c\").concat(loggedResponse.status, \" \").concat(loggedResponse.statusText, \"%c)\")), \"color:\".concat(statusColor), \"color:inherit\");\n    console.log(\"Request\", loggedRequest);\n    console.log(\"Handler:\", this);\n    console.log(\"Response\", loggedResponse);\n    console.groupEnd();\n  }\n}\nexport { HttpHandler, HttpMethods };","map":{"version":3,"names":["devUtils","isStringEqual","getStatusCodeColor","getTimestamp","serializeRequest","serializeResponse","matchRequestUrl","toPublicUrl","getAllRequestCookies","cleanUrl","getSearchParams","RequestHandler","HttpMethods","HttpMethods2","HttpHandler","constructor","method","predicate","resolver","options","displayPath","info","header","concat","path","checkRedundantQueryParameters","RegExp","url","searchParams","queryParams","forEach","_","paramName","push","warn","parse","args","_args$resolutionConte","URL","request","cookies","customPredicateResult","match2","matches","params","match","resolutionContext","baseUrl","hasMatchingMethod","matchMethod","hasMatchingUrl","parsedResult","actualMethod","test","extendResolverArgs","_args$parsedResult$ma","log","publicUrl","loggedRequest","loggedResponse","response","statusColor","status","console","groupCollapsed","formatMessage","statusText","groupEnd"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\msw\\src\\core\\handlers\\HttpHandler.ts"],"sourcesContent":["import { ResponseResolutionContext } from '../utils/executeHandlers'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport {\n  matchRequestUrl,\n  Match,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype HttpHandlerMethod = string | RegExp\n\nexport interface HttpHandlerInfo extends RequestHandlerDefaultInfo {\n  method: HttpHandlerMethod\n  path: HttpRequestPredicate<PathParams>\n}\n\nexport enum HttpMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type HttpRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n}\n\nexport type HttpRequestResolverExtras<Params extends PathParams> = {\n  params: Params\n  cookies: Record<string, string>\n}\n\nexport type HttpCustomPredicate<Params extends PathParams> = (args: {\n  request: Request\n  cookies: Record<string, string>\n}) =>\n  | HttpCustomPredicateResult<Params>\n  | Promise<HttpCustomPredicateResult<Params>>\n\nexport type HttpCustomPredicateResult<Params extends PathParams> =\n  | boolean\n  | {\n      matches: boolean\n      params: Params\n    }\n\nexport type HttpRequestPredicate<Params extends PathParams> =\n  | Path\n  | HttpCustomPredicate<Params>\n\n/**\n * Request handler for HTTP requests.\n * Provides request matching based on method and URL.\n */\nexport class HttpHandler extends RequestHandler<\n  HttpHandlerInfo,\n  HttpRequestParsedResult,\n  HttpRequestResolverExtras<any>\n> {\n  constructor(\n    method: HttpHandlerMethod,\n    predicate: HttpRequestPredicate<PathParams>,\n    resolver: ResponseResolver<HttpRequestResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    const displayPath =\n      typeof predicate === 'function' ? '[custom predicate]' : predicate\n\n    super({\n      info: {\n        header: `${method}${displayPath ? ` ${displayPath}` : ''}`,\n        path: predicate,\n        method,\n      },\n      resolver,\n      options,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (!path || path instanceof RegExp || typeof path === 'function') {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    const searchParams = getSearchParams(path)\n    const queryParams: Array<string> = []\n\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName)\n    })\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/http/intercepting-requests#querysearch-parameters`,\n    )\n  }\n\n  async parse(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const url = new URL(args.request.url)\n    const cookies = getAllRequestCookies(args.request)\n\n    /**\n     * Handle custom predicate functions.\n     * @note Invoke this during parsing so the user can parse the path parameters\n     * manually. Otherwise, `params` is always an empty object, which isn't nice.\n     */\n    if (typeof this.info.path === 'function') {\n      const customPredicateResult = await this.info.path({\n        request: args.request,\n        cookies,\n      })\n\n      const match =\n        typeof customPredicateResult === 'boolean'\n          ? {\n              matches: customPredicateResult,\n              params: {},\n            }\n          : customPredicateResult\n\n      return {\n        match,\n        cookies,\n      }\n    }\n\n    const match = this.info.path\n      ? matchRequestUrl(url, this.info.path, args.resolutionContext?.baseUrl)\n      : { matches: false, params: {} }\n\n    return {\n      match,\n      cookies,\n    }\n  }\n\n  async predicate(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const hasMatchingMethod = this.matchMethod(args.request.method)\n    const hasMatchingUrl = args.parsedResult.match.matches\n    return hasMatchingMethod && hasMatchingUrl\n  }\n\n  private matchMethod(actualMethod: string): boolean {\n    return this.info.method instanceof RegExp\n      ? this.info.method.test(actualMethod)\n      : isStringEqual(this.info.method, actualMethod)\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n  }) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: { request: Request; response: Response }) {\n    const publicUrl = toPublicUrl(args.request.url)\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${args.request.method} ${publicUrl} (%c${\n          loggedResponse.status\n        } ${loggedResponse.statusText}%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    // eslint-disable-next-line no-console\n    console.log('Request', loggedRequest)\n    // eslint-disable-next-line no-console\n    console.log('Handler:', this)\n    // eslint-disable-next-line no-console\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}