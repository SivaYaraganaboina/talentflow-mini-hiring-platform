{"ast":null,"code":"import { isNodeProcess } from \"is-node-process\";\nimport { invariant } from \"outvariant\";\nimport { Cookie, CookieJar, MemoryCookieStore } from \"tough-cookie\";\nimport { jsonParse } from './internal/jsonParse.mjs';\nclass CookieStore {\n  #storageKey = \"__msw-cookie-store__\";\n  #jar;\n  #memoryStore;\n  constructor() {\n    if (!isNodeProcess()) {\n      invariant(typeof localStorage !== \"undefined\", \"Failed to create a CookieStore: `localStorage` is not available in this environment. This is likely an issue with your environment, which has been detected as browser (or browser-like) environment and must implement global browser APIs correctly.\");\n    }\n    this.#memoryStore = new MemoryCookieStore();\n    this.#memoryStore.idx = this.getCookieStoreIndex();\n    this.#jar = new CookieJar(this.#memoryStore);\n  }\n  getCookies(url) {\n    return this.#jar.getCookiesSync(url);\n  }\n  async setCookie(cookieName, url) {\n    await this.#jar.setCookie(cookieName, url);\n    this.persist();\n  }\n  getCookieStoreIndex() {\n    if (typeof localStorage === \"undefined\") {\n      return {};\n    }\n    const cookiesString = localStorage.getItem(this.#storageKey);\n    if (cookiesString == null) {\n      return {};\n    }\n    const rawCookies = jsonParse(cookiesString);\n    if (rawCookies == null) {\n      return {};\n    }\n    const cookies = {};\n    for (const rawCookie of rawCookies) {\n      const cookie = Cookie.fromJSON(rawCookie);\n      if (cookie != null && cookie.domain != null && cookie.path != null) {\n        cookies[cookie.domain] ||= {};\n        cookies[cookie.domain][cookie.path] ||= {};\n        cookies[cookie.domain][cookie.path][cookie.key] = cookie;\n      }\n    }\n    return cookies;\n  }\n  persist() {\n    if (typeof localStorage === \"undefined\") {\n      return;\n    }\n    const data = [];\n    const {\n      idx\n    } = this.#memoryStore;\n    for (const domain in idx) {\n      for (const path in idx[domain]) {\n        for (const key in idx[domain][path]) {\n          data.push(idx[domain][path][key].toJSON());\n        }\n      }\n    }\n    localStorage.setItem(this.#storageKey, JSON.stringify(data));\n  }\n}\nconst cookieStore = new CookieStore();\nexport { cookieStore };","map":{"version":3,"names":["isNodeProcess","invariant","Cookie","CookieJar","MemoryCookieStore","jsonParse","CookieStore","storageKey","jar","memoryStore","constructor","localStorage","idx","getCookieStoreIndex","getCookies","url","getCookiesSync","setCookie","cookieName","persist","cookiesString","getItem","rawCookies","cookies","rawCookie","cookie","fromJSON","domain","path","key","data","push","toJSON","setItem","JSON","stringify","cookieStore"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\msw\\src\\core\\utils\\cookieStore.ts"],"sourcesContent":["import { isNodeProcess } from 'is-node-process'\nimport { invariant } from 'outvariant'\nimport {\n  Cookie,\n  CookieJar,\n  MemoryCookieStore,\n  type MemoryCookieStoreIndex,\n} from 'tough-cookie'\nimport { jsonParse } from './internal/jsonParse'\n\nclass CookieStore {\n  #storageKey = '__msw-cookie-store__'\n  #jar: CookieJar\n  #memoryStore: MemoryCookieStore\n\n  constructor() {\n    if (!isNodeProcess()) {\n      invariant(\n        typeof localStorage !== 'undefined',\n        'Failed to create a CookieStore: `localStorage` is not available in this environment. This is likely an issue with your environment, which has been detected as browser (or browser-like) environment and must implement global browser APIs correctly.',\n      )\n    }\n\n    this.#memoryStore = new MemoryCookieStore()\n    this.#memoryStore.idx = this.getCookieStoreIndex()\n    this.#jar = new CookieJar(this.#memoryStore)\n  }\n\n  public getCookies(url: string): Array<Cookie> {\n    return this.#jar.getCookiesSync(url)\n  }\n\n  public async setCookie(cookieName: string, url: string): Promise<void> {\n    await this.#jar.setCookie(cookieName, url)\n    this.persist()\n  }\n\n  private getCookieStoreIndex(): MemoryCookieStoreIndex {\n    if (typeof localStorage === 'undefined') {\n      return {}\n    }\n\n    const cookiesString = localStorage.getItem(this.#storageKey)\n    if (cookiesString == null) {\n      return {}\n    }\n\n    const rawCookies = jsonParse<Array<Record<string, unknown>>>(cookiesString)\n    if (rawCookies == null) {\n      return {}\n    }\n\n    const cookies: MemoryCookieStoreIndex = {}\n\n    for (const rawCookie of rawCookies) {\n      const cookie = Cookie.fromJSON(rawCookie)\n\n      if (cookie != null && cookie.domain != null && cookie.path != null) {\n        cookies[cookie.domain] ||= {}\n        cookies[cookie.domain][cookie.path] ||= {}\n        cookies[cookie.domain][cookie.path][cookie.key] = cookie\n      }\n    }\n\n    return cookies\n  }\n\n  private persist(): void {\n    if (typeof localStorage === 'undefined') {\n      return\n    }\n\n    const data = []\n    const { idx } = this.#memoryStore\n\n    for (const domain in idx) {\n      for (const path in idx[domain]) {\n        for (const key in idx[domain][path]) {\n          data.push(idx[domain][path][key].toJSON())\n        }\n      }\n    }\n\n    localStorage.setItem(this.#storageKey, JSON.stringify(data))\n  }\n}\n\nexport const cookieStore = new CookieStore()\n"],"mappings":"AAAA,SAASA,aAAA,QAAqB;AAC9B,SAASC,SAAA,QAAiB;AAC1B,SACEC,MAAA,EACAC,SAAA,EACAC,iBAAA,QAEK;AACP,SAASC,SAAA,QAAiB;AAE1B,MAAMC,WAAA,CAAY;EAChB,CAAAC,UAAA,GAAc;EACd,CAAAC,GAAA;EACA,CAAAC,WAAA;EAEAC,YAAA,EAAc;IACZ,IAAI,CAACV,aAAA,CAAc,GAAG;MACpBC,SAAA,CACE,OAAOU,YAAA,KAAiB,aACxB,wPACF;IACF;IAEA,KAAK,CAAAF,WAAA,GAAe,IAAIL,iBAAA,CAAkB;IAC1C,KAAK,CAAAK,WAAA,CAAaG,GAAA,GAAM,KAAKC,mBAAA,CAAoB;IACjD,KAAK,CAAAL,GAAA,GAAO,IAAIL,SAAA,CAAU,KAAK,CAAAM,WAAY;EAC7C;EAEOK,WAAWC,GAAA,EAA4B;IAC5C,OAAO,KAAK,CAAAP,GAAA,CAAKQ,cAAA,CAAeD,GAAG;EACrC;EAEA,MAAaE,UAAUC,UAAA,EAAoBH,GAAA,EAA4B;IACrE,MAAM,KAAK,CAAAP,GAAA,CAAKS,SAAA,CAAUC,UAAA,EAAYH,GAAG;IACzC,KAAKI,OAAA,CAAQ;EACf;EAEQN,oBAAA,EAA8C;IACpD,IAAI,OAAOF,YAAA,KAAiB,aAAa;MACvC,OAAO,CAAC;IACV;IAEA,MAAMS,aAAA,GAAgBT,YAAA,CAAaU,OAAA,CAAQ,KAAK,CAAAd,UAAW;IAC3D,IAAIa,aAAA,IAAiB,MAAM;MACzB,OAAO,CAAC;IACV;IAEA,MAAME,UAAA,GAAajB,SAAA,CAA0Ce,aAAa;IAC1E,IAAIE,UAAA,IAAc,MAAM;MACtB,OAAO,CAAC;IACV;IAEA,MAAMC,OAAA,GAAkC,CAAC;IAEzC,WAAWC,SAAA,IAAaF,UAAA,EAAY;MAClC,MAAMG,MAAA,GAASvB,MAAA,CAAOwB,QAAA,CAASF,SAAS;MAExC,IAAIC,MAAA,IAAU,QAAQA,MAAA,CAAOE,MAAA,IAAU,QAAQF,MAAA,CAAOG,IAAA,IAAQ,MAAM;QAClEL,OAAA,CAAQE,MAAA,CAAOE,MAAM,MAAM,CAAC;QAC5BJ,OAAA,CAAQE,MAAA,CAAOE,MAAM,EAAEF,MAAA,CAAOG,IAAI,MAAM,CAAC;QACzCL,OAAA,CAAQE,MAAA,CAAOE,MAAM,EAAEF,MAAA,CAAOG,IAAI,EAAEH,MAAA,CAAOI,GAAG,IAAIJ,MAAA;MACpD;IACF;IAEA,OAAOF,OAAA;EACT;EAEQJ,QAAA,EAAgB;IACtB,IAAI,OAAOR,YAAA,KAAiB,aAAa;MACvC;IACF;IAEA,MAAMmB,IAAA,GAAO,EAAC;IACd,MAAM;MAAElB;IAAI,IAAI,KAAK,CAAAH,WAAA;IAErB,WAAWkB,MAAA,IAAUf,GAAA,EAAK;MACxB,WAAWgB,IAAA,IAAQhB,GAAA,CAAIe,MAAM,GAAG;QAC9B,WAAWE,GAAA,IAAOjB,GAAA,CAAIe,MAAM,EAAEC,IAAI,GAAG;UACnCE,IAAA,CAAKC,IAAA,CAAKnB,GAAA,CAAIe,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAEG,MAAA,CAAO,CAAC;QAC3C;MACF;IACF;IAEArB,YAAA,CAAasB,OAAA,CAAQ,KAAK,CAAA1B,UAAA,EAAa2B,IAAA,CAAKC,SAAA,CAAUL,IAAI,CAAC;EAC7D;AACF;AAEO,MAAMM,WAAA,GAAc,IAAI9B,WAAA,CAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}