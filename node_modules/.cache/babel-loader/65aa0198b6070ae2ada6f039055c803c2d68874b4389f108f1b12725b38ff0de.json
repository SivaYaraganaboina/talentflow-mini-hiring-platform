{"ast":null,"code":"import Dexie from 'dexie';\nexport class UserDatabase extends Dexie {\n  constructor() {\n    super('TalentFlowUsers');\n    this.users = void 0;\n    this.version(1).stores({\n      users: '++id, email, name, role, createdAt'\n    });\n  }\n}\nexport const userDb = new UserDatabase();\n\n// Initialize with default users\nexport const initializeUserDatabase = async () => {\n  try {\n    const userCount = await userDb.users.count();\n    if (userCount === 0) {\n      // Add default HR user\n      await userDb.users.add({\n        email: 'hr@talentflow.com',\n        name: 'HR Manager',\n        password: 'password123',\n        role: 'HR',\n        createdAt: new Date().toISOString()\n      });\n\n      // Add default candidate user\n      await userDb.users.add({\n        email: 'candidate@talentflow.com',\n        name: 'John Candidate',\n        password: 'password123',\n        role: 'Candidate',\n        createdAt: new Date().toISOString()\n      });\n      console.log('Default users created:');\n      console.log('HR: hr@talentflow.com / password123');\n      console.log('Candidate: candidate@talentflow.com / password123');\n    }\n  } catch (error) {\n    console.error('Error initializing user database:', error);\n  }\n};\nexport const registerUser = async userData => {\n  try {\n    // Check if user already exists\n    const existingUser = await userDb.users.where('email').equals(userData.email).first();\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Add new user\n    const userId = await userDb.users.add({\n      ...userData,\n      createdAt: new Date().toISOString()\n    });\n    return {\n      success: true,\n      userId\n    };\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getDemoCredentials = () => {\n  return {\n    hr: {\n      email: 'hr@talentflow.com',\n      password: 'password123',\n      name: 'HR Manager'\n    },\n    candidate: {\n      email: 'candidate@talentflow.com',\n      password: 'password123',\n      name: 'John Candidate'\n    }\n  };\n};\nexport const loginUser = async (email, password) => {\n  try {\n    const user = await userDb.users.where('email').equals(email).first();\n    if (!user) {\n      throw new Error('User not found');\n    }\n    if (user.password !== password) {\n      throw new Error('Invalid password');\n    }\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    };\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["Dexie","UserDatabase","constructor","users","version","stores","userDb","initializeUserDatabase","userCount","count","add","email","name","password","role","createdAt","Date","toISOString","console","log","error","registerUser","userData","existingUser","where","equals","first","Error","userId","success","getDemoCredentials","hr","candidate","loginUser","user","id"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/userDatabase.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\n\nexport interface User {\n  id?: number;\n  email: string;\n  name: string;\n  password: string;\n  role: 'HR' | 'Candidate';\n  createdAt: string;\n}\n\nexport class UserDatabase extends Dexie {\n  users!: Table<User>;\n\n  constructor() {\n    super('TalentFlowUsers');\n    this.version(1).stores({\n      users: '++id, email, name, role, createdAt'\n    });\n  }\n}\n\nexport const userDb = new UserDatabase();\n\n// Initialize with default users\nexport const initializeUserDatabase = async () => {\n  try {\n    const userCount = await userDb.users.count();\n    \n    if (userCount === 0) {\n      // Add default HR user\n      await userDb.users.add({\n        email: 'hr@talentflow.com',\n        name: 'HR Manager',\n        password: 'password123',\n        role: 'HR',\n        createdAt: new Date().toISOString()\n      });\n      \n      // Add default candidate user\n      await userDb.users.add({\n        email: 'candidate@talentflow.com',\n        name: 'John Candidate',\n        password: 'password123',\n        role: 'Candidate',\n        createdAt: new Date().toISOString()\n      });\n      \n      console.log('Default users created:');\n      console.log('HR: hr@talentflow.com / password123');\n      console.log('Candidate: candidate@talentflow.com / password123');\n    }\n  } catch (error) {\n    console.error('Error initializing user database:', error);\n  }\n};\n\nexport const registerUser = async (userData: Omit<User, 'id' | 'createdAt'>) => {\n  try {\n    // Check if user already exists\n    const existingUser = await userDb.users.where('email').equals(userData.email).first();\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Add new user\n    const userId = await userDb.users.add({\n      ...userData,\n      createdAt: new Date().toISOString()\n    });\n\n    return { success: true, userId };\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getDemoCredentials = () => {\n  return {\n    hr: {\n      email: 'hr@talentflow.com',\n      password: 'password123',\n      name: 'HR Manager'\n    },\n    candidate: {\n      email: 'candidate@talentflow.com',\n      password: 'password123',\n      name: 'John Candidate'\n    }\n  };\n};\n\nexport const loginUser = async (email: string, password: string) => {\n  try {\n    const user = await userDb.users.where('email').equals(email).first();\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    if (user.password !== password) {\n      throw new Error('Invalid password');\n    }\n\n    return {\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    };\n  } catch (error) {\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}