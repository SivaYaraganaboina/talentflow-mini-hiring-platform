{"ast":null,"code":"/**\n * Implements fast shallow verification of hostnames. This does not perform a\n * struct check on the content of labels (classes of Unicode characters, etc.)\n * but instead check that the structure is valid (number of labels, length of\n * labels, etc.).\n *\n * If you need stricter validation, consider using an external library.\n */\nfunction isValidAscii(code) {\n  return code >= 97 && code <= 122 || code >= 48 && code <= 57 || code > 127;\n}\n/**\n * Check if a hostname string is valid. It's usually a preliminary check before\n * trying to use getDomain or anything else.\n *\n * Beware: it does not check if the TLD exists.\n */\nexport default function (hostname) {\n  if (hostname.length > 255) {\n    return false;\n  }\n  if (hostname.length === 0) {\n    return false;\n  }\n  if (/*@__INLINE__*/!isValidAscii(hostname.charCodeAt(0)) && hostname.charCodeAt(0) !== 46 &&\n  // '.' (dot)\n  hostname.charCodeAt(0) !== 95 // '_' (underscore)\n  ) {\n    return false;\n  }\n  // Validate hostname according to RFC\n  let lastDotIndex = -1;\n  let lastCharCode = -1;\n  const len = hostname.length;\n  for (let i = 0; i < len; i += 1) {\n    const code = hostname.charCodeAt(i);\n    if (code === 46 /* '.' */) {\n      if (\n      // Check that previous label is < 63 bytes long (64 = 63 + '.')\n      i - lastDotIndex > 64 ||\n      // Check that previous character was not already a '.'\n      lastCharCode === 46 ||\n      // Check that the previous label does not end with a '-' (dash)\n      lastCharCode === 45 ||\n      // Check that the previous label does not end with a '_' (underscore)\n      lastCharCode === 95) {\n        return false;\n      }\n      lastDotIndex = i;\n    } else if (!(/*@__INLINE__*/isValidAscii(code) || code === 45 || code === 95)) {\n      // Check if there is a forbidden character in the label\n      return false;\n    }\n    lastCharCode = code;\n  }\n  return (\n    // Check that last label is shorter than 63 chars\n    len - lastDotIndex - 1 <= 63 &&\n    // Check that the last character is an allowed trailing label character.\n    // Since we already checked that the char is a valid hostname character,\n    // we only need to check that it's different from '-'.\n    lastCharCode !== 45\n  );\n}","map":{"version":3,"names":["isValidAscii","code","hostname","length","charCodeAt","lastDotIndex","lastCharCode","len","i"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\tldts-core\\src\\is-valid.ts"],"sourcesContent":["/**\n * Implements fast shallow verification of hostnames. This does not perform a\n * struct check on the content of labels (classes of Unicode characters, etc.)\n * but instead check that the structure is valid (number of labels, length of\n * labels, etc.).\n *\n * If you need stricter validation, consider using an external library.\n */\n\nfunction isValidAscii(code: number): boolean {\n  return (\n    (code >= 97 && code <= 122) || (code >= 48 && code <= 57) || code > 127\n  );\n}\n\n/**\n * Check if a hostname string is valid. It's usually a preliminary check before\n * trying to use getDomain or anything else.\n *\n * Beware: it does not check if the TLD exists.\n */\nexport default function (hostname: string): boolean {\n  if (hostname.length > 255) {\n    return false;\n  }\n\n  if (hostname.length === 0) {\n    return false;\n  }\n\n  if (\n    /*@__INLINE__*/ !isValidAscii(hostname.charCodeAt(0)) &&\n    hostname.charCodeAt(0) !== 46 && // '.' (dot)\n    hostname.charCodeAt(0) !== 95 // '_' (underscore)\n  ) {\n    return false;\n  }\n\n  // Validate hostname according to RFC\n  let lastDotIndex = -1;\n  let lastCharCode = -1;\n  const len = hostname.length;\n\n  for (let i = 0; i < len; i += 1) {\n    const code = hostname.charCodeAt(i);\n    if (code === 46 /* '.' */) {\n      if (\n        // Check that previous label is < 63 bytes long (64 = 63 + '.')\n        i - lastDotIndex > 64 ||\n        // Check that previous character was not already a '.'\n        lastCharCode === 46 ||\n        // Check that the previous label does not end with a '-' (dash)\n        lastCharCode === 45 ||\n        // Check that the previous label does not end with a '_' (underscore)\n        lastCharCode === 95\n      ) {\n        return false;\n      }\n\n      lastDotIndex = i;\n    } else if (\n      !(/*@__INLINE__*/ (isValidAscii(code) || code === 45 || code === 95))\n    ) {\n      // Check if there is a forbidden character in the label\n      return false;\n    }\n\n    lastCharCode = code;\n  }\n\n  return (\n    // Check that last label is shorter than 63 chars\n    len - lastDotIndex - 1 <= 63 &&\n    // Check that the last character is an allowed trailing label character.\n    // Since we already checked that the char is a valid hostname character,\n    // we only need to check that it's different from '-'.\n    lastCharCode !== 45\n  );\n}\n"],"mappings":"AAAA;;;;;;;;AASA,SAASA,YAAYA,CAACC,IAAY;EAChC,OACGA,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,GAAG,IAAMA,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,EAAG,IAAIA,IAAI,GAAG,GAAG;AAE3E;AAEA;;;;;;AAMA,eAAc,UAAWC,QAAgB;EACvC,IAAIA,QAAQ,CAACC,MAAM,GAAG,GAAG,EAAE;IACzB,OAAO,KAAK;EACd;EAEA,IAAID,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,KAAK;EACd;EAEA,IACE,eAAgB,CAACH,YAAY,CAACE,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC,IACrDF,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE;EAAI;EACjCF,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;EAAA,EAC9B;IACA,OAAO,KAAK;EACd;EAEA;EACA,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,MAAMC,GAAG,GAAGL,QAAQ,CAACC,MAAM;EAE3B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC/B,MAAMP,IAAI,GAAGC,QAAQ,CAACE,UAAU,CAACI,CAAC,CAAC;IACnC,IAAIP,IAAI,KAAK,EAAE,CAAC,WAAW;MACzB;MACE;MACAO,CAAC,GAAGH,YAAY,GAAG,EAAE;MACrB;MACAC,YAAY,KAAK,EAAE;MACnB;MACAA,YAAY,KAAK,EAAE;MACnB;MACAA,YAAY,KAAK,EAAE,EACnB;QACA,OAAO,KAAK;MACd;MAEAD,YAAY,GAAGG,CAAC;IAClB,CAAC,MAAM,IACL,EAAE,eAAiBR,YAAY,CAACC,IAAI,CAAC,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,EAAE,CAAE,EACrE;MACA;MACA,OAAO,KAAK;IACd;IAEAK,YAAY,GAAGL,IAAI;EACrB;EAEA;IACE;IACAM,GAAG,GAAGF,YAAY,GAAG,CAAC,IAAI,EAAE;IAC5B;IACA;IACA;IACAC,YAAY,KAAK;EAAE;AAEvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}