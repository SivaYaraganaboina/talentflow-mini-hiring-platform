{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport toast from 'react-hot-toast';\n// API functions\nconst fetchCandidates = async (params = {}) => {\n  const searchParams = new URLSearchParams({\n    page: (params.page || 1).toString(),\n    pageSize: (params.pageSize || 50).toString(),\n    search: params.search || '',\n    ...(params.stage && {\n      stage: params.stage\n    }),\n    ...(params.jobId && {\n      jobId: params.jobId\n    })\n  });\n  const response = await fetch(`/api/candidates?${searchParams}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidates');\n  }\n  return response.json();\n};\nconst fetchCandidate = async id => {\n  const response = await fetch(`/api/candidates/${id}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidate');\n  }\n  return response.json();\n};\nconst createCandidate = async candidateData => {\n  const response = await fetch('/api/candidates', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(candidateData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create candidate');\n  }\n  return response.json();\n};\nconst updateCandidate = async ({\n  id,\n  notes,\n  ...candidateData\n}) => {\n  const response = await fetch(`/api/candidates/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ...candidateData,\n      notes\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update candidate');\n  }\n  return response.json();\n};\nconst fetchCandidateTimeline = async id => {\n  const response = await fetch(`/api/candidates/${id}/timeline`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidate timeline');\n  }\n  return response.json();\n};\n\n// Hooks\nexport const useCandidates = (params = {}) => {\n  _s();\n  return useQuery(['candidates', params], () => fetchCandidates(params), {\n    keepPreviousData: true,\n    staleTime: 30000,\n    // 30 seconds\n    onError: error => {\n      toast.error(error.message);\n    }\n  });\n};\n_s(useCandidates, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCandidate = id => {\n  _s2();\n  return useQuery(['candidate', id], () => fetchCandidate(id), {\n    enabled: !!id,\n    onError: error => {\n      toast.error(error.message);\n    }\n  });\n};\n_s2(useCandidate, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCandidateTimeline = id => {\n  _s3();\n  return useQuery(['candidate-timeline', id], () => fetchCandidateTimeline(id), {\n    enabled: !!id,\n    onError: error => {\n      toast.error(error.message);\n    }\n  });\n};\n_s3(useCandidateTimeline, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateCandidate = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation(createCandidate, {\n    onSuccess: data => {\n      queryClient.invalidateQueries(['candidates']);\n      toast.success('Application submitted successfully!');\n    },\n    onError: error => {\n      toast.error(error.message);\n    }\n  });\n};\n_s4(useCreateCandidate, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateCandidate = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation(updateCandidate, {\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries(['candidates']);\n      queryClient.invalidateQueries(['candidate', variables.id]);\n      queryClient.invalidateQueries(['candidate-timeline', variables.id]);\n      if (variables.stage) {\n        toast.success(`Candidate moved to ${variables.stage} stage`);\n      } else {\n        toast.success('Candidate updated successfully!');\n      }\n    },\n    onError: error => {\n      toast.error(error.message);\n    }\n  });\n};\n_s5(useUpdateCandidate, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","toast","fetchCandidates","params","searchParams","URLSearchParams","page","toString","pageSize","search","stage","jobId","response","fetch","ok","Error","json","fetchCandidate","id","createCandidate","candidateData","method","headers","body","JSON","stringify","updateCandidate","notes","fetchCandidateTimeline","useCandidates","_s","keepPreviousData","staleTime","onError","error","message","useCandidate","_s2","enabled","useCandidateTimeline","_s3","useCreateCandidate","_s4","queryClient","onSuccess","data","invalidateQueries","success","useUpdateCandidate","_s5","variables"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/hooks/useCandidates.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from 'react-query';\nimport toast from 'react-hot-toast';\nimport { Candidate, ApiResponse, PaginationParams } from '../types';\n\n// API functions\nconst fetchCandidates = async (params: PaginationParams & { stage?: string; jobId?: string } = {}): Promise<ApiResponse<Candidate[]>> => {\n  const searchParams = new URLSearchParams({\n    page: (params.page || 1).toString(),\n    pageSize: (params.pageSize || 50).toString(),\n    search: params.search || '',\n    ...(params.stage && { stage: params.stage }),\n    ...(params.jobId && { jobId: params.jobId }),\n  });\n\n  const response = await fetch(`/api/candidates?${searchParams}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidates');\n  }\n  return response.json();\n};\n\nconst fetchCandidate = async (id: string): Promise<{ data: Candidate }> => {\n  const response = await fetch(`/api/candidates/${id}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidate');\n  }\n  return response.json();\n};\n\nconst createCandidate = async (candidateData: Partial<Candidate>): Promise<{ data: Candidate }> => {\n  const response = await fetch('/api/candidates', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(candidateData),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create candidate');\n  }\n  return response.json();\n};\n\nconst updateCandidate = async ({ id, notes, ...candidateData }: Partial<Candidate> & { id: string; notes?: string }): Promise<{ data: Candidate }> => {\n  const response = await fetch(`/api/candidates/${id}`, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ ...candidateData, notes }),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update candidate');\n  }\n  return response.json();\n};\n\nconst fetchCandidateTimeline = async (id: string) => {\n  const response = await fetch(`/api/candidates/${id}/timeline`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch candidate timeline');\n  }\n  return response.json();\n};\n\n// Hooks\nexport const useCandidates = (params: PaginationParams & { stage?: string; jobId?: string } = {}) => {\n  return useQuery(\n    ['candidates', params],\n    () => fetchCandidates(params),\n    {\n      keepPreviousData: true,\n      staleTime: 30000, // 30 seconds\n      onError: (error: Error) => {\n        toast.error(error.message);\n      },\n    }\n  );\n};\n\nexport const useCandidate = (id: string) => {\n  return useQuery(\n    ['candidate', id],\n    () => fetchCandidate(id),\n    {\n      enabled: !!id,\n      onError: (error: Error) => {\n        toast.error(error.message);\n      },\n    }\n  );\n};\n\nexport const useCandidateTimeline = (id: string) => {\n  return useQuery(\n    ['candidate-timeline', id],\n    () => fetchCandidateTimeline(id),\n    {\n      enabled: !!id,\n      onError: (error: Error) => {\n        toast.error(error.message);\n      },\n    }\n  );\n};\n\nexport const useCreateCandidate = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation(createCandidate, {\n    onSuccess: (data) => {\n      queryClient.invalidateQueries(['candidates']);\n      toast.success('Application submitted successfully!');\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n};\n\nexport const useUpdateCandidate = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation(updateCandidate, {\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries(['candidates']);\n      queryClient.invalidateQueries(['candidate', variables.id]);\n      queryClient.invalidateQueries(['candidate-timeline', variables.id]);\n      \n      if (variables.stage) {\n        toast.success(`Candidate moved to ${variables.stage} stage`);\n      } else {\n        toast.success('Candidate updated successfully!');\n      }\n    },\n    onError: (error: Error) => {\n      toast.error(error.message);\n    },\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}