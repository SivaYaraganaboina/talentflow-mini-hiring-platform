{"ast":null,"code":"import { match } from \"path-to-regexp\";\nimport { getCleanUrl } from \"@mswjs/interceptors\";\nimport { normalizePath } from './normalizePath.mjs';\nfunction coercePath(path) {\n  return path.replace(/([:a-zA-Z_-]*)(\\*{1,2})+/g, (_, parameterName, wildcard) => {\n    const expression = \"(.*)\";\n    if (!parameterName) {\n      return expression;\n    }\n    return parameterName.startsWith(\":\") ? \"\".concat(parameterName).concat(wildcard) : \"\".concat(parameterName).concat(expression);\n  }).replace(/([^/])(:)(?=\\d+)/, \"$1\\\\$2\").replace(/^([^/]+)(:)(?=\\/\\/)/, \"$1\\\\$2\");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === \"string\" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl = getCleanUrl(url);\n  const result = match(cleanPath, {\n    decode: decodeURIComponent\n  })(cleanUrl);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\nfunction isPath(value) {\n  return typeof value === \"string\" || value instanceof RegExp;\n}\nexport { coercePath, isPath, matchRequestUrl };","map":{"version":3,"names":["match","getCleanUrl","normalizePath","coercePath","path","replace","_","parameterName","wildcard","expression","startsWith","concat","matchRequestUrl","url","baseUrl","normalizedPath","cleanPath","cleanUrl","result","decode","decodeURIComponent","params","matches","isPath","value","RegExp"],"sources":["C:\\Users\\shiva\\Desktop\\talentflow-mini-hiring-platform\\TalentFlow\\node_modules\\msw\\src\\core\\utils\\matching\\matchRequestUrl.ts"],"sourcesContent":["import { match } from 'path-to-regexp'\nimport { getCleanUrl } from '@mswjs/interceptors'\nimport { normalizePath } from './normalizePath'\n\nexport type Path = string | RegExp\nexport type PathParams<KeyType extends keyof any = string> = {\n  [ParamName in KeyType]?: string | ReadonlyArray<string>\n}\n\nexport interface Match {\n  matches: boolean\n  params?: PathParams\n}\n\n/**\n * Coerce a path supported by MSW into a path\n * supported by \"path-to-regexp\".\n */\nexport function coercePath(path: string): string {\n  return (\n    path\n      /**\n       * Replace wildcards (\"*\") with unnamed capturing groups\n       * because \"path-to-regexp\" doesn't support wildcards.\n       * Ignore path parameter' modifiers (i.e. \":name*\").\n       */\n      .replace(\n        /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n        (_, parameterName: string | undefined, wildcard: string) => {\n          const expression = '(.*)'\n\n          if (!parameterName) {\n            return expression\n          }\n\n          return parameterName.startsWith(':')\n            ? `${parameterName}${wildcard}`\n            : `${parameterName}${expression}`\n        },\n      )\n      /**\n       * Escape the port so that \"path-to-regexp\" can match\n       * absolute URLs including port numbers.\n       */\n      .replace(/([^/])(:)(?=\\d+)/, '$1\\\\$2')\n      /**\n       * Escape the protocol so that \"path-to-regexp\" could match\n       * absolute URL.\n       * @see https://github.com/pillarjs/path-to-regexp/issues/259\n       */\n      .replace(/^([^/]+)(:)(?=\\/\\/)/, '$1\\\\$2')\n  )\n}\n\n/**\n * Returns the result of matching given request URL against a mask.\n */\nexport function matchRequestUrl(url: URL, path: Path, baseUrl?: string): Match {\n  const normalizedPath = normalizePath(path, baseUrl)\n  const cleanPath =\n    typeof normalizedPath === 'string'\n      ? coercePath(normalizedPath)\n      : normalizedPath\n\n  const cleanUrl = getCleanUrl(url)\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl)\n  const params = (result && (result.params as PathParams)) || {}\n\n  return {\n    matches: result !== false,\n    params,\n  }\n}\n\nexport function isPath(value: unknown): value is Path {\n  return typeof value === 'string' || value instanceof RegExp\n}\n"],"mappings":"AAAA,SAASA,KAAA,QAAa;AACtB,SAASC,WAAA,QAAmB;AAC5B,SAASC,aAAA,QAAqB;AAgBvB,SAASC,WAAWC,IAAA,EAAsB;EAC/C,OACEA,IAAA,CAMGC,OAAA,CACC,6BACA,CAACC,CAAA,EAAGC,aAAA,EAAmCC,QAAA,KAAqB;IAC1D,MAAMC,UAAA,GAAa;IAEnB,IAAI,CAACF,aAAA,EAAe;MAClB,OAAOE,UAAA;IACT;IAEA,OAAOF,aAAA,CAAcG,UAAA,CAAW,GAAG,OAAAC,MAAA,CAC5BJ,aAAa,EAAAI,MAAA,CAAGH,QAAQ,OAAAG,MAAA,CACxBJ,aAAa,EAAAI,MAAA,CAAGF,UAAU;EACnC,CACF,EAKCJ,OAAA,CAAQ,oBAAoB,QAAQ,EAMpCA,OAAA,CAAQ,uBAAuB,QAAQ;AAE9C;AAKO,SAASO,gBAAgBC,GAAA,EAAUT,IAAA,EAAYU,OAAA,EAAyB;EAC7E,MAAMC,cAAA,GAAiBb,aAAA,CAAcE,IAAA,EAAMU,OAAO;EAClD,MAAME,SAAA,GACJ,OAAOD,cAAA,KAAmB,WACtBZ,UAAA,CAAWY,cAAc,IACzBA,cAAA;EAEN,MAAME,QAAA,GAAWhB,WAAA,CAAYY,GAAG;EAChC,MAAMK,MAAA,GAASlB,KAAA,CAAMgB,SAAA,EAAW;IAAEG,MAAA,EAAQC;EAAmB,CAAC,EAAEH,QAAQ;EACxE,MAAMI,MAAA,GAAUH,MAAA,IAAWA,MAAA,CAAOG,MAAA,IAA0B,CAAC;EAE7D,OAAO;IACLC,OAAA,EAASJ,MAAA,KAAW;IACpBG;EACF;AACF;AAEO,SAASE,OAAOC,KAAA,EAA+B;EACpD,OAAO,OAAOA,KAAA,KAAU,YAAYA,KAAA,YAAiBC,MAAA;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}