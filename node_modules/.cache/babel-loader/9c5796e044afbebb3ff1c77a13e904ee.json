{"ast":null,"code":"// Generate random names for candidates\nconst firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Jessica', 'William', 'Ashley', 'James', 'Amanda', 'Christopher', 'Jennifer', 'Daniel', 'Lisa', 'Matthew', 'Nancy', 'Anthony', 'Karen', 'Mark', 'Betty', 'Donald', 'Helen', 'Steven', 'Sandra', 'Paul', 'Donna', 'Andrew', 'Carol', 'Joshua', 'Ruth', 'Kenneth', 'Sharon', 'Kevin', 'Michelle', 'Brian', 'Laura', 'George', 'Sarah', 'Edward', 'Kimberly', 'Ronald', 'Deborah', 'Timothy', 'Dorothy', 'Jason', 'Lisa', 'Jeffrey', 'Nancy'];\nconst lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker', 'Young', 'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores', 'Green', 'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell', 'Carter', 'Roberts'];\nconst jobTitles = ['Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer', 'Data Scientist', 'Product Manager', 'UX Designer', 'UI Designer', 'Marketing Manager', 'Sales Representative', 'Customer Success Manager', 'Business Analyst', 'Project Manager', 'QA Engineer', 'Mobile Developer', 'Cloud Architect', 'Security Engineer', 'Machine Learning Engineer', 'Content Writer', 'Graphic Designer', 'HR Specialist', 'Financial Analyst', 'Operations Manager', 'Technical Writer', 'System Administrator'];\nconst companies = ['TechCorp', 'InnovateLabs', 'DataFlow', 'CloudTech', 'NextGen', 'FutureSoft', 'SmartSystems', 'DigitalFirst', 'CodeCraft', 'AppWorks', 'WebSolutions', 'DataDriven', 'CloudFirst', 'TechNova', 'InnovateHub', 'DigitalCraft', 'SmartTech', 'FutureLabs', 'CodeForge', 'AppCraft', 'WebForge', 'DataCraft', 'CloudForge'];\nconst locations = ['San Francisco, CA', 'New York, NY', 'Seattle, WA', 'Austin, TX', 'Boston, MA', 'Chicago, IL', 'Los Angeles, CA', 'Denver, CO', 'Portland, OR', 'Remote', 'Hybrid', 'London, UK', 'Toronto, ON', 'Vancouver, BC', 'Berlin, Germany', 'Amsterdam, Netherlands', 'Dublin, Ireland', 'Sydney, Australia'];\nconst skills = ['React', 'Vue.js', 'Angular', 'Node.js', 'Python', 'Java', 'C#', 'Go', 'Rust', 'TypeScript', 'JavaScript', 'SQL', 'MongoDB', 'PostgreSQL', 'Redis', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP', 'Machine Learning', 'Data Analysis', 'Project Management', 'Agile', 'Scrum', 'UI/UX Design', 'Marketing', 'Sales', 'Customer Service', 'Business Analysis'];\n\n// Generate random job\nconst generateJob = index => {\n  const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\n  const company = companies[Math.floor(Math.random() * companies.length)];\n  const location = locations[Math.floor(Math.random() * locations.length)];\n  const status = Math.random() > 0.2 ? 'active' : 'archived';\n  return {\n    id: `job-${index + 1}`,\n    title: `${title} - ${company}`,\n    description: `We are looking for a talented ${title.toLowerCase()} to join our team. This role involves working on cutting-edge projects and collaborating with a diverse team of professionals.`,\n    location,\n    status: status,\n    tags: skills.slice(0, Math.floor(Math.random() * 5) + 2),\n    order: index + 1,\n    createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n  };\n};\n\n// Generate random candidate\nconst generateCandidate = index => {\n  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n  const name = `${firstName} ${lastName}`;\n  const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@email.com`;\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const stage = stages[Math.floor(Math.random() * stages.length)];\n  const jobId = `job-${Math.floor(Math.random() * 25) + 1}`;\n  const appliedAt = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000);\n  return {\n    id: `candidate-${index + 1}`,\n    name,\n    email,\n    phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\n    resume: `${name.replace(' ', '_')}_Resume.pdf`,\n    status: stage,\n    stage: stage,\n    jobId,\n    appliedAt: appliedAt.toISOString(),\n    timeline: [{\n      id: `timeline-${index + 1}-1`,\n      stage: 'applied',\n      timestamp: appliedAt.toISOString(),\n      notes: 'Application submitted'\n    }, ...(stage !== 'applied' ? [{\n      id: `timeline-${index + 1}-2`,\n      stage: stage,\n      timestamp: new Date(appliedAt.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n      notes: `Moved to ${stage} stage`\n    }] : [])]\n  };\n};\n\n// Generate assessment\nconst generateAssessment = jobId => {\n  const questionTypes = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric', 'file-upload'];\n  const questions = [];\n  for (let i = 1; i <= 12; i++) {\n    const type = questionTypes[Math.floor(Math.random() * questionTypes.length)];\n    const question = {\n      id: `q-${i}`,\n      type: type,\n      title: `Question ${i}`,\n      description: `This is question ${i} for the assessment.`,\n      required: Math.random() > 0.3,\n      options: type === 'single-choice' || type === 'multi-choice' ? ['Option A', 'Option B', 'Option C', 'Option D'] : undefined,\n      validation: type === 'numeric' ? {\n        min: 0,\n        max: 100\n      } : type === 'short-text' ? {\n        maxLength: 100\n      } : type === 'long-text' ? {\n        maxLength: 500\n      } : undefined,\n      conditional: i > 3 ? {\n        dependsOn: `q-${i - 2}`,\n        condition: 'equals',\n        value: 'Yes'\n      } : undefined\n    };\n    questions.push(question);\n  }\n  return {\n    id: `assessment-${jobId}`,\n    jobId,\n    title: `Technical Assessment for Job ${jobId}`,\n    description: 'This assessment evaluates technical skills and problem-solving abilities.',\n    sections: [{\n      id: 'section-1',\n      title: 'Technical Skills',\n      questions: questions.slice(0, 6)\n    }, {\n      id: 'section-2',\n      title: 'Problem Solving',\n      questions: questions.slice(6, 12)\n    }],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n};\n\n// Generate seed data\nexport const seedData = {\n  jobs: Array.from({\n    length: 25\n  }, (_, i) => generateJob(i)),\n  candidates: Array.from({\n    length: 1000\n  }, (_, i) => generateCandidate(i)),\n  assessments: [generateAssessment('job-1'), generateAssessment('job-2'), generateAssessment('job-3')],\n  assessmentSubmissions: []\n};","map":{"version":3,"names":["firstNames","lastNames","jobTitles","companies","locations","skills","generateJob","index","title","Math","floor","random","length","company","location","status","id","description","toLowerCase","tags","slice","order","createdAt","Date","now","toISOString","updatedAt","generateCandidate","firstName","lastName","name","email","stages","stage","jobId","appliedAt","phone","resume","replace","timeline","timestamp","notes","getTime","generateAssessment","questionTypes","questions","i","type","question","required","options","undefined","validation","min","max","maxLength","conditional","dependsOn","condition","value","push","sections","seedData","jobs","Array","from","_","candidates","assessments","assessmentSubmissions"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/mocks/seedData.ts"],"sourcesContent":["import { Job, Candidate, Assessment } from '../types';\r\n\r\n// Generate random names for candidates\r\nconst firstNames = [\r\n  'John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Jessica', 'William', 'Ashley',\r\n  'James', 'Amanda', 'Christopher', 'Jennifer', 'Daniel', 'Lisa', 'Matthew', 'Nancy', 'Anthony', 'Karen',\r\n  'Mark', 'Betty', 'Donald', 'Helen', 'Steven', 'Sandra', 'Paul', 'Donna', 'Andrew', 'Carol',\r\n  'Joshua', 'Ruth', 'Kenneth', 'Sharon', 'Kevin', 'Michelle', 'Brian', 'Laura', 'George', 'Sarah',\r\n  'Edward', 'Kimberly', 'Ronald', 'Deborah', 'Timothy', 'Dorothy', 'Jason', 'Lisa', 'Jeffrey', 'Nancy'\r\n];\r\n\r\nconst lastNames = [\r\n  'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez',\r\n  'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin',\r\n  'Lee', 'Perez', 'Thompson', 'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson',\r\n  'Walker', 'Young', 'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores',\r\n  'Green', 'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell', 'Carter', 'Roberts'\r\n];\r\n\r\nconst jobTitles = [\r\n  'Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'DevOps Engineer', 'Data Scientist',\r\n  'Product Manager', 'UX Designer', 'UI Designer', 'Marketing Manager', 'Sales Representative',\r\n  'Customer Success Manager', 'Business Analyst', 'Project Manager', 'QA Engineer', 'Mobile Developer',\r\n  'Cloud Architect', 'Security Engineer', 'Machine Learning Engineer', 'Content Writer', 'Graphic Designer',\r\n  'HR Specialist', 'Financial Analyst', 'Operations Manager', 'Technical Writer', 'System Administrator'\r\n];\r\n\r\nconst companies = [\r\n  'TechCorp', 'InnovateLabs', 'DataFlow', 'CloudTech', 'NextGen', 'FutureSoft', 'SmartSystems', 'DigitalFirst',\r\n  'CodeCraft', 'AppWorks', 'WebSolutions', 'DataDriven', 'CloudFirst', 'TechNova', 'InnovateHub',\r\n  'DigitalCraft', 'SmartTech', 'FutureLabs', 'CodeForge', 'AppCraft', 'WebForge', 'DataCraft', 'CloudForge'\r\n];\r\n\r\nconst locations = [\r\n  'San Francisco, CA', 'New York, NY', 'Seattle, WA', 'Austin, TX', 'Boston, MA', 'Chicago, IL',\r\n  'Los Angeles, CA', 'Denver, CO', 'Portland, OR', 'Remote', 'Hybrid', 'London, UK', 'Toronto, ON',\r\n  'Vancouver, BC', 'Berlin, Germany', 'Amsterdam, Netherlands', 'Dublin, Ireland', 'Sydney, Australia'\r\n];\r\n\r\nconst skills = [\r\n  'React', 'Vue.js', 'Angular', 'Node.js', 'Python', 'Java', 'C#', 'Go', 'Rust', 'TypeScript',\r\n  'JavaScript', 'SQL', 'MongoDB', 'PostgreSQL', 'Redis', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP',\r\n  'Machine Learning', 'Data Analysis', 'Project Management', 'Agile', 'Scrum', 'UI/UX Design',\r\n  'Marketing', 'Sales', 'Customer Service', 'Business Analysis'\r\n];\r\n\r\n// Generate random job\r\nconst generateJob = (index: number): Job => {\r\n  const title = jobTitles[Math.floor(Math.random() * jobTitles.length)];\r\n  const company = companies[Math.floor(Math.random() * companies.length)];\r\n  const location = locations[Math.floor(Math.random() * locations.length)];\r\n  const status = Math.random() > 0.2 ? 'active' : 'archived';\r\n  \r\n  return {\r\n    id: `job-${index + 1}`,\r\n    title: `${title} - ${company}`,\r\n    description: `We are looking for a talented ${title.toLowerCase()} to join our team. This role involves working on cutting-edge projects and collaborating with a diverse team of professionals.`,\r\n    location,\r\n    status: status,\r\n    tags: skills.slice(0, Math.floor(Math.random() * 5) + 2),\r\n    order: index + 1,\r\n    createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),\r\n    updatedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\r\n  };\r\n};\r\n\r\n// Generate random candidate\r\nconst generateCandidate = (index: number): Candidate => {\r\n  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n  const name = `${firstName} ${lastName}`;\r\n  const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@email.com`;\r\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  const stage = stages[Math.floor(Math.random() * stages.length)];\r\n  const jobId = `job-${Math.floor(Math.random() * 25) + 1}`;\r\n  \r\n  const appliedAt = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000);\r\n  \r\n  return {\r\n    id: `candidate-${index + 1}`,\r\n    name,\r\n    email,\r\n    phone: `+1-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\r\n    resume: `${name.replace(' ', '_')}_Resume.pdf`,\r\n    status: stage,\r\n    stage: stage,\r\n    jobId,\r\n    appliedAt: appliedAt.toISOString(),\r\n    timeline: [\r\n      {\r\n        id: `timeline-${index + 1}-1`,\r\n        stage: 'applied',\r\n        timestamp: appliedAt.toISOString(),\r\n        notes: 'Application submitted'\r\n      },\r\n      ...(stage !== 'applied' ? [{\r\n        id: `timeline-${index + 1}-2`,\r\n        stage: stage,\r\n        timestamp: new Date(appliedAt.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n        notes: `Moved to ${stage} stage`\r\n      }] : [])\r\n    ]\r\n  };\r\n};\r\n\r\n// Generate assessment\r\nconst generateAssessment = (jobId: string): Assessment => {\r\n  const questionTypes = ['single-choice', 'multi-choice', 'short-text', 'long-text', 'numeric', 'file-upload'];\r\n  const questions = [];\r\n  \r\n  for (let i = 1; i <= 12; i++) {\r\n    const type = questionTypes[Math.floor(Math.random() * questionTypes.length)];\r\n    const question = {\r\n      id: `q-${i}`,\r\n      type: type as 'single-choice' | 'multi-choice' | 'short-text' | 'long-text' | 'numeric' | 'file-upload',\r\n      title: `Question ${i}`,\r\n      description: `This is question ${i} for the assessment.`,\r\n      required: Math.random() > 0.3,\r\n      options: type === 'single-choice' || type === 'multi-choice' ? [\r\n        'Option A', 'Option B', 'Option C', 'Option D'\r\n      ] : undefined,\r\n      validation: type === 'numeric' ? {\r\n        min: 0,\r\n        max: 100\r\n      } : type === 'short-text' ? {\r\n        maxLength: 100\r\n      } : type === 'long-text' ? {\r\n        maxLength: 500\r\n      } : undefined,\r\n      conditional: i > 3 ? {\r\n        dependsOn: `q-${i - 2}`,\r\n        condition: 'equals' as 'equals' | 'not-equals' | 'contains',\r\n        value: 'Yes'\r\n      } : undefined\r\n    };\r\n    \r\n    questions.push(question);\r\n  }\r\n  \r\n  return {\r\n    id: `assessment-${jobId}`,\r\n    jobId,\r\n    title: `Technical Assessment for Job ${jobId}`,\r\n    description: 'This assessment evaluates technical skills and problem-solving abilities.',\r\n    sections: [\r\n      {\r\n        id: 'section-1',\r\n        title: 'Technical Skills',\r\n        questions: questions.slice(0, 6)\r\n      },\r\n      {\r\n        id: 'section-2',\r\n        title: 'Problem Solving',\r\n        questions: questions.slice(6, 12)\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  };\r\n};\r\n\r\n// Generate seed data\r\nexport const seedData = {\r\n  jobs: Array.from({ length: 25 }, (_, i) => generateJob(i)),\r\n  candidates: Array.from({ length: 1000 }, (_, i) => generateCandidate(i)),\r\n  assessments: [\r\n    generateAssessment('job-1'),\r\n    generateAssessment('job-2'),\r\n    generateAssessment('job-3')\r\n  ],\r\n  assessmentSubmissions: []\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}