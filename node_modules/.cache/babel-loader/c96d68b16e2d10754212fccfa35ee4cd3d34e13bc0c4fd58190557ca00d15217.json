{"ast":null,"code":"// Utility functions for job management\nexport const generateSlug = title => {\n  return title.toLowerCase().replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n  .replace(/\\s+/g, '-') // Replace spaces with hyphens\n  .replace(/-+/g, '-') // Replace multiple hyphens with single\n  .trim().replace(/^-|-$/g, ''); // Remove leading/trailing hyphens\n};\nexport const validateSlugUniqueness = async (slug, excludeId) => {\n  const {\n    db\n  } = await import('../services/database');\n  let query = db.jobs.where('slug').equals(slug);\n  if (excludeId) {\n    const jobs = await query.toArray();\n    return !jobs.some(job => job.id !== excludeId);\n  }\n  const count = await query.count();\n  return count === 0;\n};\nexport const ensureUniqueSlug = async (baseSlug, excludeId) => {\n  let slug = baseSlug;\n  let counter = 1;\n  while (!(await validateSlugUniqueness(slug, excludeId))) {\n    slug = `${baseSlug}-${counter}`;\n    counter++;\n  }\n  return slug;\n};","map":{"version":3,"names":["generateSlug","title","toLowerCase","replace","trim","validateSlugUniqueness","slug","excludeId","db","query","jobs","where","equals","toArray","some","job","id","count","ensureUniqueSlug","baseSlug","counter"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/utils/jobUtils.ts"],"sourcesContent":["// Utility functions for job management\nexport const generateSlug = (title: string): string => {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .trim()\n    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens\n};\n\nexport const validateSlugUniqueness = async (slug: string, excludeId?: string): Promise<boolean> => {\n  const { db } = await import('../services/database');\n  \n  let query = db.jobs.where('slug').equals(slug);\n  \n  if (excludeId) {\n    const jobs = await query.toArray();\n    return !jobs.some(job => job.id !== excludeId);\n  }\n  \n  const count = await query.count();\n  return count === 0;\n};\n\nexport const ensureUniqueSlug = async (baseSlug: string, excludeId?: string): Promise<string> => {\n  let slug = baseSlug;\n  let counter = 1;\n  \n  while (!(await validateSlugUniqueness(slug, excludeId))) {\n    slug = `${baseSlug}-${counter}`;\n    counter++;\n  }\n  \n  return slug;\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAIC,KAAa,IAAa;EACrD,OAAOA,KAAK,CACTC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;EAAA,CAC7BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EAAA,CACpBC,IAAI,CAAC,CAAC,CACND,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAG,MAAAA,CAAOC,IAAY,EAAEC,SAAkB,KAAuB;EAClG,MAAM;IAAEC;EAAG,CAAC,GAAG,MAAM,MAAM,CAAC,sBAAsB,CAAC;EAEnD,IAAIC,KAAK,GAAGD,EAAE,CAACE,IAAI,CAACC,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAACN,IAAI,CAAC;EAE9C,IAAIC,SAAS,EAAE;IACb,MAAMG,IAAI,GAAG,MAAMD,KAAK,CAACI,OAAO,CAAC,CAAC;IAClC,OAAO,CAACH,IAAI,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKT,SAAS,CAAC;EAChD;EAEA,MAAMU,KAAK,GAAG,MAAMR,KAAK,CAACQ,KAAK,CAAC,CAAC;EACjC,OAAOA,KAAK,KAAK,CAAC;AACpB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,QAAgB,EAAEZ,SAAkB,KAAsB;EAC/F,IAAID,IAAI,GAAGa,QAAQ;EACnB,IAAIC,OAAO,GAAG,CAAC;EAEf,OAAO,EAAE,MAAMf,sBAAsB,CAACC,IAAI,EAAEC,SAAS,CAAC,CAAC,EAAE;IACvDD,IAAI,GAAG,GAAGa,QAAQ,IAAIC,OAAO,EAAE;IAC/BA,OAAO,EAAE;EACX;EAEA,OAAOd,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}