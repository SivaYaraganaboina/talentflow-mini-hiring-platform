{"ast":null,"code":"import _objectSpread from\"C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";class OfflineQueue{constructor(){this.queue=[];this.isOnline=navigator.onLine;this.maxRetries=3;this.retryDelay=1000;this.loadQueue();this.setupEventListeners();this.processQueue();}setupEventListeners(){window.addEventListener('online',()=>{this.isOnline=true;this.processQueue();});window.addEventListener('offline',()=>{this.isOnline=false;});}loadQueue(){try{const stored=localStorage.getItem('offlineQueue');if(stored){this.queue=JSON.parse(stored);}}catch(error){console.error('Failed to load offline queue:',error);this.queue=[];}}saveQueue(){try{localStorage.setItem('offlineQueue',JSON.stringify(this.queue));}catch(error){console.error('Failed to save offline queue:',error);}}addRequest(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const request={id:\"\".concat(Date.now(),\"-\").concat(Math.random()),url,method:options.method||'GET',body:options.body?JSON.parse(options.body):undefined,headers:options.headers,timestamp:Date.now(),retryCount:0};this.queue.push(request);this.saveQueue();if(this.isOnline){this.processQueue();}return request.id;}async processQueue(){if(!this.isOnline||this.queue.length===0)return;const request=this.queue[0];try{const response=await fetch(request.url,{method:request.method,headers:_objectSpread({'Content-Type':'application/json'},request.headers),body:request.body?JSON.stringify(request.body):undefined});if(response.ok){// Success - remove from queue\nthis.queue.shift();this.saveQueue();// Process next request\nsetTimeout(()=>this.processQueue(),100);}else{throw new Error(\"HTTP \".concat(response.status));}}catch(error){console.error('Failed to process queued request:',error);request.retryCount++;if(request.retryCount>=this.maxRetries){// Max retries reached - remove from queue\nthis.queue.shift();console.error('Max retries reached for request:',request.url);}this.saveQueue();// Retry after delay\nsetTimeout(()=>this.processQueue(),this.retryDelay*request.retryCount);}}getQueueLength(){return this.queue.length;}clearQueue(){this.queue=[];this.saveQueue();}}export const offlineQueue=new OfflineQueue();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}