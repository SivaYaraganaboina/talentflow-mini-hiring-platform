{"ast":null,"code":"import{offlineQueue}from'../services/offlineQueue';// API utility with retry logic and offline support\nexport const apiCall=async function(url,options){let retries=arguments.length>2&&arguments[2]!==undefined?arguments[2]:3;// Check if online\nif(!navigator.onLine&&options&&(options.method==='POST'||options.method==='PATCH'||options.method==='DELETE')){// Queue write operations when offline\nofflineQueue.addRequest(url,options);// Return a mock successful response for optimistic updates\nreturn new Response(JSON.stringify({success:true,queued:true}),{status:200,headers:{'Content-Type':'application/json'}});}for(let i=0;i<retries;i++){try{const response=await fetch(url,options);// Check if response is HTML (indicates MSW not working)\nconst contentType=response.headers.get('content-type');if(contentType&&contentType.includes('text/html')){throw new Error('Received HTML instead of JSON - MSW may not be ready');}return response;}catch(error){console.warn(\"API call attempt \".concat(i+1,\" failed:\"),error);if(i===retries-1){// If this is a write operation and we've exhausted retries, queue it\nif(options&&(options.method==='POST'||options.method==='PATCH'||options.method==='DELETE')){offlineQueue.addRequest(url,options);return new Response(JSON.stringify({success:true,queued:true}),{status:200,headers:{'Content-Type':'application/json'}});}throw error;}// Wait before retry\nawait new Promise(resolve=>setTimeout(resolve,200*(i+1)));}}throw new Error('All retry attempts failed');};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}