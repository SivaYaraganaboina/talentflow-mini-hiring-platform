{"ast":null,"code":"import Dexie from 'dexie';\nimport { mockJobs } from './mockData';\nexport class TalentFlowDatabase extends Dexie {\n  constructor() {\n    super('TalentFlowDatabase');\n    this.jobs = void 0;\n    this.candidates = void 0;\n    this.assessments = void 0;\n    this.submissions = void 0;\n    this.timeline = void 0;\n    this.version(1).stores({\n      jobs: 'id, title, slug, status, order, createdAt',\n      candidates: 'id, name, email, stage, jobId, appliedAt',\n      assessments: 'id, jobId, title, createdAt',\n      submissions: 'id, jobId, candidateId, submittedAt',\n      timeline: 'id, candidateId, stage, timestamp'\n    });\n  }\n}\nexport const db = new TalentFlowDatabase();\n\n// Initialize database with seed data\nexport const initializeDatabase = async () => {\n  try {\n    const jobCount = await db.jobs.count();\n    console.log('Current job count:', jobCount);\n    if (jobCount === 0) {\n      console.log('Seeding database with initial data...');\n      await seedDatabase();\n      console.log('Database seeded successfully');\n    } else if (jobCount < 30) {\n      console.log('Adding additional test jobs...');\n      await addTestJobs();\n      console.log('Additional jobs added');\n    } else {\n      console.log('Database already has sufficient test data');\n    }\n\n    // Check if jobs have slugs, if not, add them\n    const firstJob = await db.jobs.orderBy('id').first();\n    if (firstJob && !firstJob.slug) {\n      console.log('Adding slugs to existing jobs...');\n      const {\n        updateJobsWithSlugs\n      } = await import('../utils/updateSlugs');\n      await updateJobsWithSlugs();\n      console.log('Slugs added to existing jobs');\n    }\n    const finalCount = await db.jobs.count();\n    console.log('Final job count:', finalCount);\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n};\nconst seedDatabase = async () => {\n  // Generate 30 jobs with slugs\n  const jobTitles = ['Senior Frontend Developer - TechCorp', 'Backend Developer - DataFlow', 'Full Stack Developer - CloudTech', 'DevOps Engineer - InfraCorp', 'Mobile App Developer - AppWorks', 'Data Scientist - AnalyticsPro', 'UI/UX Designer - DesignStudio', 'Security Engineer - SecureNet', 'Product Manager - ProductLabs', 'QA Engineer - QualityFirst', 'Blockchain Developer - CryptoTech', 'AI/ML Engineer - BrainTech', 'Database Administrator - DataCorp', 'Technical Writer - DocuTech', 'Site Reliability Engineer - UptimeCorp', 'Game Developer - GameStudio', 'Systems Architect - ArchTech', 'Frontend Developer - StartupXYZ', 'Backend Developer - EcommercePlus', 'Mobile Developer - HealthTech', 'Data Engineer - BigData Inc', 'Cybersecurity Analyst - SecureCorp', 'Full Stack Developer - SaaS Company', 'Machine Learning Engineer - AI Startup', 'DevOps Engineer - FinTech', 'Software Engineer - TestCompany', 'UX Designer - CreativeAgency', 'Data Analyst - AnalyticsCorp', 'Project Manager - TechSolutions', 'Marketing Specialist - GrowthCo'];\n  const generateSlug = title => {\n    return title.toLowerCase().replace(/[^a-z0-9\\s-]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-').trim().replace(/^-|-$/g, '');\n  };\n  const generatedJobs = jobTitles.map((title, index) => ({\n    id: `job-${index + 1}`,\n    title,\n    slug: generateSlug(title),\n    description: `Join our team as a ${title.split(' - ')[0]}. We're looking for talented individuals to help us build the future.`,\n    location: ['San Francisco, CA', 'New York, NY', 'Remote', 'Seattle, WA', 'Austin, TX'][index % 5],\n    status: index < 25 ? 'active' : 'archived',\n    tags: ['JavaScript', 'React', 'Node.js', 'TypeScript', 'Python'].slice(0, Math.floor(Math.random() * 3) + 2),\n    order: index + 1,\n    createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString()\n  }));\n  await db.jobs.bulkAdd(generatedJobs);\n\n  // Seed Candidates\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const candidates = Array.from({\n    length: 1000\n  }, (_, i) => {\n    const jobId = `job-${Math.floor(Math.random() * 30) + 1}`;\n    const stage = stages[Math.floor(Math.random() * stages.length)];\n    const appliedAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString();\n    return {\n      id: `candidate-${i + 1}`,\n      name: `Candidate ${i + 1}`,\n      email: `candidate${i + 1}@example.com`,\n      phone: `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,\n      resume: `Resume for Candidate ${i + 1}`,\n      status: 'active',\n      stage,\n      jobId,\n      appliedAt,\n      timeline: [{\n        id: `timeline-${i + 1}-1`,\n        stage: 'applied',\n        timestamp: appliedAt,\n        notes: 'Application submitted'\n      }]\n    };\n  });\n  await db.candidates.bulkAdd(candidates);\n\n  // Seed Assessments\n  const assessments = ['job-1', 'job-2', 'job-3'].map((jobId, i) => ({\n    id: `assessment-${job.id}`,\n    jobId: job.id,\n    title: `${job.title} Assessment`,\n    description: `Technical assessment for ${job.title} position`,\n    sections: [{\n      id: `section-${i + 1}-1`,\n      title: 'Technical Skills',\n      questions: [{\n        id: `q-${i + 1}-1`,\n        type: 'single-choice',\n        title: 'What is your experience with React?',\n        description: 'Select your level of experience',\n        required: true,\n        options: ['Beginner', 'Intermediate', 'Advanced', 'Expert']\n      }, {\n        id: `q-${i + 1}-2`,\n        type: 'multi-choice',\n        title: 'Which technologies have you worked with?',\n        description: 'Select all that apply',\n        required: true,\n        options: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java']\n      }, {\n        id: `q-${i + 1}-3`,\n        type: 'short-text',\n        title: 'Years of experience',\n        description: 'How many years of professional experience do you have?',\n        required: true,\n        validation: {\n          min: 0,\n          max: 50\n        }\n      }, {\n        id: `q-${i + 1}-4`,\n        type: 'long-text',\n        title: 'Describe your most challenging project',\n        description: 'Tell us about a challenging project you worked on',\n        required: true,\n        validation: {\n          maxLength: 1000\n        }\n      }, {\n        id: `q-${i + 1}-5`,\n        type: 'numeric',\n        title: 'Expected salary range (in thousands)',\n        description: 'What is your expected salary range?',\n        required: false,\n        validation: {\n          min: 30,\n          max: 300\n        }\n      }]\n    }, {\n      id: `section-${i + 1}-2`,\n      title: 'Behavioral Questions',\n      questions: [{\n        id: `q-${i + 1}-6`,\n        type: 'single-choice',\n        title: 'Do you prefer working in teams?',\n        description: 'Select your preference',\n        required: true,\n        options: ['Yes', 'No', 'Sometimes']\n      }, {\n        id: `q-${i + 1}-7`,\n        type: 'long-text',\n        title: 'Team collaboration experience',\n        description: 'Describe your experience working in teams',\n        required: true,\n        conditional: {\n          dependsOn: `q-${i + 1}-6`,\n          condition: 'equals',\n          value: 'Yes'\n        },\n        validation: {\n          maxLength: 500\n        }\n      }, {\n        id: `q-${i + 1}-8`,\n        type: 'file-upload',\n        title: 'Portfolio or work samples',\n        description: 'Upload your portfolio or work samples',\n        required: false\n      }]\n    }],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }));\n  await db.assessments.bulkAdd(assessments);\n};\nconst addTestJobs = async () => {\n  // Add any missing test jobs from the mock data\n  const existingJobs = await db.jobs.toArray();\n  const existingIds = new Set(existingJobs.map(job => job.id));\n  const jobsToAdd = mockJobs.filter(job => !existingIds.has(job.id));\n  if (jobsToAdd.length > 0) {\n    await db.jobs.bulkAdd(jobsToAdd);\n  }\n};","map":{"version":3,"names":["Dexie","mockJobs","TalentFlowDatabase","constructor","jobs","candidates","assessments","submissions","timeline","version","stores","db","initializeDatabase","jobCount","count","console","log","seedDatabase","addTestJobs","firstJob","orderBy","first","slug","updateJobsWithSlugs","finalCount","error","jobTitles","generateSlug","title","toLowerCase","replace","trim","generatedJobs","map","index","id","description","split","location","status","tags","slice","Math","floor","random","order","createdAt","Date","now","toISOString","updatedAt","bulkAdd","stages","Array","from","length","_","i","jobId","stage","appliedAt","name","email","phone","String","padStart","resume","timestamp","notes","job","sections","questions","type","required","options","validation","min","max","maxLength","conditional","dependsOn","condition","value","existingJobs","toArray","existingIds","Set","jobsToAdd","filter","has"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/database.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission, TimelineEntry } from '../types';\r\nimport { mockJobs } from './mockData';\r\n\r\nexport class TalentFlowDatabase extends Dexie {\r\n  jobs!: Table<Job>;\r\n  candidates!: Table<Candidate>;\r\n  assessments!: Table<Assessment>;\r\n  submissions!: Table<AssessmentSubmission>;\r\n  timeline!: Table<TimelineEntry>;\r\n\r\n  constructor() {\r\n    super('TalentFlowDatabase');\r\n    this.version(1).stores({\r\n      jobs: 'id, title, slug, status, order, createdAt',\r\n      candidates: 'id, name, email, stage, jobId, appliedAt',\r\n      assessments: 'id, jobId, title, createdAt',\r\n      submissions: 'id, jobId, candidateId, submittedAt',\r\n      timeline: 'id, candidateId, stage, timestamp'\r\n    });\r\n  }\r\n}\r\n\r\nexport const db = new TalentFlowDatabase();\r\n\r\n// Initialize database with seed data\r\nexport const initializeDatabase = async () => {\r\n  try {\r\n    const jobCount = await db.jobs.count();\r\n    console.log('Current job count:', jobCount);\r\n\r\n    if (jobCount === 0) {\r\n      console.log('Seeding database with initial data...');\r\n      await seedDatabase();\r\n      console.log('Database seeded successfully');\r\n    } else if (jobCount < 30) {\r\n      console.log('Adding additional test jobs...');\r\n      await addTestJobs();\r\n      console.log('Additional jobs added');\r\n    } else {\r\n      console.log('Database already has sufficient test data');\r\n    }\r\n\r\n    // Check if jobs have slugs, if not, add them\r\n    const firstJob = await db.jobs.orderBy('id').first();\r\n    if (firstJob && !firstJob.slug) {\r\n      console.log('Adding slugs to existing jobs...');\r\n      const { updateJobsWithSlugs } = await import('../utils/updateSlugs');\r\n      await updateJobsWithSlugs();\r\n      console.log('Slugs added to existing jobs');\r\n    }\r\n\r\n    const finalCount = await db.jobs.count();\r\n    console.log('Final job count:', finalCount);\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n  }\r\n};\r\n\r\nconst seedDatabase = async () => {\r\n  // Generate 30 jobs with slugs\r\n  const jobTitles = [\r\n    'Senior Frontend Developer - TechCorp',\r\n    'Backend Developer - DataFlow', \r\n    'Full Stack Developer - CloudTech',\r\n    'DevOps Engineer - InfraCorp',\r\n    'Mobile App Developer - AppWorks',\r\n    'Data Scientist - AnalyticsPro',\r\n    'UI/UX Designer - DesignStudio',\r\n    'Security Engineer - SecureNet',\r\n    'Product Manager - ProductLabs',\r\n    'QA Engineer - QualityFirst',\r\n    'Blockchain Developer - CryptoTech',\r\n    'AI/ML Engineer - BrainTech',\r\n    'Database Administrator - DataCorp',\r\n    'Technical Writer - DocuTech',\r\n    'Site Reliability Engineer - UptimeCorp',\r\n    'Game Developer - GameStudio',\r\n    'Systems Architect - ArchTech',\r\n    'Frontend Developer - StartupXYZ',\r\n    'Backend Developer - EcommercePlus',\r\n    'Mobile Developer - HealthTech',\r\n    'Data Engineer - BigData Inc',\r\n    'Cybersecurity Analyst - SecureCorp',\r\n    'Full Stack Developer - SaaS Company',\r\n    'Machine Learning Engineer - AI Startup',\r\n    'DevOps Engineer - FinTech',\r\n    'Software Engineer - TestCompany',\r\n    'UX Designer - CreativeAgency',\r\n    'Data Analyst - AnalyticsCorp',\r\n    'Project Manager - TechSolutions',\r\n    'Marketing Specialist - GrowthCo'\r\n  ];\r\n\r\n  const generateSlug = (title: string) => {\r\n    return title.toLowerCase().replace(/[^a-z0-9\\s-]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-').trim().replace(/^-|-$/g, '');\r\n  };\r\n\r\n  const generatedJobs = jobTitles.map((title, index) => ({\r\n    id: `job-${index + 1}`,\r\n    title,\r\n    slug: generateSlug(title),\r\n    description: `Join our team as a ${title.split(' - ')[0]}. We're looking for talented individuals to help us build the future.`,\r\n    location: ['San Francisco, CA', 'New York, NY', 'Remote', 'Seattle, WA', 'Austin, TX'][index % 5],\r\n    status: index < 25 ? 'active' : 'archived',\r\n    tags: ['JavaScript', 'React', 'Node.js', 'TypeScript', 'Python'].slice(0, Math.floor(Math.random() * 3) + 2),\r\n    order: index + 1,\r\n    createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }));\r\n\r\n  await db.jobs.bulkAdd(generatedJobs as Job[]);\r\n\r\n  // Seed Candidates\r\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  const candidates: Candidate[] = Array.from({ length: 1000 }, (_, i) => {\r\n    const jobId = `job-${Math.floor(Math.random() * 30) + 1}`;\r\n    const stage = stages[Math.floor(Math.random() * stages.length)];\r\n    const appliedAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString();\r\n\r\n    return {\r\n      id: `candidate-${i + 1}`,\r\n      name: `Candidate ${i + 1}`,\r\n      email: `candidate${i + 1}@example.com`,\r\n      phone: `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,\r\n      resume: `Resume for Candidate ${i + 1}`,\r\n      status: 'active',\r\n      stage,\r\n      jobId,\r\n      appliedAt,\r\n      timeline: [\r\n        {\r\n          id: `timeline-${i + 1}-1`,\r\n          stage: 'applied',\r\n          timestamp: appliedAt,\r\n          notes: 'Application submitted'\r\n        }\r\n      ]\r\n    };\r\n  });\r\n\r\n  await db.candidates.bulkAdd(candidates);\r\n\r\n  // Seed Assessments\r\n  const assessments: Assessment[] = ['job-1', 'job-2', 'job-3'].map((jobId, i) => ({\r\n    id: `assessment-${job.id}`,\r\n    jobId: job.id,\r\n    title: `${job.title} Assessment`,\r\n    description: `Technical assessment for ${job.title} position`,\r\n    sections: [\r\n      {\r\n        id: `section-${i + 1}-1`,\r\n        title: 'Technical Skills',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-1`,\r\n            type: 'single-choice',\r\n            title: 'What is your experience with React?',\r\n            description: 'Select your level of experience',\r\n            required: true,\r\n            options: ['Beginner', 'Intermediate', 'Advanced', 'Expert']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-2`,\r\n            type: 'multi-choice',\r\n            title: 'Which technologies have you worked with?',\r\n            description: 'Select all that apply',\r\n            required: true,\r\n            options: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-3`,\r\n            type: 'short-text',\r\n            title: 'Years of experience',\r\n            description: 'How many years of professional experience do you have?',\r\n            required: true,\r\n            validation: { min: 0, max: 50 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-4`,\r\n            type: 'long-text',\r\n            title: 'Describe your most challenging project',\r\n            description: 'Tell us about a challenging project you worked on',\r\n            required: true,\r\n            validation: { maxLength: 1000 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-5`,\r\n            type: 'numeric',\r\n            title: 'Expected salary range (in thousands)',\r\n            description: 'What is your expected salary range?',\r\n            required: false,\r\n            validation: { min: 30, max: 300 }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: `section-${i + 1}-2`,\r\n        title: 'Behavioral Questions',\r\n        questions: [\r\n          {\r\n            id: `q-${i + 1}-6`,\r\n            type: 'single-choice',\r\n            title: 'Do you prefer working in teams?',\r\n            description: 'Select your preference',\r\n            required: true,\r\n            options: ['Yes', 'No', 'Sometimes']\r\n          },\r\n          {\r\n            id: `q-${i + 1}-7`,\r\n            type: 'long-text',\r\n            title: 'Team collaboration experience',\r\n            description: 'Describe your experience working in teams',\r\n            required: true,\r\n            conditional: {\r\n              dependsOn: `q-${i + 1}-6`,\r\n              condition: 'equals',\r\n              value: 'Yes'\r\n            },\r\n            validation: { maxLength: 500 }\r\n          },\r\n          {\r\n            id: `q-${i + 1}-8`,\r\n            type: 'file-upload',\r\n            title: 'Portfolio or work samples',\r\n            description: 'Upload your portfolio or work samples',\r\n            required: false\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }));\r\n\r\n  await db.assessments.bulkAdd(assessments);\r\n};\r\n\r\nconst addTestJobs = async () => {\r\n  // Add any missing test jobs from the mock data\r\n  const existingJobs = await db.jobs.toArray();\r\n  const existingIds = new Set(existingJobs.map(job => job.id));\r\n\r\n  const jobsToAdd = mockJobs.filter(job => !existingIds.has(job.id));\r\n\r\n  if (jobsToAdd.length > 0) {\r\n    await db.jobs.bulkAdd(jobsToAdd as Job[]);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}