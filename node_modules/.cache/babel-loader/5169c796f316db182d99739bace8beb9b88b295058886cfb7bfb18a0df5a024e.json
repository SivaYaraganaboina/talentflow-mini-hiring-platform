{"ast":null,"code":"import { until } from \"@open-draft/until\";\nimport { executeHandlers } from './executeHandlers.mjs';\nimport { onUnhandledRequest } from './request/onUnhandledRequest.mjs';\nimport { storeResponseCookies } from './request/storeResponseCookies.mjs';\nasync function handleRequest(request, requestId, handlers, options, emitter, handleRequestOptions) {\n  emitter.emit(\"request:start\", {\n    request,\n    requestId\n  });\n  if (request.headers.get(\"accept\")?.includes(\"msw/passthrough\")) {\n    emitter.emit(\"request:end\", {\n      request,\n      requestId\n    });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  const lookupResult = await until(() => {\n    return executeHandlers({\n      request,\n      requestId,\n      handlers,\n      resolutionContext: handleRequestOptions?.resolutionContext\n    });\n  });\n  if (lookupResult.error) {\n    emitter.emit(\"unhandledException\", {\n      error: lookupResult.error,\n      request,\n      requestId\n    });\n    throw lookupResult.error;\n  }\n  if (!lookupResult.data) {\n    await onUnhandledRequest(request, options.onUnhandledRequest);\n    emitter.emit(\"request:unhandled\", {\n      request,\n      requestId\n    });\n    emitter.emit(\"request:end\", {\n      request,\n      requestId\n    });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  const {\n    response\n  } = lookupResult.data;\n  if (!response) {\n    emitter.emit(\"request:end\", {\n      request,\n      requestId\n    });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  if (response.status === 302 && response.headers.get(\"x-msw-intention\") === \"passthrough\") {\n    emitter.emit(\"request:end\", {\n      request,\n      requestId\n    });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  await storeResponseCookies(request, response);\n  emitter.emit(\"request:match\", {\n    request,\n    requestId\n  });\n  const requiredLookupResult = lookupResult.data;\n  handleRequestOptions?.onMockedResponse?.(response, requiredLookupResult);\n  emitter.emit(\"request:end\", {\n    request,\n    requestId\n  });\n  return response;\n}\nexport { handleRequest };\n//# sourceMappingURL=handleRequest.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}