{"ast":null,"code":"import { http, HttpResponse } from 'msw';\nimport { setupWorker } from 'msw/browser';\nimport { db } from './database';\n// Utility function to simulate network delay and errors\nconst simulateNetworkDelay = () => {\n  return new Promise((resolve, reject) => {\n    const delay = Math.random() * 1000 + 200; // 200-1200ms delay\n    const shouldError = Math.random() < 0.08; // 8% error rate\n\n    setTimeout(() => {\n      if (shouldError) {\n        reject(new Error('Network error'));\n      } else {\n        resolve(undefined);\n      }\n    }, delay);\n  });\n};\nconst handlers = [\n// Jobs endpoints\nhttp.get('/api/jobs', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const url = new URL(request.url);\n    const search = url.searchParams.get('search') || '';\n    const status = url.searchParams.get('status') || '';\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\n    const sort = url.searchParams.get('sort') || 'order';\n    let query = db.jobs.orderBy(sort);\n    if (status) {\n      query = query.filter(job => job.status === status);\n    }\n    if (search) {\n      query = query.filter(job => job.title.toLowerCase().includes(search.toLowerCase()) || job.tags.some(tag => tag.toLowerCase().includes(search.toLowerCase())));\n    }\n    const total = await query.count();\n    const jobs = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\n    const response = {\n      data: jobs,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        totalPages: Math.ceil(total / pageSize)\n      }\n    };\n    return HttpResponse.json(response);\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}), http.post('/api/jobs', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const jobData = await request.json();\n    const newJob = {\n      id: `job-${Date.now()}`,\n      title: jobData.title || '',\n      description: jobData.description || '',\n      location: jobData.location || '',\n      status: jobData.status || 'active',\n      tags: jobData.tags || [],\n      order: jobData.order || 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await db.jobs.add(newJob);\n    return HttpResponse.json({\n      data: newJob\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to create job'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/jobs/:id', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const updates = await request.json();\n    await db.jobs.update(id, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n    const updatedJob = await db.jobs.get(id);\n    return HttpResponse.json({\n      data: updatedJob\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to update job'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/jobs/:id/reorder', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const {\n      fromOrder,\n      toOrder\n    } = await request.json();\n\n    // Simulate occasional failure for rollback testing\n    if (Math.random() < 0.1) {\n      return HttpResponse.json({\n        error: 'Reorder failed'\n      }, {\n        status: 500\n      });\n    }\n\n    // Update job order\n    await db.jobs.update(id, {\n      order: toOrder\n    });\n\n    // Update other jobs' orders\n    const jobs = await db.jobs.orderBy('order').toArray();\n    for (const job of jobs) {\n      if (job.id !== id) {\n        if (fromOrder < toOrder && job.order > fromOrder && job.order <= toOrder) {\n          await db.jobs.update(job.id, {\n            order: job.order - 1\n          });\n        } else if (fromOrder > toOrder && job.order >= toOrder && job.order < fromOrder) {\n          await db.jobs.update(job.id, {\n            order: job.order + 1\n          });\n        }\n      }\n    }\n    return HttpResponse.json({\n      success: true\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Reorder failed'\n    }, {\n      status: 500\n    });\n  }\n}), http.get('/api/jobs/:id', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const job = await db.jobs.get(id);\n    if (!job) {\n      return HttpResponse.json({\n        error: 'Job not found'\n      }, {\n        status: 404\n      });\n    }\n    return HttpResponse.json({\n      data: job\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}),\n// Candidates endpoints\nhttp.get('/api/candidates', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const url = new URL(request.url);\n    const search = url.searchParams.get('search') || '';\n    const stage = url.searchParams.get('stage') || '';\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '50');\n    let query = db.candidates.orderBy('appliedAt').reverse();\n    if (stage) {\n      query = query.filter(candidate => candidate.stage === stage);\n    }\n    if (search) {\n      query = query.filter(candidate => candidate.name.toLowerCase().includes(search.toLowerCase()) || candidate.email.toLowerCase().includes(search.toLowerCase()));\n    }\n    const total = await query.count();\n    const candidates = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\n    const response = {\n      data: candidates,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        totalPages: Math.ceil(total / pageSize)\n      }\n    };\n    return HttpResponse.json(response);\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}), http.post('/api/candidates', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const candidateData = await request.json();\n    const newCandidate = {\n      id: `candidate-${Date.now()}`,\n      name: candidateData.name || '',\n      email: candidateData.email || '',\n      phone: candidateData.phone || '',\n      resume: candidateData.resume || '',\n      status: candidateData.status || 'active',\n      stage: candidateData.stage || 'applied',\n      jobId: candidateData.jobId || '',\n      appliedAt: new Date().toISOString(),\n      timeline: [{\n        id: `timeline-${Date.now()}`,\n        stage: candidateData.stage || 'applied',\n        timestamp: new Date().toISOString(),\n        notes: 'Application submitted'\n      }]\n    };\n    await db.candidates.add(newCandidate);\n    return HttpResponse.json({\n      data: newCandidate\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to create candidate'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/candidates/:id', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const updates = await request.json();\n    const candidate = await db.candidates.get(id);\n    if (!candidate) {\n      return HttpResponse.json({\n        error: 'Candidate not found'\n      }, {\n        status: 404\n      });\n    }\n\n    // If stage is being updated, add timeline entry\n    if (updates.stage && updates.stage !== candidate.stage) {\n      const timelineEntry = {\n        id: `timeline-${Date.now()}`,\n        stage: updates.stage,\n        timestamp: new Date().toISOString(),\n        notes: updates.notes || `Moved to ${updates.stage}`\n      };\n      candidate.timeline.push(timelineEntry);\n      updates.timeline = candidate.timeline;\n    }\n    await db.candidates.update(id, updates);\n    const updatedCandidate = await db.candidates.get(id);\n    return HttpResponse.json({\n      data: updatedCandidate\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to update candidate'\n    }, {\n      status: 500\n    });\n  }\n}), http.get('/api/candidates/:id/timeline', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const candidate = await db.candidates.get(id);\n    if (!candidate) {\n      return HttpResponse.json({\n        error: 'Candidate not found'\n      }, {\n        status: 404\n      });\n    }\n    return HttpResponse.json({\n      data: candidate.timeline\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}),\n// Assessments endpoints\nhttp.get('/api/assessments/:jobId', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const assessment = await db.assessments.where('jobId').equals(jobId).first();\n    return HttpResponse.json({\n      data: assessment || null\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}), http.put('/api/assessments/:jobId', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const assessmentData = await request.json();\n    const existingAssessment = await db.assessments.where('jobId').equals(jobId).first();\n    if (existingAssessment) {\n      await db.assessments.update(existingAssessment.id, {\n        ...assessmentData,\n        updatedAt: new Date().toISOString()\n      });\n      const updated = await db.assessments.get(existingAssessment.id);\n      return HttpResponse.json({\n        data: updated\n      });\n    } else {\n      const newAssessment = {\n        id: `assessment-${Date.now()}`,\n        jobId: jobId,\n        title: assessmentData.title || '',\n        description: assessmentData.description || '',\n        sections: assessmentData.sections || [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      await db.assessments.add(newAssessment);\n      return HttpResponse.json({\n        data: newAssessment\n      });\n    }\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to save assessment'\n    }, {\n      status: 500\n    });\n  }\n}), http.post('/api/assessments/:jobId/submit', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const submissionData = await request.json();\n    const submission = {\n      id: `submission-${Date.now()}`,\n      jobId: jobId,\n      candidateId: submissionData.candidateId || '',\n      responses: submissionData.responses || {},\n      submittedAt: new Date().toISOString()\n    };\n    await db.submissions.add(submission);\n    return HttpResponse.json({\n      data: submission\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to submit assessment'\n    }, {\n      status: 500\n    });\n  }\n})];\nexport const worker = setupWorker(...handlers);","map":{"version":3,"names":["http","HttpResponse","setupWorker","db","simulateNetworkDelay","Promise","resolve","reject","delay","Math","random","shouldError","setTimeout","Error","undefined","handlers","get","request","url","URL","search","searchParams","status","page","parseInt","pageSize","sort","query","jobs","orderBy","filter","job","title","toLowerCase","includes","tags","some","tag","total","count","offset","limit","toArray","response","data","pagination","totalPages","ceil","json","error","post","jobData","newJob","id","Date","now","description","location","order","createdAt","toISOString","updatedAt","add","patch","params","updates","update","updatedJob","fromOrder","toOrder","success","stage","candidates","reverse","candidate","name","email","candidateData","newCandidate","phone","resume","jobId","appliedAt","timeline","timestamp","notes","timelineEntry","push","updatedCandidate","assessment","assessments","where","equals","first","put","assessmentData","existingAssessment","updated","newAssessment","sections","submissionData","submission","candidateId","responses","submittedAt","submissions","worker"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/mockApi.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport { setupWorker } from 'msw/browser';\r\nimport { db } from './database';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission, ApiResponse, PaginationParams } from '../types';\r\n\r\n// Utility function to simulate network delay and errors\r\nconst simulateNetworkDelay = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = Math.random() * 1000 + 200; // 200-1200ms delay\r\n    const shouldError = Math.random() < 0.08; // 8% error rate\r\n    \r\n    setTimeout(() => {\r\n      if (shouldError) {\r\n        reject(new Error('Network error'));\r\n      } else {\r\n        resolve(undefined);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst handlers = [\r\n  // Jobs endpoints\r\n  http.get('/api/jobs', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const url = new URL(request.url);\r\n      const search = url.searchParams.get('search') || '';\r\n      const status = url.searchParams.get('status') || '';\r\n      const page = parseInt(url.searchParams.get('page') || '1');\r\n      const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\r\n      const sort = url.searchParams.get('sort') || 'order';\r\n\r\n      let query = db.jobs.orderBy(sort);\r\n      \r\n      if (status) {\r\n        query = query.filter(job => job.status === status);\r\n      }\r\n      \r\n      if (search) {\r\n        query = query.filter(job => \r\n          job.title.toLowerCase().includes(search.toLowerCase()) ||\r\n          job.tags.some(tag => tag.toLowerCase().includes(search.toLowerCase()))\r\n        );\r\n      }\r\n\r\n      const total = await query.count();\r\n      const jobs = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\r\n\r\n      const response: ApiResponse<Job[]> = {\r\n        data: jobs,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total,\r\n          totalPages: Math.ceil(total / pageSize)\r\n        }\r\n      };\r\n\r\n      return HttpResponse.json(response);\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/jobs', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const jobData = await request.json() as Partial<Job>;\r\n      const newJob: Job = {\r\n        id: `job-${Date.now()}`,\r\n        title: jobData.title || '',\r\n        description: jobData.description || '',\r\n        location: jobData.location || '',\r\n        status: jobData.status || 'active',\r\n        tags: jobData.tags || [],\r\n        order: jobData.order || 0,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      await db.jobs.add(newJob);\r\n      return HttpResponse.json({ data: newJob });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to create job' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/jobs/:id', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { id } = params;\r\n      const updates = await request.json() as Partial<Job>;\r\n      \r\n      await db.jobs.update(id as string, {\r\n        ...updates,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      const updatedJob = await db.jobs.get(id as string);\r\n      return HttpResponse.json({ data: updatedJob });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to update job' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/jobs/:id/reorder', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const { fromOrder, toOrder } = await request.json() as { fromOrder: number; toOrder: number };\r\n\r\n      // Simulate occasional failure for rollback testing\r\n      if (Math.random() < 0.1) {\r\n        return HttpResponse.json({ error: 'Reorder failed' }, { status: 500 });\r\n      }\r\n\r\n      // Update job order\r\n      await db.jobs.update(id as string, { order: toOrder });\r\n\r\n      // Update other jobs' orders\r\n      const jobs = await db.jobs.orderBy('order').toArray();\r\n      for (const job of jobs) {\r\n        if (job.id !== id) {\r\n          if (fromOrder < toOrder && job.order > fromOrder && job.order <= toOrder) {\r\n            await db.jobs.update(job.id, { order: job.order - 1 });\r\n          } else if (fromOrder > toOrder && job.order >= toOrder && job.order < fromOrder) {\r\n            await db.jobs.update(job.id, { order: job.order + 1 });\r\n          }\r\n        }\r\n      }\r\n\r\n      return HttpResponse.json({ success: true });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Reorder failed' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.get('/api/jobs/:id', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const job = await db.jobs.get(id as string);\r\n\r\n      if (!job) {\r\n        return HttpResponse.json({ error: 'Job not found' }, { status: 404 });\r\n      }\r\n\r\n      return HttpResponse.json({ data: job });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  // Candidates endpoints\r\n  http.get('/api/candidates', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const url = new URL(request.url);\r\n      const search = url.searchParams.get('search') || '';\r\n      const stage = url.searchParams.get('stage') || '';\r\n      const page = parseInt(url.searchParams.get('page') || '1');\r\n      const pageSize = parseInt(url.searchParams.get('pageSize') || '50');\r\n\r\n      let query = db.candidates.orderBy('appliedAt').reverse();\r\n      \r\n      if (stage) {\r\n        query = query.filter(candidate => candidate.stage === stage);\r\n      }\r\n      \r\n      if (search) {\r\n        query = query.filter(candidate => \r\n          candidate.name.toLowerCase().includes(search.toLowerCase()) ||\r\n          candidate.email.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n      }\r\n\r\n      const total = await query.count();\r\n      const candidates = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\r\n\r\n      const response: ApiResponse<Candidate[]> = {\r\n        data: candidates,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total,\r\n          totalPages: Math.ceil(total / pageSize)\r\n        }\r\n      };\r\n\r\n      return HttpResponse.json(response);\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/candidates', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const candidateData = await request.json() as Partial<Candidate>;\r\n      const newCandidate: Candidate = {\r\n        id: `candidate-${Date.now()}`,\r\n        name: candidateData.name || '',\r\n        email: candidateData.email || '',\r\n        phone: candidateData.phone || '',\r\n        resume: candidateData.resume || '',\r\n        status: candidateData.status || 'active',\r\n        stage: candidateData.stage || 'applied',\r\n        jobId: candidateData.jobId || '',\r\n        appliedAt: new Date().toISOString(),\r\n        timeline: [\r\n          {\r\n            id: `timeline-${Date.now()}`,\r\n            stage: candidateData.stage || 'applied',\r\n            timestamp: new Date().toISOString(),\r\n            notes: 'Application submitted'\r\n          }\r\n        ]\r\n      };\r\n\r\n      await db.candidates.add(newCandidate);\r\n      return HttpResponse.json({ data: newCandidate });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to create candidate' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/candidates/:id', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { id } = params;\r\n      const updates = await request.json() as Partial<Candidate> & { notes?: string };\r\n      \r\n      const candidate = await db.candidates.get(id as string);\r\n      if (!candidate) {\r\n        return HttpResponse.json({ error: 'Candidate not found' }, { status: 404 });\r\n      }\r\n\r\n      // If stage is being updated, add timeline entry\r\n      if (updates.stage && updates.stage !== candidate.stage) {\r\n        const timelineEntry = {\r\n          id: `timeline-${Date.now()}`,\r\n          stage: updates.stage,\r\n          timestamp: new Date().toISOString(),\r\n          notes: updates.notes || `Moved to ${updates.stage}`\r\n        };\r\n        \r\n        candidate.timeline.push(timelineEntry);\r\n        updates.timeline = candidate.timeline;\r\n      }\r\n\r\n      await db.candidates.update(id as string, updates as Partial<Candidate>);\r\n      const updatedCandidate = await db.candidates.get(id as string);\r\n      \r\n      return HttpResponse.json({ data: updatedCandidate });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to update candidate' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.get('/api/candidates/:id/timeline', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { id } = params;\r\n      const candidate = await db.candidates.get(id as string);\r\n      \r\n      if (!candidate) {\r\n        return HttpResponse.json({ error: 'Candidate not found' }, { status: 404 });\r\n      }\r\n\r\n      return HttpResponse.json({ data: candidate.timeline });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  // Assessments endpoints\r\n  http.get('/api/assessments/:jobId', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { jobId } = params;\r\n      const assessment = await db.assessments.where('jobId').equals(jobId as string).first();\r\n      \r\n      return HttpResponse.json({ data: assessment || null });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.put('/api/assessments/:jobId', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { jobId } = params;\r\n      const assessmentData = await request.json() as Partial<Assessment>;\r\n\r\n      const existingAssessment = await db.assessments.where('jobId').equals(jobId as string).first();\r\n\r\n      if (existingAssessment) {\r\n        await db.assessments.update(existingAssessment.id, {\r\n          ...assessmentData,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n        const updated = await db.assessments.get(existingAssessment.id);\r\n        return HttpResponse.json({ data: updated });\r\n      } else {\r\n        const newAssessment: Assessment = {\r\n          id: `assessment-${Date.now()}`,\r\n          jobId: jobId as string,\r\n          title: assessmentData.title || '',\r\n          description: assessmentData.description || '',\r\n          sections: assessmentData.sections || [],\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n\r\n        await db.assessments.add(newAssessment);\r\n        return HttpResponse.json({ data: newAssessment });\r\n      }\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to save assessment' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/assessments/:jobId/submit', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { jobId } = params;\r\n      const submissionData = await request.json() as Partial<AssessmentSubmission>;\r\n\r\n      const submission: AssessmentSubmission = {\r\n        id: `submission-${Date.now()}`,\r\n        jobId: jobId as string,\r\n        candidateId: submissionData.candidateId || '',\r\n        responses: submissionData.responses || {},\r\n        submittedAt: new Date().toISOString()\r\n      };\r\n\r\n      await db.submissions.add(submission);\r\n      return HttpResponse.json({ data: submission });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to submit assessment' }, { status: 500 });\r\n    }\r\n  })\r\n];\r\n\r\nexport const worker = setupWorker(...handlers);\r\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,YAAY,QAAQ,KAAK;AACxC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,EAAE,QAAQ,YAAY;AAG/B;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;IAC1C,MAAMC,WAAW,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;IAE1CE,UAAU,CAAC,MAAM;MACf,IAAID,WAAW,EAAE;QACfJ,MAAM,CAAC,IAAIM,KAAK,CAAC,eAAe,CAAC,CAAC;MACpC,CAAC,MAAM;QACLP,OAAO,CAACQ,SAAS,CAAC;MACpB;IACF,CAAC,EAAEN,KAAK,CAAC;EACX,CAAC,CAAC;AACJ,CAAC;AAED,MAAMO,QAAQ,GAAG;AACf;AACAf,IAAI,CAACgB,GAAG,CAAC,WAAW,EAAE,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAC3C,IAAI;IACF,MAAMb,oBAAoB,CAAC,CAAC;IAE5B,MAAMc,GAAG,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACC,GAAG,CAAC;IAChC,MAAME,MAAM,GAAGF,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;IACnD,MAAMM,MAAM,GAAGJ,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;IACnD,MAAMO,IAAI,GAAGC,QAAQ,CAACN,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;IAC1D,MAAMS,QAAQ,GAAGD,QAAQ,CAACN,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IACnE,MAAMU,IAAI,GAAGR,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;IAEpD,IAAIW,KAAK,GAAGxB,EAAE,CAACyB,IAAI,CAACC,OAAO,CAACH,IAAI,CAAC;IAEjC,IAAIJ,MAAM,EAAE;MACVK,KAAK,GAAGA,KAAK,CAACG,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACT,MAAM,KAAKA,MAAM,CAAC;IACpD;IAEA,IAAIF,MAAM,EAAE;MACVO,KAAK,GAAGA,KAAK,CAACG,MAAM,CAACC,GAAG,IACtBA,GAAG,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,MAAM,CAACa,WAAW,CAAC,CAAC,CAAC,IACtDF,GAAG,CAACI,IAAI,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,MAAM,CAACa,WAAW,CAAC,CAAC,CAAC,CACvE,CAAC;IACH;IAEA,MAAMK,KAAK,GAAG,MAAMX,KAAK,CAACY,KAAK,CAAC,CAAC;IACjC,MAAMX,IAAI,GAAG,MAAMD,KAAK,CAACa,MAAM,CAAC,CAACjB,IAAI,GAAG,CAAC,IAAIE,QAAQ,CAAC,CAACgB,KAAK,CAAChB,QAAQ,CAAC,CAACiB,OAAO,CAAC,CAAC;IAEhF,MAAMC,QAA4B,GAAG;MACnCC,IAAI,EAAEhB,IAAI;MACViB,UAAU,EAAE;QACVtB,IAAI;QACJE,QAAQ;QACRa,KAAK;QACLQ,UAAU,EAAErC,IAAI,CAACsC,IAAI,CAACT,KAAK,GAAGb,QAAQ;MACxC;IACF,CAAC;IAED,OAAOxB,YAAY,CAAC+C,IAAI,CAACL,QAAQ,CAAC;EACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC,EAEFtB,IAAI,CAACkD,IAAI,CAAC,WAAW,EAAE,OAAO;EAAEjC;AAAQ,CAAC,KAAK;EAC5C,IAAI;IACF,MAAMb,oBAAoB,CAAC,CAAC;IAE5B,MAAM+C,OAAO,GAAG,MAAMlC,OAAO,CAAC+B,IAAI,CAAC,CAAiB;IACpD,MAAMI,MAAW,GAAG;MAClBC,EAAE,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACvBvB,KAAK,EAAEmB,OAAO,CAACnB,KAAK,IAAI,EAAE;MAC1BwB,WAAW,EAAEL,OAAO,CAACK,WAAW,IAAI,EAAE;MACtCC,QAAQ,EAAEN,OAAO,CAACM,QAAQ,IAAI,EAAE;MAChCnC,MAAM,EAAE6B,OAAO,CAAC7B,MAAM,IAAI,QAAQ;MAClCa,IAAI,EAAEgB,OAAO,CAAChB,IAAI,IAAI,EAAE;MACxBuB,KAAK,EAAEP,OAAO,CAACO,KAAK,IAAI,CAAC;MACzBC,SAAS,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;MACnCC,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACpC,CAAC;IAED,MAAMzD,EAAE,CAACyB,IAAI,CAACkC,GAAG,CAACV,MAAM,CAAC;IACzB,OAAOnD,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAEQ;IAAO,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC,EAEFtB,IAAI,CAAC+D,KAAK,CAAC,eAAe,EAAE,OAAO;EAAE9C,OAAO;EAAE+C;AAAO,CAAC,KAAK;EACzD,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAEiD;IAAG,CAAC,GAAGW,MAAM;IACrB,MAAMC,OAAO,GAAG,MAAMhD,OAAO,CAAC+B,IAAI,CAAC,CAAiB;IAEpD,MAAM7C,EAAE,CAACyB,IAAI,CAACsC,MAAM,CAACb,EAAE,EAAY;MACjC,GAAGY,OAAO;MACVJ,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMO,UAAU,GAAG,MAAMhE,EAAE,CAACyB,IAAI,CAACZ,GAAG,CAACqC,EAAY,CAAC;IAClD,OAAOpD,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAEuB;IAAW,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC,EAEFtB,IAAI,CAAC+D,KAAK,CAAC,uBAAuB,EAAE,OAAO;EAAE9C,OAAO;EAAE+C;AAAO,CAAC,KAAK;EACjE,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAEiD;IAAG,CAAC,GAAGW,MAAM;IACrB,MAAM;MAAEI,SAAS;MAAEC;IAAQ,CAAC,GAAG,MAAMpD,OAAO,CAAC+B,IAAI,CAAC,CAA2C;;IAE7F;IACA,IAAIvC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACvB,OAAOT,YAAY,CAAC+C,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAiB,CAAC,EAAE;QAAE3B,MAAM,EAAE;MAAI,CAAC,CAAC;IACxE;;IAEA;IACA,MAAMnB,EAAE,CAACyB,IAAI,CAACsC,MAAM,CAACb,EAAE,EAAY;MAAEK,KAAK,EAAEW;IAAQ,CAAC,CAAC;;IAEtD;IACA,MAAMzC,IAAI,GAAG,MAAMzB,EAAE,CAACyB,IAAI,CAACC,OAAO,CAAC,OAAO,CAAC,CAACa,OAAO,CAAC,CAAC;IACrD,KAAK,MAAMX,GAAG,IAAIH,IAAI,EAAE;MACtB,IAAIG,GAAG,CAACsB,EAAE,KAAKA,EAAE,EAAE;QACjB,IAAIe,SAAS,GAAGC,OAAO,IAAItC,GAAG,CAAC2B,KAAK,GAAGU,SAAS,IAAIrC,GAAG,CAAC2B,KAAK,IAAIW,OAAO,EAAE;UACxE,MAAMlE,EAAE,CAACyB,IAAI,CAACsC,MAAM,CAACnC,GAAG,CAACsB,EAAE,EAAE;YAAEK,KAAK,EAAE3B,GAAG,CAAC2B,KAAK,GAAG;UAAE,CAAC,CAAC;QACxD,CAAC,MAAM,IAAIU,SAAS,GAAGC,OAAO,IAAItC,GAAG,CAAC2B,KAAK,IAAIW,OAAO,IAAItC,GAAG,CAAC2B,KAAK,GAAGU,SAAS,EAAE;UAC/E,MAAMjE,EAAE,CAACyB,IAAI,CAACsC,MAAM,CAACnC,GAAG,CAACsB,EAAE,EAAE;YAAEK,KAAK,EAAE3B,GAAG,CAAC2B,KAAK,GAAG;UAAE,CAAC,CAAC;QACxD;MACF;IACF;IAEA,OAAOzD,YAAY,CAAC+C,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAiB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EACxE;AACF,CAAC,CAAC,EAEFtB,IAAI,CAACgB,GAAG,CAAC,eAAe,EAAE,OAAO;EAAEgD;AAAO,CAAC,KAAK;EAC9C,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAEiD;IAAG,CAAC,GAAGW,MAAM;IACrB,MAAMjC,GAAG,GAAG,MAAM5B,EAAE,CAACyB,IAAI,CAACZ,GAAG,CAACqC,EAAY,CAAC;IAE3C,IAAI,CAACtB,GAAG,EAAE;MACR,OAAO9B,YAAY,CAAC+C,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAgB,CAAC,EAAE;QAAE3B,MAAM,EAAE;MAAI,CAAC,CAAC;IACvE;IAEA,OAAOrB,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAEb;IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC;AAEF;AACAtB,IAAI,CAACgB,GAAG,CAAC,iBAAiB,EAAE,OAAO;EAAEC;AAAQ,CAAC,KAAK;EACjD,IAAI;IACF,MAAMb,oBAAoB,CAAC,CAAC;IAE5B,MAAMc,GAAG,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACC,GAAG,CAAC;IAChC,MAAME,MAAM,GAAGF,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;IACnD,MAAMuD,KAAK,GAAGrD,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE;IACjD,MAAMO,IAAI,GAAGC,QAAQ,CAACN,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;IAC1D,MAAMS,QAAQ,GAAGD,QAAQ,CAACN,GAAG,CAACG,YAAY,CAACL,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IAEnE,IAAIW,KAAK,GAAGxB,EAAE,CAACqE,UAAU,CAAC3C,OAAO,CAAC,WAAW,CAAC,CAAC4C,OAAO,CAAC,CAAC;IAExD,IAAIF,KAAK,EAAE;MACT5C,KAAK,GAAGA,KAAK,CAACG,MAAM,CAAC4C,SAAS,IAAIA,SAAS,CAACH,KAAK,KAAKA,KAAK,CAAC;IAC9D;IAEA,IAAInD,MAAM,EAAE;MACVO,KAAK,GAAGA,KAAK,CAACG,MAAM,CAAC4C,SAAS,IAC5BA,SAAS,CAACC,IAAI,CAAC1C,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,MAAM,CAACa,WAAW,CAAC,CAAC,CAAC,IAC3DyC,SAAS,CAACE,KAAK,CAAC3C,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,MAAM,CAACa,WAAW,CAAC,CAAC,CAC7D,CAAC;IACH;IAEA,MAAMK,KAAK,GAAG,MAAMX,KAAK,CAACY,KAAK,CAAC,CAAC;IACjC,MAAMiC,UAAU,GAAG,MAAM7C,KAAK,CAACa,MAAM,CAAC,CAACjB,IAAI,GAAG,CAAC,IAAIE,QAAQ,CAAC,CAACgB,KAAK,CAAChB,QAAQ,CAAC,CAACiB,OAAO,CAAC,CAAC;IAEtF,MAAMC,QAAkC,GAAG;MACzCC,IAAI,EAAE4B,UAAU;MAChB3B,UAAU,EAAE;QACVtB,IAAI;QACJE,QAAQ;QACRa,KAAK;QACLQ,UAAU,EAAErC,IAAI,CAACsC,IAAI,CAACT,KAAK,GAAGb,QAAQ;MACxC;IACF,CAAC;IAED,OAAOxB,YAAY,CAAC+C,IAAI,CAACL,QAAQ,CAAC;EACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC,EAEFtB,IAAI,CAACkD,IAAI,CAAC,iBAAiB,EAAE,OAAO;EAAEjC;AAAQ,CAAC,KAAK;EAClD,IAAI;IACF,MAAMb,oBAAoB,CAAC,CAAC;IAE5B,MAAMyE,aAAa,GAAG,MAAM5D,OAAO,CAAC+B,IAAI,CAAC,CAAuB;IAChE,MAAM8B,YAAuB,GAAG;MAC9BzB,EAAE,EAAE,aAAaC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC7BoB,IAAI,EAAEE,aAAa,CAACF,IAAI,IAAI,EAAE;MAC9BC,KAAK,EAAEC,aAAa,CAACD,KAAK,IAAI,EAAE;MAChCG,KAAK,EAAEF,aAAa,CAACE,KAAK,IAAI,EAAE;MAChCC,MAAM,EAAEH,aAAa,CAACG,MAAM,IAAI,EAAE;MAClC1D,MAAM,EAAEuD,aAAa,CAACvD,MAAM,IAAI,QAAQ;MACxCiD,KAAK,EAAEM,aAAa,CAACN,KAAK,IAAI,SAAS;MACvCU,KAAK,EAAEJ,aAAa,CAACI,KAAK,IAAI,EAAE;MAChCC,SAAS,EAAE,IAAI5B,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;MACnCuB,QAAQ,EAAE,CACR;QACE9B,EAAE,EAAE,YAAYC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC5BgB,KAAK,EAAEM,aAAa,CAACN,KAAK,IAAI,SAAS;QACvCa,SAAS,EAAE,IAAI9B,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;QACnCyB,KAAK,EAAE;MACT,CAAC;IAEL,CAAC;IAED,MAAMlF,EAAE,CAACqE,UAAU,CAACV,GAAG,CAACgB,YAAY,CAAC;IACrC,OAAO7E,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAEkC;IAAa,CAAC,CAAC;EAClD,CAAC,CAAC,OAAO7B,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA6B,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EACpF;AACF,CAAC,CAAC,EAEFtB,IAAI,CAAC+D,KAAK,CAAC,qBAAqB,EAAE,OAAO;EAAE9C,OAAO;EAAE+C;AAAO,CAAC,KAAK;EAC/D,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAEiD;IAAG,CAAC,GAAGW,MAAM;IACrB,MAAMC,OAAO,GAAG,MAAMhD,OAAO,CAAC+B,IAAI,CAAC,CAA4C;IAE/E,MAAM0B,SAAS,GAAG,MAAMvE,EAAE,CAACqE,UAAU,CAACxD,GAAG,CAACqC,EAAY,CAAC;IACvD,IAAI,CAACqB,SAAS,EAAE;MACd,OAAOzE,YAAY,CAAC+C,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAsB,CAAC,EAAE;QAAE3B,MAAM,EAAE;MAAI,CAAC,CAAC;IAC7E;;IAEA;IACA,IAAI2C,OAAO,CAACM,KAAK,IAAIN,OAAO,CAACM,KAAK,KAAKG,SAAS,CAACH,KAAK,EAAE;MACtD,MAAMe,aAAa,GAAG;QACpBjC,EAAE,EAAE,YAAYC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC5BgB,KAAK,EAAEN,OAAO,CAACM,KAAK;QACpBa,SAAS,EAAE,IAAI9B,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;QACnCyB,KAAK,EAAEpB,OAAO,CAACoB,KAAK,IAAI,YAAYpB,OAAO,CAACM,KAAK;MACnD,CAAC;MAEDG,SAAS,CAACS,QAAQ,CAACI,IAAI,CAACD,aAAa,CAAC;MACtCrB,OAAO,CAACkB,QAAQ,GAAGT,SAAS,CAACS,QAAQ;IACvC;IAEA,MAAMhF,EAAE,CAACqE,UAAU,CAACN,MAAM,CAACb,EAAE,EAAYY,OAA6B,CAAC;IACvE,MAAMuB,gBAAgB,GAAG,MAAMrF,EAAE,CAACqE,UAAU,CAACxD,GAAG,CAACqC,EAAY,CAAC;IAE9D,OAAOpD,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAE4C;IAAiB,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOvC,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA6B,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EACpF;AACF,CAAC,CAAC,EAEFtB,IAAI,CAACgB,GAAG,CAAC,8BAA8B,EAAE,OAAO;EAAEgD;AAAO,CAAC,KAAK;EAC7D,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAEiD;IAAG,CAAC,GAAGW,MAAM;IACrB,MAAMU,SAAS,GAAG,MAAMvE,EAAE,CAACqE,UAAU,CAACxD,GAAG,CAACqC,EAAY,CAAC;IAEvD,IAAI,CAACqB,SAAS,EAAE;MACd,OAAOzE,YAAY,CAAC+C,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAsB,CAAC,EAAE;QAAE3B,MAAM,EAAE;MAAI,CAAC,CAAC;IAC7E;IAEA,OAAOrB,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAE8B,SAAS,CAACS;IAAS,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOlC,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC;AAEF;AACAtB,IAAI,CAACgB,GAAG,CAAC,yBAAyB,EAAE,OAAO;EAAEgD;AAAO,CAAC,KAAK;EACxD,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAE6E;IAAM,CAAC,GAAGjB,MAAM;IACxB,MAAMyB,UAAU,GAAG,MAAMtF,EAAE,CAACuF,WAAW,CAACC,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM,CAACX,KAAe,CAAC,CAACY,KAAK,CAAC,CAAC;IAEtF,OAAO5F,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAE6C,UAAU,IAAI;IAAK,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC,EAEFtB,IAAI,CAAC8F,GAAG,CAAC,yBAAyB,EAAE,OAAO;EAAE7E,OAAO;EAAE+C;AAAO,CAAC,KAAK;EACjE,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAE6E;IAAM,CAAC,GAAGjB,MAAM;IACxB,MAAM+B,cAAc,GAAG,MAAM9E,OAAO,CAAC+B,IAAI,CAAC,CAAwB;IAElE,MAAMgD,kBAAkB,GAAG,MAAM7F,EAAE,CAACuF,WAAW,CAACC,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM,CAACX,KAAe,CAAC,CAACY,KAAK,CAAC,CAAC;IAE9F,IAAIG,kBAAkB,EAAE;MACtB,MAAM7F,EAAE,CAACuF,WAAW,CAACxB,MAAM,CAAC8B,kBAAkB,CAAC3C,EAAE,EAAE;QACjD,GAAG0C,cAAc;QACjBlC,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;MACpC,CAAC,CAAC;MACF,MAAMqC,OAAO,GAAG,MAAM9F,EAAE,CAACuF,WAAW,CAAC1E,GAAG,CAACgF,kBAAkB,CAAC3C,EAAE,CAAC;MAC/D,OAAOpD,YAAY,CAAC+C,IAAI,CAAC;QAAEJ,IAAI,EAAEqD;MAAQ,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL,MAAMC,aAAyB,GAAG;QAChC7C,EAAE,EAAE,cAAcC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC9B0B,KAAK,EAAEA,KAAe;QACtBjD,KAAK,EAAE+D,cAAc,CAAC/D,KAAK,IAAI,EAAE;QACjCwB,WAAW,EAAEuC,cAAc,CAACvC,WAAW,IAAI,EAAE;QAC7C2C,QAAQ,EAAEJ,cAAc,CAACI,QAAQ,IAAI,EAAE;QACvCxC,SAAS,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;QACnCC,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;MACpC,CAAC;MAED,MAAMzD,EAAE,CAACuF,WAAW,CAAC5B,GAAG,CAACoC,aAAa,CAAC;MACvC,OAAOjG,YAAY,CAAC+C,IAAI,CAAC;QAAEJ,IAAI,EAAEsD;MAAc,CAAC,CAAC;IACnD;EACF,CAAC,CAAC,OAAOjD,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA4B,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EACnF;AACF,CAAC,CAAC,EAEFtB,IAAI,CAACkD,IAAI,CAAC,gCAAgC,EAAE,OAAO;EAAEjC,OAAO;EAAE+C;AAAO,CAAC,KAAK;EACzE,IAAI;IACF,MAAM5D,oBAAoB,CAAC,CAAC;IAE5B,MAAM;MAAE6E;IAAM,CAAC,GAAGjB,MAAM;IACxB,MAAMoC,cAAc,GAAG,MAAMnF,OAAO,CAAC+B,IAAI,CAAC,CAAkC;IAE5E,MAAMqD,UAAgC,GAAG;MACvChD,EAAE,EAAE,cAAcC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC9B0B,KAAK,EAAEA,KAAe;MACtBqB,WAAW,EAAEF,cAAc,CAACE,WAAW,IAAI,EAAE;MAC7CC,SAAS,EAAEH,cAAc,CAACG,SAAS,IAAI,CAAC,CAAC;MACzCC,WAAW,EAAE,IAAIlD,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACtC,CAAC;IAED,MAAMzD,EAAE,CAACsG,WAAW,CAAC3C,GAAG,CAACuC,UAAU,CAAC;IACpC,OAAOpG,YAAY,CAAC+C,IAAI,CAAC;MAAEJ,IAAI,EAAEyD;IAAW,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOpD,KAAK,EAAE;IACd,OAAOhD,YAAY,CAAC+C,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA8B,CAAC,EAAE;MAAE3B,MAAM,EAAE;IAAI,CAAC,CAAC;EACrF;AACF,CAAC,CAAC,CACH;AAED,OAAO,MAAMoF,MAAM,GAAGxG,WAAW,CAAC,GAAGa,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}