{"ast":null,"code":"import { invariant } from \"outvariant\";\nimport { WebSocketHandler, kEmitter } from './handlers/WebSocketHandler.mjs';\nimport { isPath } from './utils/matching/matchRequestUrl.mjs';\nimport { WebSocketClientManager } from './ws/WebSocketClientManager.mjs';\nfunction isBroadcastChannelWithUnref(channel) {\n  return typeof Reflect.get(channel, \"unref\") !== \"undefined\";\n}\nconst webSocketChannel = new BroadcastChannel(\"msw:websocket-client-manager\");\nif (isBroadcastChannelWithUnref(webSocketChannel)) {\n  webSocketChannel.unref();\n}\nfunction createWebSocketLinkHandler(url) {\n  invariant(url, \"Expected a WebSocket server URL but got undefined\");\n  invariant(isPath(url), \"Expected a WebSocket server URL to be a valid path but got %s\", typeof url);\n  const clientManager = new WebSocketClientManager(webSocketChannel);\n  return {\n    get clients() {\n      return clientManager.clients;\n    },\n    addEventListener(event, listener) {\n      const handler = new WebSocketHandler(url);\n      handler[kEmitter].on(\"connection\", async ({\n        client\n      }) => {\n        await clientManager.addConnection(client);\n      });\n      handler[kEmitter].on(event, listener);\n      return handler;\n    },\n    broadcast(data) {\n      this.broadcastExcept([], data);\n    },\n    broadcastExcept(clients, data) {\n      const ignoreClients = Array.prototype.concat(clients).map(client => client.id);\n      clientManager.clients.forEach(otherClient => {\n        if (!ignoreClients.includes(otherClient.id)) {\n          otherClient.send(data);\n        }\n      });\n    }\n  };\n}\nconst ws = {\n  link: createWebSocketLinkHandler\n};\nexport { ws };\n//# sourceMappingURL=ws.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}