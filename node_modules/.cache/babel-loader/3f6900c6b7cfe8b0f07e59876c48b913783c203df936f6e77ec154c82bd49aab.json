{"ast":null,"code":"import cookieUtils from \"@bundled-es-modules/cookie\";\nimport { cookieStore } from '../cookieStore.mjs';\nfunction parseCookies(input) {\n  const parsedCookies = cookieUtils.parse(input);\n  const cookies = {};\n  for (const cookieName in parsedCookies) {\n    if (typeof parsedCookies[cookieName] !== \"undefined\") {\n      cookies[cookieName] = parsedCookies[cookieName];\n    }\n  }\n  return cookies;\n}\nfunction getAllDocumentCookies() {\n  return parseCookies(document.cookie);\n}\nfunction getDocumentCookies(request) {\n  if (typeof document === \"undefined\" || typeof location === \"undefined\") {\n    return {};\n  }\n  switch (request.credentials) {\n    case \"same-origin\":\n      {\n        const requestUrl = new URL(request.url);\n        return location.origin === requestUrl.origin ? getAllDocumentCookies() : {};\n      }\n    case \"include\":\n      {\n        return getAllDocumentCookies();\n      }\n    default:\n      {\n        return {};\n      }\n  }\n}\nfunction getAllRequestCookies(request) {\n  const requestCookieHeader = request.headers.get(\"cookie\");\n  const cookiesFromHeaders = requestCookieHeader ? parseCookies(requestCookieHeader) : {};\n  const cookiesFromDocument = getDocumentCookies(request);\n  for (const name in cookiesFromDocument) {\n    request.headers.append(\"cookie\", cookieUtils.serialize(name, cookiesFromDocument[name]));\n  }\n  const cookiesFromStore = cookieStore.getCookies(request.url);\n  const storedCookiesObject = Object.fromEntries(cookiesFromStore.map(cookie => [cookie.key, cookie.value]));\n  for (const cookie of cookiesFromStore) {\n    request.headers.append(\"cookie\", cookie.toString());\n  }\n  return {\n    ...cookiesFromDocument,\n    ...storedCookiesObject,\n    ...cookiesFromHeaders\n  };\n}\nexport { getAllRequestCookies };\n//# sourceMappingURL=getRequestCookies.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}