{"ast":null,"code":"import { DeferredPromise } from \"@open-draft/deferred-promise\";\nconst DB_NAME = \"msw-websocket-clients\";\nconst DB_STORE_NAME = \"clients\";\nclass WebSocketIndexedDBClientStore {\n  db;\n  constructor() {\n    this.db = this.createDatabase();\n  }\n  async add(client) {\n    const promise = new DeferredPromise();\n    const store = await this.getStore();\n    const request = store.put({\n      id: client.id,\n      url: client.url.href\n    });\n    request.onsuccess = () => {\n      promise.resolve();\n    };\n    request.onerror = () => {\n      console.error(request.error);\n      promise.reject(new Error(`Failed to add WebSocket client \"${client.id}\". There is likely an additional output above.`));\n    };\n    return promise;\n  }\n  async getAll() {\n    const promise = new DeferredPromise();\n    const store = await this.getStore();\n    const request = store.getAll();\n    request.onsuccess = () => {\n      promise.resolve(request.result);\n    };\n    request.onerror = () => {\n      console.log(request.error);\n      promise.reject(new Error(`Failed to get all WebSocket clients. There is likely an additional output above.`));\n    };\n    return promise;\n  }\n  async deleteMany(clientIds) {\n    const promise = new DeferredPromise();\n    const store = await this.getStore();\n    for (const clientId of clientIds) {\n      store.delete(clientId);\n    }\n    store.transaction.oncomplete = () => {\n      promise.resolve();\n    };\n    store.transaction.onerror = () => {\n      console.error(store.transaction.error);\n      promise.reject(new Error(`Failed to delete WebSocket clients [${clientIds.join(\", \")}]. There is likely an additional output above.`));\n    };\n    return promise;\n  }\n  async createDatabase() {\n    const promise = new DeferredPromise();\n    const request = indexedDB.open(DB_NAME, 1);\n    request.onsuccess = ({\n      currentTarget\n    }) => {\n      const db = Reflect.get(currentTarget, \"result\");\n      if (db.objectStoreNames.contains(DB_STORE_NAME)) {\n        return promise.resolve(db);\n      }\n    };\n    request.onupgradeneeded = async ({\n      currentTarget\n    }) => {\n      const db = Reflect.get(currentTarget, \"result\");\n      if (db.objectStoreNames.contains(DB_STORE_NAME)) {\n        return;\n      }\n      const store = db.createObjectStore(DB_STORE_NAME, {\n        keyPath: \"id\"\n      });\n      store.transaction.oncomplete = () => {\n        promise.resolve(db);\n      };\n      store.transaction.onerror = () => {\n        console.error(store.transaction.error);\n        promise.reject(new Error(\"Failed to create WebSocket client store. There is likely an additional output above.\"));\n      };\n    };\n    request.onerror = () => {\n      console.error(request.error);\n      promise.reject(new Error(\"Failed to open an IndexedDB database. There is likely an additional output above.\"));\n    };\n    return promise;\n  }\n  async getStore() {\n    const db = await this.db;\n    return db.transaction(DB_STORE_NAME, \"readwrite\").objectStore(DB_STORE_NAME);\n  }\n}\nexport { WebSocketIndexedDBClientStore };\n//# sourceMappingURL=WebSocketIndexedDBClientStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}