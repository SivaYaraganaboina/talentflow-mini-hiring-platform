{"ast":null,"code":"import { isNodeProcess } from \"is-node-process\";\nconst SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;\nconst MIN_SERVER_RESPONSE_TIME = 100;\nconst MAX_SERVER_RESPONSE_TIME = 400;\nconst NODE_SERVER_RESPONSE_TIME = 5;\nfunction getRealisticResponseTime() {\n  if (isNodeProcess()) {\n    return NODE_SERVER_RESPONSE_TIME;\n  }\n  return Math.floor(Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME);\n}\nasync function delay(durationOrMode) {\n  let delayTime;\n  if (typeof durationOrMode === \"string\") {\n    switch (durationOrMode) {\n      case \"infinite\":\n        {\n          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;\n          break;\n        }\n      case \"real\":\n        {\n          delayTime = getRealisticResponseTime();\n          break;\n        }\n      default:\n        {\n          throw new Error(`Failed to delay a response: unknown delay mode \"${durationOrMode}\". Please make sure you provide one of the supported modes (\"real\", \"infinite\") or a number.`);\n        }\n    }\n  } else if (typeof durationOrMode === \"undefined\") {\n    delayTime = getRealisticResponseTime();\n  } else {\n    if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n      throw new Error(`Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for \"setTimeout\" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the \"infinite\" delay mode to delay the response indefinitely.`);\n    }\n    delayTime = durationOrMode;\n  }\n  return new Promise(resolve => setTimeout(resolve, delayTime));\n}\nexport { MAX_SERVER_RESPONSE_TIME, MIN_SERVER_RESPONSE_TIME, NODE_SERVER_RESPONSE_TIME, SET_TIMEOUT_MAX_ALLOWED_INT, delay };\n//# sourceMappingURL=delay.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}