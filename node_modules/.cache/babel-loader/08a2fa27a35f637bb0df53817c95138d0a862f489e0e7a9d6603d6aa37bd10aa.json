{"ast":null,"code":"import { toPublicUrl } from './toPublicUrl.mjs';\nimport { InternalError, devUtils } from '../internal/devUtils.mjs';\nimport { isCommonAssetRequest } from '../../isCommonAssetRequest.mjs';\nasync function onUnhandledRequest(request, strategy = \"warn\") {\n  const url = new URL(request.url);\n  const publicUrl = toPublicUrl(url) + url.search;\n  const requestBody = request.method === \"HEAD\" || request.method === \"GET\" ? null : await request.clone().text();\n  const messageDetails = `\n\n  \\u2022 ${request.method} ${publicUrl}\n\n${requestBody ? `  \\u2022 Request body: ${requestBody}\n\n` : \"\"}`;\n  const unhandledRequestMessage = `intercepted a request without a matching request handler:${messageDetails}If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/http/intercepting-requests`;\n  function applyStrategy(strategy2) {\n    switch (strategy2) {\n      case \"error\":\n        {\n          devUtils.error(\"Error: %s\", unhandledRequestMessage);\n          throw new InternalError(devUtils.formatMessage('Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.'));\n        }\n      case \"warn\":\n        {\n          devUtils.warn(\"Warning: %s\", unhandledRequestMessage);\n          break;\n        }\n      case \"bypass\":\n        break;\n      default:\n        throw new InternalError(devUtils.formatMessage('Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.', strategy2));\n    }\n  }\n  if (typeof strategy === \"function\") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, \"warn\"),\n      error: applyStrategy.bind(null, \"error\")\n    });\n    return;\n  }\n  if (!isCommonAssetRequest(request)) {\n    applyStrategy(strategy);\n  }\n}\nexport { onUnhandledRequest };\n//# sourceMappingURL=onUnhandledRequest.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}