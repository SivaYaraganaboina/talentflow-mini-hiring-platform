{"ast":null,"code":"import { createRequestId } from \"@mswjs/interceptors\";\nimport { executeHandlers } from './utils/executeHandlers.mjs';\nconst getResponse = async (handlers, request, resolutionContext) => {\n  const result = await executeHandlers({\n    request,\n    requestId: createRequestId(),\n    handlers,\n    resolutionContext\n  });\n  return result?.response;\n};\nexport { getResponse };","map":{"version":3,"names":["createRequestId","executeHandlers","getResponse","handlers","request","resolutionContext","result","requestId","response"],"sources":["../../src/core/getResponse.ts"],"sourcesContent":["import { createRequestId } from '@mswjs/interceptors'\nimport type { RequestHandler } from './handlers/RequestHandler'\nimport {\n  executeHandlers,\n  type ResponseResolutionContext,\n} from './utils/executeHandlers'\n\n/**\n * Finds a response for the given request instance\n * in the array of request handlers.\n * @param handlers The array of request handlers.\n * @param request The `Request` instance.\n * @param resolutionContext Request resolution options.\n * @returns {Response} A mocked response, if any.\n */\nexport const getResponse = async (\n  handlers: Array<RequestHandler>,\n  request: Request,\n  resolutionContext?: ResponseResolutionContext,\n): Promise<Response | undefined> => {\n  const result = await executeHandlers({\n    request,\n    requestId: createRequestId(),\n    handlers,\n    resolutionContext,\n  })\n\n  return result?.response\n}\n"],"mappings":"AAAA,SAASA,eAAA,QAAuB;AAEhC,SACEC,eAAA,QAEK;AAUA,MAAMC,WAAA,GAAc,MAAAA,CACzBC,QAAA,EACAC,OAAA,EACAC,iBAAA,KACkC;EAClC,MAAMC,MAAA,GAAS,MAAML,eAAA,CAAgB;IACnCG,OAAA;IACAG,SAAA,EAAWP,eAAA,CAAgB;IAC3BG,QAAA;IACAE;EACF,CAAC;EAED,OAAOC,MAAA,EAAQE,QAAA;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module"}