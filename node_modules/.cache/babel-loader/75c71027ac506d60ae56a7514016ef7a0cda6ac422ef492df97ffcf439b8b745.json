{"ast":null,"code":"import { toPublicUrl } from '../request/toPublicUrl.mjs';\nimport { devUtils } from './devUtils.mjs';\nimport { jsonParse } from './jsonParse.mjs';\nimport { parseMultipartData } from './parseMultipartData.mjs';\nfunction parseDocumentNode(node) {\n  const operationDef = node.definitions.find(definition => {\n    return definition.kind === \"OperationDefinition\";\n  });\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value\n  };\n}\nasync function parseQuery(query) {\n  const {\n    parse\n  } = await import(\"graphql\").catch(error => {\n    console.error('[MSW] Failed to parse a GraphQL query: cannot import the \"graphql\" module. Please make sure you install it if you wish to intercept GraphQL requests. See the original import error below.');\n    throw error;\n  });\n  try {\n    const ast = parse(query);\n    return parseDocumentNode(ast);\n  } catch (error) {\n    return error;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = {\n    variables\n  };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(\".\").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nasync function getGraphQLInput(request) {\n  switch (request.method) {\n    case \"GET\":\n      {\n        const url = new URL(request.url);\n        const query = url.searchParams.get(\"query\");\n        const variables = url.searchParams.get(\"variables\") || \"\";\n        return {\n          query,\n          variables: jsonParse(variables)\n        };\n      }\n    case \"POST\":\n      {\n        const requestClone = request.clone();\n        if (request.headers.get(\"content-type\")?.includes(\"multipart/form-data\")) {\n          const responseJson = parseMultipartData(await requestClone.text(), request.headers);\n          if (!responseJson) {\n            return null;\n          }\n          const {\n            operations,\n            map,\n            ...files\n          } = responseJson;\n          const parsedOperations = jsonParse(operations) || {};\n          if (!parsedOperations.query) {\n            return null;\n          }\n          const parsedMap = jsonParse(map || \"\") || {};\n          const variables = parsedOperations.variables ? extractMultipartVariables(parsedOperations.variables, parsedMap, files) : {};\n          return {\n            query: parsedOperations.query,\n            variables\n          };\n        }\n        const requestJson = await requestClone.json().catch(() => null);\n        if (requestJson?.query) {\n          const {\n            query,\n            variables\n          } = requestJson;\n          return {\n            query,\n            variables\n          };\n        }\n        return null;\n      }\n    default:\n      return null;\n  }\n}\nasync function parseGraphQLRequest(request) {\n  const input = await getGraphQLInput(request);\n  if (!input || !input.query) {\n    return;\n  }\n  const {\n    query,\n    variables\n  } = input;\n  const parsedResult = await parseQuery(query);\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = toPublicUrl(request.url);\n    throw new Error(devUtils.formatMessage('Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s', request.method, requestPublicUrl, parsedResult.message));\n  }\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables\n  };\n}\nexport { parseDocumentNode, parseGraphQLRequest };\n//# sourceMappingURL=parseGraphQLRequest.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}