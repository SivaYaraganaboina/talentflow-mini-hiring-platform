{"ast":null,"code":"import { devUtils } from '../../utils/internal/devUtils.mjs';\nimport { getTimestamp } from '../../utils/logging/getTimestamp.mjs';\nimport { toPublicUrl } from '../../utils/request/toPublicUrl.mjs';\nimport { getMessageLength } from './getMessageLength.mjs';\nimport { getPublicData } from './getPublicData.mjs';\nconst colors = {\n  system: \"#3b82f6\",\n  outgoing: \"#22c55e\",\n  incoming: \"#ef4444\",\n  mocked: \"#ff6a33\"\n};\nfunction attachWebSocketLogger(connection) {\n  const {\n    client,\n    server\n  } = connection;\n  logConnectionOpen(client);\n  client.addEventListener(\"message\", event => {\n    logOutgoingClientMessage(event);\n  });\n  client.addEventListener(\"close\", event => {\n    logConnectionClose(event);\n  });\n  client.socket.addEventListener(\"error\", event => {\n    logClientError(event);\n  });\n  client.send = new Proxy(client.send, {\n    apply(target, thisArg, args) {\n      const [data] = args;\n      const messageEvent = new MessageEvent(\"message\", {\n        data\n      });\n      Object.defineProperties(messageEvent, {\n        currentTarget: {\n          enumerable: true,\n          writable: false,\n          value: client.socket\n        },\n        target: {\n          enumerable: true,\n          writable: false,\n          value: client.socket\n        }\n      });\n      queueMicrotask(() => {\n        logIncomingMockedClientMessage(messageEvent);\n      });\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n  server.addEventListener(\"open\", () => {\n    server.addEventListener(\"message\", event => {\n      logIncomingServerMessage(event);\n    });\n  }, {\n    once: true\n  });\n  server.send = new Proxy(server.send, {\n    apply(target, thisArg, args) {\n      const [data] = args;\n      const messageEvent = new MessageEvent(\"message\", {\n        data\n      });\n      Object.defineProperties(messageEvent, {\n        currentTarget: {\n          enumerable: true,\n          writable: false,\n          value: server.socket\n        },\n        target: {\n          enumerable: true,\n          writable: false,\n          value: server.socket\n        }\n      });\n      logOutgoingMockedClientMessage(messageEvent);\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n}\nfunction logConnectionOpen(client) {\n  const publicUrl = toPublicUrl(client.url);\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp()} %c\\u25B6%c ${publicUrl}`), `color:${colors.system}`, \"color:inherit\");\n  console.log(\"Client:\", client.socket);\n  console.groupEnd();\n}\nfunction logConnectionClose(event) {\n  const target = event.target;\n  const publicUrl = toPublicUrl(target.url);\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c\\u25A0%c ${publicUrl}`), `color:${colors.system}`, \"color:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nfunction logClientError(event) {\n  const socket = event.target;\n  const publicUrl = toPublicUrl(socket.url);\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c\\xD7%c ${publicUrl}`), `color:${colors.system}`, \"color:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nasync function logOutgoingClientMessage(event) {\n  const byteLength = getMessageLength(event.data);\n  const publicData = await getPublicData(event.data);\n  const arrow = event.defaultPrevented ? \"\\u21E1\" : \"\\u2B06\";\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c${arrow}%c ${publicData} %c${byteLength}%c`), `color:${colors.outgoing}`, \"color:inherit\", \"color:gray;font-weight:normal\", \"color:inherit;font-weight:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nasync function logOutgoingMockedClientMessage(event) {\n  const byteLength = getMessageLength(event.data);\n  const publicData = await getPublicData(event.data);\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c\\u2B06%c ${publicData} %c${byteLength}%c`), `color:${colors.mocked}`, \"color:inherit\", \"color:gray;font-weight:normal\", \"color:inherit;font-weight:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nasync function logIncomingMockedClientMessage(event) {\n  const byteLength = getMessageLength(event.data);\n  const publicData = await getPublicData(event.data);\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c\\u2B07%c ${publicData} %c${byteLength}%c`), `color:${colors.mocked}`, \"color:inherit\", \"color:gray;font-weight:normal\", \"color:inherit;font-weight:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nasync function logIncomingServerMessage(event) {\n  const byteLength = getMessageLength(event.data);\n  const publicData = await getPublicData(event.data);\n  const arrow = event.defaultPrevented ? \"\\u21E3\" : \"\\u2B07\";\n  console.groupCollapsed(devUtils.formatMessage(`${getTimestamp({\n    milliseconds: true\n  })} %c${arrow}%c ${publicData} %c${byteLength}%c`), `color:${colors.incoming}`, \"color:inherit\", \"color:gray;font-weight:normal\", \"color:inherit;font-weight:inherit\");\n  console.log(event);\n  console.groupEnd();\n}\nexport { attachWebSocketLogger, logConnectionOpen };\n//# sourceMappingURL=attachWebSocketLogger.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}