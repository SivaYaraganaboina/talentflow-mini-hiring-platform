{"ast":null,"code":"import { http, HttpResponse } from 'msw';\nimport { setupWorker } from 'msw/browser';\nimport { db } from './database';\n// Utility function to simulate network delay and errors\nconst simulateNetworkDelay = () => {\n  return new Promise((resolve, reject) => {\n    const delay = Math.random() * 200 + 50; // 50-250ms delay\n    const shouldError = Math.random() < 0.001; // 0.1% error rate\n\n    setTimeout(() => {\n      if (shouldError) {\n        reject(new Error('Network error'));\n      } else {\n        resolve();\n      }\n    }, delay);\n  });\n};\nconst handlers = [\n// Jobs endpoints\nhttp.get('/api/jobs', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const url = new URL(request.url);\n    const search = url.searchParams.get('search') || '';\n    const status = url.searchParams.get('status') || '';\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\n    const sort = url.searchParams.get('sort') || 'order';\n    let query = db.jobs.orderBy(sort);\n    if (status) {\n      query = query.filter(job => job.status === status);\n    }\n    if (search) {\n      const searchTerm = search.toLowerCase();\n      query = query.filter(job => job.title.toLowerCase().includes(searchTerm) || job.description.toLowerCase().includes(searchTerm) || job.tags.some(tag => tag.toLowerCase().includes(searchTerm)));\n    }\n    const total = await query.count();\n    const jobs = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\n    const response = {\n      data: jobs,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        totalPages: Math.ceil(total / pageSize)\n      }\n    };\n    return HttpResponse.json(response, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error('Jobs API error:', error);\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n}), http.post('/api/jobs', async ({\n  request\n}) => {\n  try {\n    console.log('MSW: Creating new job');\n    await simulateNetworkDelay();\n    const jobData = await request.json();\n    console.log('MSW: Job data received:', jobData);\n    const newJob = {\n      id: `job-${Date.now()}`,\n      title: jobData.title || '',\n      description: jobData.description || '',\n      location: jobData.location || '',\n      status: jobData.status || 'active',\n      tags: jobData.tags || [],\n      order: jobData.order || 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await db.jobs.add(newJob);\n    console.log('MSW: Job created successfully:', newJob.id);\n    return HttpResponse.json({\n      data: newJob\n    });\n  } catch (error) {\n    console.error('MSW: Failed to create job:', error);\n    return HttpResponse.json({\n      error: 'Failed to create job'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/jobs/:id', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const updates = await request.json();\n    await db.jobs.update(id, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n    const updatedJob = await db.jobs.get(id);\n    return HttpResponse.json({\n      data: updatedJob\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to update job'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/jobs/:id/reorder', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const {\n      fromOrder,\n      toOrder\n    } = await request.json();\n\n    // Simulate occasional failure for rollback testing (reduced frequency)\n    if (Math.random() < 0.05) {\n      return HttpResponse.json({\n        error: 'Reorder failed'\n      }, {\n        status: 500\n      });\n    }\n\n    // Handle both numeric IDs (like \"1\") and string IDs (like \"job-1\")\n    let jobId = id;\n    if (!isNaN(Number(id))) {\n      // If it's a numeric ID, try to find the corresponding job\n      const allJobs = await db.jobs.toArray();\n      const job = allJobs.find(j => j.id === id || j.id === `job-${id}`);\n      if (job) {\n        jobId = job.id;\n      }\n    }\n\n    // Update the specific job's order\n    const job = await db.jobs.get(jobId);\n    if (!job) {\n      return HttpResponse.json({\n        error: 'Job not found'\n      }, {\n        status: 404\n      });\n    }\n    await db.jobs.update(jobId, {\n      order: toOrder,\n      updatedAt: new Date().toISOString()\n    });\n    return HttpResponse.json({\n      success: true\n    });\n  } catch (error) {\n    console.error('Reorder API error:', error);\n    return HttpResponse.json({\n      error: 'Reorder failed'\n    }, {\n      status: 500\n    });\n  }\n}), http.get('/api/jobs/:id', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const job = await db.jobs.get(id);\n    if (!job) {\n      return HttpResponse.json({\n        error: 'Job not found'\n      }, {\n        status: 404\n      });\n    }\n    return HttpResponse.json({\n      data: job\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}),\n// Candidates endpoints\nhttp.get('/api/candidates', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const url = new URL(request.url);\n    const search = url.searchParams.get('search') || '';\n    const stage = url.searchParams.get('stage') || '';\n    const jobId = url.searchParams.get('jobId') || '';\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const pageSize = parseInt(url.searchParams.get('pageSize') || '50');\n    let query = db.candidates.orderBy('appliedAt').reverse();\n    if (stage) {\n      query = query.filter(candidate => candidate.stage === stage);\n    }\n    if (jobId) {\n      query = query.filter(candidate => candidate.jobId === jobId);\n    }\n    if (search) {\n      query = query.filter(candidate => candidate.name.toLowerCase().includes(search.toLowerCase()) || candidate.email.toLowerCase().includes(search.toLowerCase()));\n    }\n    const total = await query.count();\n    const candidates = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\n    const response = {\n      data: candidates,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        totalPages: Math.ceil(total / pageSize)\n      }\n    };\n    return HttpResponse.json(response, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error('Candidates API error:', error);\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n}), http.post('/api/candidates', async ({\n  request\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const candidateData = await request.json();\n    const newCandidate = {\n      id: `candidate-${Date.now()}`,\n      name: candidateData.name || '',\n      email: candidateData.email || '',\n      phone: candidateData.phone || '',\n      resume: candidateData.resume || '',\n      status: candidateData.status || 'active',\n      stage: candidateData.stage || 'applied',\n      jobId: candidateData.jobId || '',\n      appliedAt: new Date().toISOString(),\n      timeline: [{\n        id: `timeline-${Date.now()}`,\n        stage: candidateData.stage || 'applied',\n        timestamp: new Date().toISOString(),\n        notes: 'Application submitted'\n      }]\n    };\n    await db.candidates.add(newCandidate);\n    return HttpResponse.json({\n      data: newCandidate\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to create candidate'\n    }, {\n      status: 500\n    });\n  }\n}), http.patch('/api/candidates/:id', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const updates = await request.json();\n    const candidate = await db.candidates.get(id);\n    if (!candidate) {\n      return HttpResponse.json({\n        error: 'Candidate not found'\n      }, {\n        status: 404\n      });\n    }\n\n    // If stage is being updated, add timeline entry\n    if (updates.stage && updates.stage !== candidate.stage) {\n      const timelineEntry = {\n        id: `timeline-${Date.now()}`,\n        stage: updates.stage,\n        timestamp: new Date().toISOString(),\n        notes: updates.notes || `Moved to ${updates.stage}`\n      };\n      candidate.timeline.push(timelineEntry);\n      updates.timeline = candidate.timeline;\n    }\n    await db.candidates.update(id, updates);\n    const updatedCandidate = await db.candidates.get(id);\n    return HttpResponse.json({\n      data: updatedCandidate\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to update candidate'\n    }, {\n      status: 500\n    });\n  }\n}), http.get('/api/candidates/:id', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const candidate = await db.candidates.get(id);\n    if (!candidate) {\n      return HttpResponse.json({\n        error: 'Candidate not found'\n      }, {\n        status: 404\n      });\n    }\n    return HttpResponse.json({\n      data: candidate\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}), http.get('/api/candidates/:id/timeline', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      id\n    } = params;\n    const candidate = await db.candidates.get(id);\n    if (!candidate) {\n      return HttpResponse.json({\n        error: 'Candidate not found'\n      }, {\n        status: 404\n      });\n    }\n    return HttpResponse.json({\n      data: candidate.timeline\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}),\n// Assessments endpoints\nhttp.get('/api/assessments/:jobId', async ({\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const assessment = await db.assessments.where('jobId').equals(jobId).first();\n    return HttpResponse.json({\n      data: assessment || null\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Internal server error'\n    }, {\n      status: 500\n    });\n  }\n}), http.put('/api/assessments/:jobId', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const assessmentData = await request.json();\n    const existingAssessment = await db.assessments.where('jobId').equals(jobId).first();\n    if (existingAssessment) {\n      await db.assessments.update(existingAssessment.id, {\n        ...assessmentData,\n        updatedAt: new Date().toISOString()\n      });\n      const updated = await db.assessments.get(existingAssessment.id);\n      return HttpResponse.json({\n        data: updated\n      });\n    } else {\n      const newAssessment = {\n        id: `assessment-${Date.now()}`,\n        jobId: jobId,\n        title: assessmentData.title || '',\n        description: assessmentData.description || '',\n        sections: assessmentData.sections || [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      await db.assessments.add(newAssessment);\n      return HttpResponse.json({\n        data: newAssessment\n      });\n    }\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to save assessment'\n    }, {\n      status: 500\n    });\n  }\n}), http.post('/api/assessments/:jobId/submit', async ({\n  request,\n  params\n}) => {\n  try {\n    await simulateNetworkDelay();\n    const {\n      jobId\n    } = params;\n    const submissionData = await request.json();\n    const submission = {\n      id: `submission-${Date.now()}`,\n      jobId: jobId,\n      candidateId: submissionData.candidateId || '',\n      responses: submissionData.responses || {},\n      submittedAt: new Date().toISOString()\n    };\n    await db.submissions.add(submission);\n    return HttpResponse.json({\n      data: submission\n    });\n  } catch (error) {\n    return HttpResponse.json({\n      error: 'Failed to submit assessment'\n    }, {\n      status: 500\n    });\n  }\n})];\nexport const worker = setupWorker(...handlers);","map":{"version":3,"names":["http","HttpResponse","setupWorker","db","simulateNetworkDelay","Promise","resolve","reject","delay","Math","random","shouldError","setTimeout","Error","handlers","get","request","url","URL","search","searchParams","status","page","parseInt","pageSize","sort","query","jobs","orderBy","filter","job","searchTerm","toLowerCase","title","includes","description","tags","some","tag","total","count","offset","limit","toArray","response","data","pagination","totalPages","ceil","json","headers","error","console","post","log","jobData","newJob","id","Date","now","location","order","createdAt","toISOString","updatedAt","add","patch","params","updates","update","updatedJob","fromOrder","toOrder","jobId","isNaN","Number","allJobs","find","j","success","stage","candidates","reverse","candidate","name","email","candidateData","newCandidate","phone","resume","appliedAt","timeline","timestamp","notes","timelineEntry","push","updatedCandidate","assessment","assessments","where","equals","first","put","assessmentData","existingAssessment","updated","newAssessment","sections","submissionData","submission","candidateId","responses","submittedAt","submissions","worker"],"sources":["C:/Users/shiva/Desktop/talentflow-mini-hiring-platform/TalentFlow/src/services/mockApi.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport { setupWorker } from 'msw/browser';\r\nimport { db } from './database';\r\nimport { Job, Candidate, Assessment, AssessmentSubmission, ApiResponse, PaginationParams } from '../types';\r\n\r\n// Utility function to simulate network delay and errors\r\nconst simulateNetworkDelay = () => {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const delay = Math.random() * 200 + 50; // 50-250ms delay\r\n    const shouldError = Math.random() < 0.001; // 0.1% error rate\r\n\r\n    setTimeout(() => {\r\n      if (shouldError) {\r\n        reject(new Error('Network error'));\r\n      } else {\r\n        resolve();\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst handlers = [\r\n  // Jobs endpoints\r\n  http.get('/api/jobs', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const url = new URL(request.url);\r\n      const search = url.searchParams.get('search') || '';\r\n      const status = url.searchParams.get('status') || '';\r\n      const page = parseInt(url.searchParams.get('page') || '1');\r\n      const pageSize = parseInt(url.searchParams.get('pageSize') || '10');\r\n      const sort = url.searchParams.get('sort') || 'order';\r\n\r\n      let query = db.jobs.orderBy(sort);\r\n\r\n      if (status) {\r\n        query = query.filter(job => job.status === status);\r\n      }\r\n\r\n      if (search) {\r\n        const searchTerm = search.toLowerCase();\r\n        query = query.filter(job =>\r\n          job.title.toLowerCase().includes(searchTerm) ||\r\n          job.description.toLowerCase().includes(searchTerm) ||\r\n          job.tags.some(tag => tag.toLowerCase().includes(searchTerm))\r\n        );\r\n      }\r\n\r\n      const total = await query.count();\r\n      const jobs = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\r\n\r\n      const response: ApiResponse<Job[]> = {\r\n        data: jobs,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total,\r\n          totalPages: Math.ceil(total / pageSize)\r\n        }\r\n      };\r\n\r\n      return HttpResponse.json(response, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Jobs API error:', error);\r\n      return HttpResponse.json({ error: 'Internal server error' }, {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/jobs', async ({ request }) => {\r\n    try {\r\n      console.log('MSW: Creating new job');\r\n      await simulateNetworkDelay();\r\n\r\n      const jobData = await request.json() as Partial<Job>;\r\n      console.log('MSW: Job data received:', jobData);\r\n\r\n      const newJob: Job = {\r\n        id: `job-${Date.now()}`,\r\n        title: jobData.title || '',\r\n        description: jobData.description || '',\r\n        location: jobData.location || '',\r\n        status: jobData.status || 'active',\r\n        tags: jobData.tags || [],\r\n        order: jobData.order || 0,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      await db.jobs.add(newJob);\r\n      console.log('MSW: Job created successfully:', newJob.id);\r\n      return HttpResponse.json({ data: newJob });\r\n    } catch (error) {\r\n      console.error('MSW: Failed to create job:', error);\r\n      return HttpResponse.json({ error: 'Failed to create job' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/jobs/:id', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { id } = params;\r\n      const updates = await request.json() as Partial<Job>;\r\n      \r\n      await db.jobs.update(id as string, {\r\n        ...updates,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      const updatedJob = await db.jobs.get(id as string);\r\n      return HttpResponse.json({ data: updatedJob });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to update job' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/jobs/:id/reorder', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const { fromOrder, toOrder } = await request.json() as { fromOrder: number; toOrder: number };\r\n\r\n      // Simulate occasional failure for rollback testing (reduced frequency)\r\n      if (Math.random() < 0.05) {\r\n        return HttpResponse.json({ error: 'Reorder failed' }, { status: 500 });\r\n      }\r\n\r\n      // Handle both numeric IDs (like \"1\") and string IDs (like \"job-1\")\r\n      let jobId = id as string;\r\n      if (!isNaN(Number(id))) {\r\n        // If it's a numeric ID, try to find the corresponding job\r\n        const allJobs = await db.jobs.toArray();\r\n        const job = allJobs.find(j => j.id === id || j.id === `job-${id}`);\r\n        if (job) {\r\n          jobId = job.id;\r\n        }\r\n      }\r\n\r\n      // Update the specific job's order\r\n      const job = await db.jobs.get(jobId);\r\n      if (!job) {\r\n        return HttpResponse.json({ error: 'Job not found' }, { status: 404 });\r\n      }\r\n\r\n      await db.jobs.update(jobId, {\r\n        order: toOrder,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      return HttpResponse.json({ success: true });\r\n    } catch (error) {\r\n      console.error('Reorder API error:', error);\r\n      return HttpResponse.json({ error: 'Reorder failed' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.get('/api/jobs/:id', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const job = await db.jobs.get(id as string);\r\n\r\n      if (!job) {\r\n        return HttpResponse.json({ error: 'Job not found' }, { status: 404 });\r\n      }\r\n\r\n      return HttpResponse.json({ data: job });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  // Candidates endpoints\r\n  http.get('/api/candidates', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const url = new URL(request.url);\r\n      const search = url.searchParams.get('search') || '';\r\n      const stage = url.searchParams.get('stage') || '';\r\n      const jobId = url.searchParams.get('jobId') || '';\r\n      const page = parseInt(url.searchParams.get('page') || '1');\r\n      const pageSize = parseInt(url.searchParams.get('pageSize') || '50');\r\n\r\n      let query = db.candidates.orderBy('appliedAt').reverse();\r\n\r\n      if (stage) {\r\n        query = query.filter(candidate => candidate.stage === stage);\r\n      }\r\n\r\n      if (jobId) {\r\n        query = query.filter(candidate => candidate.jobId === jobId);\r\n      }\r\n\r\n      if (search) {\r\n        query = query.filter(candidate =>\r\n          candidate.name.toLowerCase().includes(search.toLowerCase()) ||\r\n          candidate.email.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n      }\r\n\r\n      const total = await query.count();\r\n      const candidates = await query.offset((page - 1) * pageSize).limit(pageSize).toArray();\r\n\r\n      const response: ApiResponse<Candidate[]> = {\r\n        data: candidates,\r\n        pagination: {\r\n          page,\r\n          pageSize,\r\n          total,\r\n          totalPages: Math.ceil(total / pageSize)\r\n        }\r\n      };\r\n\r\n      return HttpResponse.json(response, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Candidates API error:', error);\r\n      return HttpResponse.json({ error: 'Internal server error' }, {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/candidates', async ({ request }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const candidateData = await request.json() as Partial<Candidate>;\r\n      const newCandidate: Candidate = {\r\n        id: `candidate-${Date.now()}`,\r\n        name: candidateData.name || '',\r\n        email: candidateData.email || '',\r\n        phone: candidateData.phone || '',\r\n        resume: candidateData.resume || '',\r\n        status: candidateData.status || 'active',\r\n        stage: candidateData.stage || 'applied',\r\n        jobId: candidateData.jobId || '',\r\n        appliedAt: new Date().toISOString(),\r\n        timeline: [\r\n          {\r\n            id: `timeline-${Date.now()}`,\r\n            stage: candidateData.stage || 'applied',\r\n            timestamp: new Date().toISOString(),\r\n            notes: 'Application submitted'\r\n          }\r\n        ]\r\n      };\r\n\r\n      await db.candidates.add(newCandidate);\r\n      return HttpResponse.json({ data: newCandidate });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to create candidate' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.patch('/api/candidates/:id', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { id } = params;\r\n      const updates = await request.json() as Partial<Candidate> & { notes?: string };\r\n      \r\n      const candidate = await db.candidates.get(id as string);\r\n      if (!candidate) {\r\n        return HttpResponse.json({ error: 'Candidate not found' }, { status: 404 });\r\n      }\r\n\r\n      // If stage is being updated, add timeline entry\r\n      if (updates.stage && updates.stage !== candidate.stage) {\r\n        const timelineEntry = {\r\n          id: `timeline-${Date.now()}`,\r\n          stage: updates.stage,\r\n          timestamp: new Date().toISOString(),\r\n          notes: updates.notes || `Moved to ${updates.stage}`\r\n        };\r\n        \r\n        candidate.timeline.push(timelineEntry);\r\n        updates.timeline = candidate.timeline;\r\n      }\r\n\r\n      await db.candidates.update(id as string, updates as Partial<Candidate>);\r\n      const updatedCandidate = await db.candidates.get(id as string);\r\n      \r\n      return HttpResponse.json({ data: updatedCandidate });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to update candidate' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.get('/api/candidates/:id', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const candidate = await db.candidates.get(id as string);\r\n\r\n      if (!candidate) {\r\n        return HttpResponse.json({ error: 'Candidate not found' }, { status: 404 });\r\n      }\r\n\r\n      return HttpResponse.json({ data: candidate });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.get('/api/candidates/:id/timeline', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { id } = params;\r\n      const candidate = await db.candidates.get(id as string);\r\n\r\n      if (!candidate) {\r\n        return HttpResponse.json({ error: 'Candidate not found' }, { status: 404 });\r\n      }\r\n\r\n      return HttpResponse.json({ data: candidate.timeline });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  // Assessments endpoints\r\n  http.get('/api/assessments/:jobId', async ({ params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n      \r\n      const { jobId } = params;\r\n      const assessment = await db.assessments.where('jobId').equals(jobId as string).first();\r\n      \r\n      return HttpResponse.json({ data: assessment || null });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.put('/api/assessments/:jobId', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { jobId } = params;\r\n      const assessmentData = await request.json() as Partial<Assessment>;\r\n\r\n      const existingAssessment = await db.assessments.where('jobId').equals(jobId as string).first();\r\n\r\n      if (existingAssessment) {\r\n        await db.assessments.update(existingAssessment.id, {\r\n          ...assessmentData,\r\n          updatedAt: new Date().toISOString()\r\n        });\r\n        const updated = await db.assessments.get(existingAssessment.id);\r\n        return HttpResponse.json({ data: updated });\r\n      } else {\r\n        const newAssessment: Assessment = {\r\n          id: `assessment-${Date.now()}`,\r\n          jobId: jobId as string,\r\n          title: assessmentData.title || '',\r\n          description: assessmentData.description || '',\r\n          sections: assessmentData.sections || [],\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n\r\n        await db.assessments.add(newAssessment);\r\n        return HttpResponse.json({ data: newAssessment });\r\n      }\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to save assessment' }, { status: 500 });\r\n    }\r\n  }),\r\n\r\n  http.post('/api/assessments/:jobId/submit', async ({ request, params }) => {\r\n    try {\r\n      await simulateNetworkDelay();\r\n\r\n      const { jobId } = params;\r\n      const submissionData = await request.json() as Partial<AssessmentSubmission>;\r\n\r\n      const submission: AssessmentSubmission = {\r\n        id: `submission-${Date.now()}`,\r\n        jobId: jobId as string,\r\n        candidateId: submissionData.candidateId || '',\r\n        responses: submissionData.responses || {},\r\n        submittedAt: new Date().toISOString()\r\n      };\r\n\r\n      await db.submissions.add(submission);\r\n      return HttpResponse.json({ data: submission });\r\n    } catch (error) {\r\n      return HttpResponse.json({ error: 'Failed to submit assessment' }, { status: 500 });\r\n    }\r\n  })\r\n];\r\n\r\nexport const worker = setupWorker(...handlers);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}