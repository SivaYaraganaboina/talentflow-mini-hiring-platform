{"ast":null,"code":"import { getCallFrame } from '../utils/internal/getCallFrame.mjs';\nimport { isIterable } from '../utils/internal/isIterable.mjs';\nclass RequestHandler {\n  static cache = /* @__PURE__ */new WeakMap();\n  __kind;\n  info;\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n  isUsed;\n  resolver;\n  resolverIterator;\n  resolverIteratorResult;\n  options;\n  constructor(args) {\n    this.resolver = args.resolver;\n    this.options = args.options;\n    const callFrame = getCallFrame(new Error());\n    this.info = {\n      ...args.info,\n      callFrame\n    };\n    this.isUsed = false;\n    this.__kind = \"RequestHandler\";\n  }\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  async parse(_args) {\n    return {};\n  }\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n  async test(args) {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n  }\n  extendResolverArgs(_args) {\n    return {};\n  }\n  // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n  cloneRequestOrGetFromCache(request) {\n    const existingClone = RequestHandler.cache.get(request);\n    if (typeof existingClone !== \"undefined\") {\n      return existingClone;\n    }\n    const clonedRequest = request.clone();\n    RequestHandler.cache.set(request, clonedRequest);\n    return clonedRequest;\n  }\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  async run(args) {\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n    const requestClone = this.cloneRequestOrGetFromCache(args.request);\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    const shouldInterceptRequest = await this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n    if (!shouldInterceptRequest) {\n      return null;\n    }\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n    this.isUsed = true;\n    const executeResolver = this.wrapResolver(this.resolver);\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult\n    });\n    const mockedResponsePromise = executeResolver({\n      ...resolverExtras,\n      requestId: args.requestId,\n      request: args.request\n    }).catch(errorOrResponse => {\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse;\n      }\n      throw errorOrResponse;\n    });\n    const mockedResponse = await mockedResponsePromise;\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult\n    });\n    return executionResult;\n  }\n  wrapResolver(resolver) {\n    return async info => {\n      if (!this.resolverIterator) {\n        const result = await resolver(info);\n        if (!isIterable(result)) {\n          return result;\n        }\n        this.resolverIterator = Symbol.iterator in result ? result[Symbol.iterator]() : result[Symbol.asyncIterator]();\n      }\n      this.isUsed = false;\n      const {\n        done,\n        value\n      } = await this.resolverIterator.next();\n      const nextResponse = await value;\n      if (nextResponse) {\n        this.resolverIteratorResult = nextResponse.clone();\n      }\n      if (done) {\n        this.isUsed = true;\n        return this.resolverIteratorResult?.clone();\n      }\n      return nextResponse;\n    };\n  }\n  createExecutionResult(args) {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult\n    };\n  }\n}\nexport { RequestHandler };\n//# sourceMappingURL=RequestHandler.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}